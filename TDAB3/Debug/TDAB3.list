
TDAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5b0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800f848  0800f848  0001f848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fbfc  0800fbfc  0001fbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fc04  0800fc04  0001fc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fc08  0800fc08  0001fc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000444  24000000  0800fc0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002f58  24000448  08010050  00020448  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240033a0  08010050  000233a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020472  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001e4a8  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002f1d  00000000  00000000  0003e95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001770  00000000  00000000  00041880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000126a  00000000  00000000  00042ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039a6b  00000000  00000000  0004425a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f5c9  00000000  00000000  0007dcc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017bbc0  00000000  00000000  0009d28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006694  00000000  00000000  00218e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  0021f4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000448 	.word	0x24000448
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f830 	.word	0x0800f830

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400044c 	.word	0x2400044c
 80002d4:	0800f830 	.word	0x0800f830

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <PCModbusRTU>:
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE/2], ADC_CONVERTED_DATA_BUFFER_SIZE);
}


void PCModbusRTU(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	int i;
	uint16_t temp = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	807b      	strh	r3, [r7, #2]
	static uint16_t cal_crc = 0;
	static uint16_t crc_count = 0;
	static uint8_t num_bytes = 0;

	switch(pc_protocol_state) {
 80005de:	4b9e      	ldr	r3, [pc, #632]	; (8000858 <PCModbusRTU+0x284>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	f200 832e 	bhi.w	8000c44 <PCModbusRTU+0x670>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <PCModbusRTU+0x1c>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000601 	.word	0x08000601
 80005f4:	0800063f 	.word	0x0800063f
 80005f8:	0800083b 	.word	0x0800083b
 80005fc:	08000b45 	.word	0x08000b45

		case SYNC_STATE:

			pc_data_in = 0;
 8000600:	4b96      	ldr	r3, [pc, #600]	; (800085c <PCModbusRTU+0x288>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
			pc_data_out = 0;
 8000606:	4b96      	ldr	r3, [pc, #600]	; (8000860 <PCModbusRTU+0x28c>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
			UART_Pc_byte_count = 0;
 800060c:	4b95      	ldr	r3, [pc, #596]	; (8000864 <PCModbusRTU+0x290>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
			memset(PC_RxBuff, 0, UART_MSG_SIZE);
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	2100      	movs	r1, #0
 8000616:	4894      	ldr	r0, [pc, #592]	; (8000868 <PCModbusRTU+0x294>)
 8000618:	f00f f8de 	bl	800f7d8 <memset>
			memset(PC_TxBuff, 0, UART_MSG_SIZE);
 800061c:	2228      	movs	r2, #40	; 0x28
 800061e:	2100      	movs	r1, #0
 8000620:	4892      	ldr	r0, [pc, #584]	; (800086c <PCModbusRTU+0x298>)
 8000622:	f00f f8d9 	bl	800f7d8 <memset>
			memset(record.data, 0, UART_MSG_SIZE);
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4891      	ldr	r0, [pc, #580]	; (8000870 <PCModbusRTU+0x29c>)
 800062c:	f00f f8d4 	bl	800f7d8 <memset>
			pc_protocol_state = RECEIVE_STATE;
 8000630:	4b89      	ldr	r3, [pc, #548]	; (8000858 <PCModbusRTU+0x284>)
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 8000636:	4b8f      	ldr	r3, [pc, #572]	; (8000874 <PCModbusRTU+0x2a0>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]

			break;
 800063c:	e317      	b.n	8000c6e <PCModbusRTU+0x69a>


		case RECEIVE_STATE:

				if(PC_RxBuff[0] == SLAVE_ADDRESS) {
 800063e:	4b8a      	ldr	r3, [pc, #552]	; (8000868 <PCModbusRTU+0x294>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	f040 80df 	bne.w	8000806 <PCModbusRTU+0x232>
					switch(PC_RxBuff[1]) {
 8000648:	4b87      	ldr	r3, [pc, #540]	; (8000868 <PCModbusRTU+0x294>)
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	2b17      	cmp	r3, #23
 800064e:	f000 8090 	beq.w	8000772 <PCModbusRTU+0x19e>
 8000652:	2b17      	cmp	r3, #23
 8000654:	f300 80cb 	bgt.w	80007ee <PCModbusRTU+0x21a>
 8000658:	2b03      	cmp	r3, #3
 800065a:	d002      	beq.n	8000662 <PCModbusRTU+0x8e>
 800065c:	2b10      	cmp	r3, #16
 800065e:	d037      	beq.n	80006d0 <PCModbusRTU+0xfc>
 8000660:	e0c5      	b.n	80007ee <PCModbusRTU+0x21a>

					case READ_HOLDING_REGISTERS:
						start_timer = 1;
 8000662:	4b84      	ldr	r3, [pc, #528]	; (8000874 <PCModbusRTU+0x2a0>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
						if(timer_tick >= 500)	// 5 SECS
 8000668:	4b83      	ldr	r3, [pc, #524]	; (8000878 <PCModbusRTU+0x2a4>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000670:	d302      	bcc.n	8000678 <PCModbusRTU+0xa4>
							pc_protocol_state = SYNC_STATE;
 8000672:	4b79      	ldr	r3, [pc, #484]	; (8000858 <PCModbusRTU+0x284>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]

						if(UART_Pc_byte_count >= 8) {
 8000678:	4b7a      	ldr	r3, [pc, #488]	; (8000864 <PCModbusRTU+0x290>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b07      	cmp	r3, #7
 800067e:	f240 80d4 	bls.w	800082a <PCModbusRTU+0x256>
							cal_crc = CRC16(PC_RxBuff,(6));
 8000682:	2106      	movs	r1, #6
 8000684:	4878      	ldr	r0, [pc, #480]	; (8000868 <PCModbusRTU+0x294>)
 8000686:	f002 fde3 	bl	8003250 <CRC16>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	4b7b      	ldr	r3, [pc, #492]	; (800087c <PCModbusRTU+0x2a8>)
 8000690:	801a      	strh	r2, [r3, #0]
							temp = PC_RxBuff[7];
 8000692:	4b75      	ldr	r3, [pc, #468]	; (8000868 <PCModbusRTU+0x294>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	807b      	strh	r3, [r7, #2]
							temp = ((temp << 8) | PC_RxBuff[6]);
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	b21a      	sxth	r2, r3
 800069e:	4b72      	ldr	r3, [pc, #456]	; (8000868 <PCModbusRTU+0x294>)
 80006a0:	799b      	ldrb	r3, [r3, #6]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	807b      	strh	r3, [r7, #2]

							if(cal_crc == temp) {
 80006aa:	4b74      	ldr	r3, [pc, #464]	; (800087c <PCModbusRTU+0x2a8>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	887a      	ldrh	r2, [r7, #2]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d106      	bne.n	80006c2 <PCModbusRTU+0xee>
								pc_protocol_state = PROCESS_STATE;
 80006b4:	4b68      	ldr	r3, [pc, #416]	; (8000858 <PCModbusRTU+0x284>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	701a      	strb	r2, [r3, #0]
								pc_data_out = 1;
 80006ba:	4b69      	ldr	r3, [pc, #420]	; (8000860 <PCModbusRTU+0x28c>)
 80006bc:	2201      	movs	r2, #1
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	e002      	b.n	80006c8 <PCModbusRTU+0xf4>
							}
							else
								pc_protocol_state = SYNC_STATE;
 80006c2:	4b65      	ldr	r3, [pc, #404]	; (8000858 <PCModbusRTU+0x284>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]

							start_timer = 0;
 80006c8:	4b6a      	ldr	r3, [pc, #424]	; (8000874 <PCModbusRTU+0x2a0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
						}

						break;
 80006ce:	e0ac      	b.n	800082a <PCModbusRTU+0x256>

					case WRITE_MULTIPLE_REGISTERS:
						start_timer = 1;
 80006d0:	4b68      	ldr	r3, [pc, #416]	; (8000874 <PCModbusRTU+0x2a0>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
						if(timer_tick >= 500)	// 5 SECS
 80006d6:	4b68      	ldr	r3, [pc, #416]	; (8000878 <PCModbusRTU+0x2a4>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006de:	d302      	bcc.n	80006e6 <PCModbusRTU+0x112>
							pc_protocol_state = SYNC_STATE;
 80006e0:	4b5d      	ldr	r3, [pc, #372]	; (8000858 <PCModbusRTU+0x284>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]

						num_bytes = PC_RxBuff[6];
 80006e6:	4b60      	ldr	r3, [pc, #384]	; (8000868 <PCModbusRTU+0x294>)
 80006e8:	799a      	ldrb	r2, [r3, #6]
 80006ea:	4b65      	ldr	r3, [pc, #404]	; (8000880 <PCModbusRTU+0x2ac>)
 80006ec:	701a      	strb	r2, [r3, #0]

						if(num_bytes) {
 80006ee:	4b64      	ldr	r3, [pc, #400]	; (8000880 <PCModbusRTU+0x2ac>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f000 809b 	beq.w	800082e <PCModbusRTU+0x25a>

							if(UART_Pc_byte_count >= (num_bytes + 9)) {
 80006f8:	4b61      	ldr	r3, [pc, #388]	; (8000880 <PCModbusRTU+0x2ac>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	3308      	adds	r3, #8
 80006fe:	4a59      	ldr	r2, [pc, #356]	; (8000864 <PCModbusRTU+0x290>)
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	4293      	cmp	r3, r2
 8000704:	f280 8093 	bge.w	800082e <PCModbusRTU+0x25a>
								start_timer = 0;
 8000708:	4b5a      	ldr	r3, [pc, #360]	; (8000874 <PCModbusRTU+0x2a0>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
								timer_tick = 0;
 800070e:	4b5a      	ldr	r3, [pc, #360]	; (8000878 <PCModbusRTU+0x2a4>)
 8000710:	2200      	movs	r2, #0
 8000712:	801a      	strh	r2, [r3, #0]

								cal_crc = CRC16(PC_RxBuff,((num_bytes + 9) - 2));
 8000714:	4b5a      	ldr	r3, [pc, #360]	; (8000880 <PCModbusRTU+0x2ac>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b29b      	uxth	r3, r3
 800071a:	3307      	adds	r3, #7
 800071c:	b29b      	uxth	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	4851      	ldr	r0, [pc, #324]	; (8000868 <PCModbusRTU+0x294>)
 8000722:	f002 fd95 	bl	8003250 <CRC16>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	4b54      	ldr	r3, [pc, #336]	; (800087c <PCModbusRTU+0x2a8>)
 800072c:	801a      	strh	r2, [r3, #0]
								temp = PC_RxBuff[(num_bytes + 9) - 1];
 800072e:	4b54      	ldr	r3, [pc, #336]	; (8000880 <PCModbusRTU+0x2ac>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	3308      	adds	r3, #8
 8000734:	4a4c      	ldr	r2, [pc, #304]	; (8000868 <PCModbusRTU+0x294>)
 8000736:	5cd3      	ldrb	r3, [r2, r3]
 8000738:	807b      	strh	r3, [r7, #2]
								temp = ((temp << 8) | PC_RxBuff[(num_bytes + 9) - 2]);
 800073a:	887b      	ldrh	r3, [r7, #2]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	b21a      	sxth	r2, r3
 8000740:	4b4f      	ldr	r3, [pc, #316]	; (8000880 <PCModbusRTU+0x2ac>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3307      	adds	r3, #7
 8000746:	4948      	ldr	r1, [pc, #288]	; (8000868 <PCModbusRTU+0x294>)
 8000748:	5ccb      	ldrb	r3, [r1, r3]
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	b21b      	sxth	r3, r3
 8000750:	807b      	strh	r3, [r7, #2]

								if(cal_crc == temp) {
 8000752:	4b4a      	ldr	r3, [pc, #296]	; (800087c <PCModbusRTU+0x2a8>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	887a      	ldrh	r2, [r7, #2]
 8000758:	429a      	cmp	r2, r3
 800075a:	d106      	bne.n	800076a <PCModbusRTU+0x196>
									pc_protocol_state = PROCESS_STATE;
 800075c:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <PCModbusRTU+0x284>)
 800075e:	2202      	movs	r2, #2
 8000760:	701a      	strb	r2, [r3, #0]
									pc_data_out = 1;
 8000762:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <PCModbusRTU+0x28c>)
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
								}

							}
						}

						break;
 8000768:	e061      	b.n	800082e <PCModbusRTU+0x25a>
									pc_protocol_state = SYNC_STATE;
 800076a:	4b3b      	ldr	r3, [pc, #236]	; (8000858 <PCModbusRTU+0x284>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
						break;
 8000770:	e05d      	b.n	800082e <PCModbusRTU+0x25a>

					case READ_WRITE_MULTIPLE_REGISTERS:

						num_bytes = PC_RxBuff[10];
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <PCModbusRTU+0x294>)
 8000774:	7a9a      	ldrb	r2, [r3, #10]
 8000776:	4b42      	ldr	r3, [pc, #264]	; (8000880 <PCModbusRTU+0x2ac>)
 8000778:	701a      	strb	r2, [r3, #0]

						if(num_bytes) {
 800077a:	4b41      	ldr	r3, [pc, #260]	; (8000880 <PCModbusRTU+0x2ac>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d057      	beq.n	8000832 <PCModbusRTU+0x25e>

							if(UART_Pc_byte_count >= (num_bytes + 12)) {
 8000782:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <PCModbusRTU+0x2ac>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	330b      	adds	r3, #11
 8000788:	4a36      	ldr	r2, [pc, #216]	; (8000864 <PCModbusRTU+0x290>)
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	4293      	cmp	r3, r2
 800078e:	da50      	bge.n	8000832 <PCModbusRTU+0x25e>

								cal_crc = CRC16(PC_RxBuff,(UART_Pc_byte_count - 2));
 8000790:	4b34      	ldr	r3, [pc, #208]	; (8000864 <PCModbusRTU+0x290>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b29b      	uxth	r3, r3
 8000796:	3b02      	subs	r3, #2
 8000798:	b29b      	uxth	r3, r3
 800079a:	4619      	mov	r1, r3
 800079c:	4832      	ldr	r0, [pc, #200]	; (8000868 <PCModbusRTU+0x294>)
 800079e:	f002 fd57 	bl	8003250 <CRC16>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b35      	ldr	r3, [pc, #212]	; (800087c <PCModbusRTU+0x2a8>)
 80007a8:	801a      	strh	r2, [r3, #0]
								temp = PC_RxBuff[UART_Pc_byte_count - 1];
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <PCModbusRTU+0x290>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	4a2d      	ldr	r2, [pc, #180]	; (8000868 <PCModbusRTU+0x294>)
 80007b2:	5cd3      	ldrb	r3, [r2, r3]
 80007b4:	807b      	strh	r3, [r7, #2]
								temp = ((temp << 8) | PC_RxBuff[UART_Pc_byte_count - 2]);
 80007b6:	887b      	ldrh	r3, [r7, #2]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <PCModbusRTU+0x290>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3b02      	subs	r3, #2
 80007c2:	4929      	ldr	r1, [pc, #164]	; (8000868 <PCModbusRTU+0x294>)
 80007c4:	5ccb      	ldrb	r3, [r1, r3]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	807b      	strh	r3, [r7, #2]

								if(cal_crc == temp) {
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <PCModbusRTU+0x2a8>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	887a      	ldrh	r2, [r7, #2]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d106      	bne.n	80007e6 <PCModbusRTU+0x212>
									pc_protocol_state = PROCESS_STATE;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <PCModbusRTU+0x284>)
 80007da:	2202      	movs	r2, #2
 80007dc:	701a      	strb	r2, [r3, #0]
									pc_data_out = 1;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <PCModbusRTU+0x28c>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
									pc_protocol_state = SYNC_STATE;
								}
							}
						}

						break;
 80007e4:	e025      	b.n	8000832 <PCModbusRTU+0x25e>
									pc_protocol_state = SYNC_STATE;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <PCModbusRTU+0x284>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
						break;
 80007ec:	e021      	b.n	8000832 <PCModbusRTU+0x25e>

					default:
						start_timer = 1;
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <PCModbusRTU+0x2a0>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
						if(timer_tick >= 500)	// 5 SECS
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <PCModbusRTU+0x2a4>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007fc:	d31b      	bcc.n	8000836 <PCModbusRTU+0x262>
							pc_protocol_state = SYNC_STATE;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <PCModbusRTU+0x284>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
						break;
 8000804:	e017      	b.n	8000836 <PCModbusRTU+0x262>

					}
				}
				else if(UART_Pc_byte_count) {
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <PCModbusRTU+0x290>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 821c 	beq.w	8000c48 <PCModbusRTU+0x674>
					start_timer = 1;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <PCModbusRTU+0x2a0>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
					if(timer_tick >= 500)	// 5 SECS
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <PCModbusRTU+0x2a4>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800081e:	f0c0 8213 	bcc.w	8000c48 <PCModbusRTU+0x674>
						pc_protocol_state = SYNC_STATE;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <PCModbusRTU+0x284>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
				}

			break;
 8000828:	e20e      	b.n	8000c48 <PCModbusRTU+0x674>
						break;
 800082a:	bf00      	nop
 800082c:	e20c      	b.n	8000c48 <PCModbusRTU+0x674>
						break;
 800082e:	bf00      	nop
 8000830:	e20a      	b.n	8000c48 <PCModbusRTU+0x674>
						break;
 8000832:	bf00      	nop
 8000834:	e208      	b.n	8000c48 <PCModbusRTU+0x674>
						break;
 8000836:	bf00      	nop
			break;
 8000838:	e206      	b.n	8000c48 <PCModbusRTU+0x674>


			case PROCESS_STATE:
				switch(PC_RxBuff[pc_data_out]) {
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <PCModbusRTU+0x28c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <PCModbusRTU+0x294>)
 8000840:	5cd3      	ldrb	r3, [r2, r3]
 8000842:	2b17      	cmp	r3, #23
 8000844:	f000 80da 	beq.w	80009fc <PCModbusRTU+0x428>
 8000848:	2b17      	cmp	r3, #23
 800084a:	f300 820d 	bgt.w	8000c68 <PCModbusRTU+0x694>
 800084e:	2b03      	cmp	r3, #3
 8000850:	d018      	beq.n	8000884 <PCModbusRTU+0x2b0>
 8000852:	2b10      	cmp	r3, #16
 8000854:	d061      	beq.n	800091a <PCModbusRTU+0x346>


						break;

				}
				break;
 8000856:	e207      	b.n	8000c68 <PCModbusRTU+0x694>
 8000858:	24003330 	.word	0x24003330
 800085c:	24001248 	.word	0x24001248
 8000860:	2400124c 	.word	0x2400124c
 8000864:	2400125a 	.word	0x2400125a
 8000868:	2400125c 	.word	0x2400125c
 800086c:	24001284 	.word	0x24001284
 8000870:	24003340 	.word	0x24003340
 8000874:	24001306 	.word	0x24001306
 8000878:	24001302 	.word	0x24001302
 800087c:	24003390 	.word	0x24003390
 8000880:	24003392 	.word	0x24003392
						pc_data_out++;
 8000884:	4b59      	ldr	r3, [pc, #356]	; (80009ec <PCModbusRTU+0x418>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a58      	ldr	r2, [pc, #352]	; (80009ec <PCModbusRTU+0x418>)
 800088c:	6013      	str	r3, [r2, #0]
						record.function_code = READ_HOLDING_REGISTERS;
 800088e:	4b58      	ldr	r3, [pc, #352]	; (80009f0 <PCModbusRTU+0x41c>)
 8000890:	2203      	movs	r2, #3
 8000892:	701a      	strb	r2, [r3, #0]
						temp = (uint16_t)(PC_RxBuff[pc_data_out] << 8);
 8000894:	4b55      	ldr	r3, [pc, #340]	; (80009ec <PCModbusRTU+0x418>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a56      	ldr	r2, [pc, #344]	; (80009f4 <PCModbusRTU+0x420>)
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	b29b      	uxth	r3, r3
 800089e:	021b      	lsls	r3, r3, #8
 80008a0:	807b      	strh	r3, [r7, #2]
						pc_data_out++;
 80008a2:	4b52      	ldr	r3, [pc, #328]	; (80009ec <PCModbusRTU+0x418>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	4a50      	ldr	r2, [pc, #320]	; (80009ec <PCModbusRTU+0x418>)
 80008aa:	6013      	str	r3, [r2, #0]
						record.read_start_address = (uint16_t) (temp | PC_RxBuff[pc_data_out]);
 80008ac:	4b4f      	ldr	r3, [pc, #316]	; (80009ec <PCModbusRTU+0x418>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a50      	ldr	r2, [pc, #320]	; (80009f4 <PCModbusRTU+0x420>)
 80008b2:	5cd3      	ldrb	r3, [r2, r3]
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	887b      	ldrh	r3, [r7, #2]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <PCModbusRTU+0x41c>)
 80008be:	805a      	strh	r2, [r3, #2]
						pc_data_out++;
 80008c0:	4b4a      	ldr	r3, [pc, #296]	; (80009ec <PCModbusRTU+0x418>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a49      	ldr	r2, [pc, #292]	; (80009ec <PCModbusRTU+0x418>)
 80008c8:	6013      	str	r3, [r2, #0]
						temp = (uint16_t)(PC_RxBuff[pc_data_out] << 8);
 80008ca:	4b48      	ldr	r3, [pc, #288]	; (80009ec <PCModbusRTU+0x418>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a49      	ldr	r2, [pc, #292]	; (80009f4 <PCModbusRTU+0x420>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	807b      	strh	r3, [r7, #2]
						pc_data_out++;
 80008d8:	4b44      	ldr	r3, [pc, #272]	; (80009ec <PCModbusRTU+0x418>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	4a43      	ldr	r2, [pc, #268]	; (80009ec <PCModbusRTU+0x418>)
 80008e0:	6013      	str	r3, [r2, #0]
						record.read_registers = (uint16_t) (temp | PC_RxBuff[pc_data_out]);
 80008e2:	4b42      	ldr	r3, [pc, #264]	; (80009ec <PCModbusRTU+0x418>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a43      	ldr	r2, [pc, #268]	; (80009f4 <PCModbusRTU+0x420>)
 80008e8:	5cd3      	ldrb	r3, [r2, r3]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	887b      	ldrh	r3, [r7, #2]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <PCModbusRTU+0x41c>)
 80008f4:	80da      	strh	r2, [r3, #6]
						pc_data_out++;
 80008f6:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <PCModbusRTU+0x418>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	4a3b      	ldr	r2, [pc, #236]	; (80009ec <PCModbusRTU+0x418>)
 80008fe:	6013      	str	r3, [r2, #0]
						record.read_byte_count = (record.read_registers * 2);
 8000900:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <PCModbusRTU+0x41c>)
 8000902:	88db      	ldrh	r3, [r3, #6]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b39      	ldr	r3, [pc, #228]	; (80009f0 <PCModbusRTU+0x41c>)
 800090c:	729a      	strb	r2, [r3, #10]
						ProcessPCCommands();
 800090e:	f002 fb4f 	bl	8002fb0 <ProcessPCCommands>
						pc_protocol_state = TRANSMIT_STATE;
 8000912:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <PCModbusRTU+0x424>)
 8000914:	2203      	movs	r2, #3
 8000916:	701a      	strb	r2, [r3, #0]
						break;
 8000918:	e113      	b.n	8000b42 <PCModbusRTU+0x56e>
						pc_data_out++;
 800091a:	4b34      	ldr	r3, [pc, #208]	; (80009ec <PCModbusRTU+0x418>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	3301      	adds	r3, #1
 8000920:	4a32      	ldr	r2, [pc, #200]	; (80009ec <PCModbusRTU+0x418>)
 8000922:	6013      	str	r3, [r2, #0]
						record.function_code = WRITE_MULTIPLE_REGISTERS;
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <PCModbusRTU+0x41c>)
 8000926:	2210      	movs	r2, #16
 8000928:	701a      	strb	r2, [r3, #0]
						temp = (uint16_t)PC_RxBuff[pc_data_out] << 8;
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <PCModbusRTU+0x418>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a31      	ldr	r2, [pc, #196]	; (80009f4 <PCModbusRTU+0x420>)
 8000930:	5cd3      	ldrb	r3, [r2, r3]
 8000932:	b29b      	uxth	r3, r3
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	807b      	strh	r3, [r7, #2]
						pc_data_out++;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <PCModbusRTU+0x418>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <PCModbusRTU+0x418>)
 8000940:	6013      	str	r3, [r2, #0]
						record.write_start_address = (uint16_t) (temp | PC_RxBuff[pc_data_out]);
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <PCModbusRTU+0x418>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a2b      	ldr	r2, [pc, #172]	; (80009f4 <PCModbusRTU+0x420>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	b29a      	uxth	r2, r3
 800094c:	887b      	ldrh	r3, [r7, #2]
 800094e:	4313      	orrs	r3, r2
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <PCModbusRTU+0x41c>)
 8000954:	809a      	strh	r2, [r3, #4]
						pc_data_out++;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <PCModbusRTU+0x418>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	4a23      	ldr	r2, [pc, #140]	; (80009ec <PCModbusRTU+0x418>)
 800095e:	6013      	str	r3, [r2, #0]
						temp = (uint16_t)PC_RxBuff[pc_data_out] << 8;
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <PCModbusRTU+0x418>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <PCModbusRTU+0x420>)
 8000966:	5cd3      	ldrb	r3, [r2, r3]
 8000968:	b29b      	uxth	r3, r3
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	807b      	strh	r3, [r7, #2]
						pc_data_out++;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <PCModbusRTU+0x418>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <PCModbusRTU+0x418>)
 8000976:	6013      	str	r3, [r2, #0]
						record.write_registers = (uint16_t) (temp | PC_RxBuff[pc_data_out]);
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <PCModbusRTU+0x418>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <PCModbusRTU+0x420>)
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	b29a      	uxth	r2, r3
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	4313      	orrs	r3, r2
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <PCModbusRTU+0x41c>)
 800098a:	811a      	strh	r2, [r3, #8]
						pc_data_out++;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <PCModbusRTU+0x418>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a16      	ldr	r2, [pc, #88]	; (80009ec <PCModbusRTU+0x418>)
 8000994:	6013      	str	r3, [r2, #0]
						record.write_byte_count = PC_RxBuff[pc_data_out];
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <PCModbusRTU+0x418>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <PCModbusRTU+0x420>)
 800099c:	5cd2      	ldrb	r2, [r2, r3]
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <PCModbusRTU+0x41c>)
 80009a0:	72da      	strb	r2, [r3, #11]
						pc_data_out++;
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <PCModbusRTU+0x418>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a10      	ldr	r2, [pc, #64]	; (80009ec <PCModbusRTU+0x418>)
 80009aa:	6013      	str	r3, [r2, #0]
						for(i=0; i<record.write_byte_count; i++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	e00f      	b.n	80009d2 <PCModbusRTU+0x3fe>
							record.data[i] = PC_RxBuff[pc_data_out++];
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <PCModbusRTU+0x418>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	490c      	ldr	r1, [pc, #48]	; (80009ec <PCModbusRTU+0x418>)
 80009ba:	600a      	str	r2, [r1, #0]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <PCModbusRTU+0x420>)
 80009be:	5cd1      	ldrb	r1, [r2, r3]
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <PCModbusRTU+0x41c>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	330c      	adds	r3, #12
 80009c8:	460a      	mov	r2, r1
 80009ca:	701a      	strb	r2, [r3, #0]
						for(i=0; i<record.write_byte_count; i++)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3301      	adds	r3, #1
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <PCModbusRTU+0x41c>)
 80009d4:	7adb      	ldrb	r3, [r3, #11]
 80009d6:	461a      	mov	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4293      	cmp	r3, r2
 80009dc:	dbe9      	blt.n	80009b2 <PCModbusRTU+0x3de>
						ProcessPCCommands();
 80009de:	f002 fae7 	bl	8002fb0 <ProcessPCCommands>
						pc_protocol_state = TRANSMIT_STATE;
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <PCModbusRTU+0x424>)
 80009e4:	2203      	movs	r2, #3
 80009e6:	701a      	strb	r2, [r3, #0]
						break;
 80009e8:	e0ab      	b.n	8000b42 <PCModbusRTU+0x56e>
 80009ea:	bf00      	nop
 80009ec:	2400124c 	.word	0x2400124c
 80009f0:	24003334 	.word	0x24003334
 80009f4:	2400125c 	.word	0x2400125c
 80009f8:	24003330 	.word	0x24003330
						pc_data_out++;
 80009fc:	4b93      	ldr	r3, [pc, #588]	; (8000c4c <PCModbusRTU+0x678>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a92      	ldr	r2, [pc, #584]	; (8000c4c <PCModbusRTU+0x678>)
 8000a04:	6013      	str	r3, [r2, #0]
						record.function_code = READ_WRITE_MULTIPLE_REGISTERS;
 8000a06:	4b92      	ldr	r3, [pc, #584]	; (8000c50 <PCModbusRTU+0x67c>)
 8000a08:	2217      	movs	r2, #23
 8000a0a:	701a      	strb	r2, [r3, #0]
						temp = (uint16_t)(PC_RxBuff[pc_data_out] << 8);
 8000a0c:	4b8f      	ldr	r3, [pc, #572]	; (8000c4c <PCModbusRTU+0x678>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a90      	ldr	r2, [pc, #576]	; (8000c54 <PCModbusRTU+0x680>)
 8000a12:	5cd3      	ldrb	r3, [r2, r3]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	021b      	lsls	r3, r3, #8
 8000a18:	807b      	strh	r3, [r7, #2]
						pc_data_out++;
 8000a1a:	4b8c      	ldr	r3, [pc, #560]	; (8000c4c <PCModbusRTU+0x678>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a8a      	ldr	r2, [pc, #552]	; (8000c4c <PCModbusRTU+0x678>)
 8000a22:	6013      	str	r3, [r2, #0]
						record.read_start_address = (uint16_t) (temp | PC_RxBuff[pc_data_out]);
 8000a24:	4b89      	ldr	r3, [pc, #548]	; (8000c4c <PCModbusRTU+0x678>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a8a      	ldr	r2, [pc, #552]	; (8000c54 <PCModbusRTU+0x680>)
 8000a2a:	5cd3      	ldrb	r3, [r2, r3]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	887b      	ldrh	r3, [r7, #2]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b86      	ldr	r3, [pc, #536]	; (8000c50 <PCModbusRTU+0x67c>)
 8000a36:	805a      	strh	r2, [r3, #2]
						pc_data_out++;
 8000a38:	4b84      	ldr	r3, [pc, #528]	; (8000c4c <PCModbusRTU+0x678>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a83      	ldr	r2, [pc, #524]	; (8000c4c <PCModbusRTU+0x678>)
 8000a40:	6013      	str	r3, [r2, #0]
						temp = (uint16_t)(PC_RxBuff[pc_data_out] << 8);
 8000a42:	4b82      	ldr	r3, [pc, #520]	; (8000c4c <PCModbusRTU+0x678>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a83      	ldr	r2, [pc, #524]	; (8000c54 <PCModbusRTU+0x680>)
 8000a48:	5cd3      	ldrb	r3, [r2, r3]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	807b      	strh	r3, [r7, #2]
						pc_data_out++;
 8000a50:	4b7e      	ldr	r3, [pc, #504]	; (8000c4c <PCModbusRTU+0x678>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	4a7d      	ldr	r2, [pc, #500]	; (8000c4c <PCModbusRTU+0x678>)
 8000a58:	6013      	str	r3, [r2, #0]
						record.read_registers = (uint16_t) (temp | PC_RxBuff[pc_data_out]);
 8000a5a:	4b7c      	ldr	r3, [pc, #496]	; (8000c4c <PCModbusRTU+0x678>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a7d      	ldr	r2, [pc, #500]	; (8000c54 <PCModbusRTU+0x680>)
 8000a60:	5cd3      	ldrb	r3, [r2, r3]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b79      	ldr	r3, [pc, #484]	; (8000c50 <PCModbusRTU+0x67c>)
 8000a6c:	80da      	strh	r2, [r3, #6]
						pc_data_out++;
 8000a6e:	4b77      	ldr	r3, [pc, #476]	; (8000c4c <PCModbusRTU+0x678>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4a75      	ldr	r2, [pc, #468]	; (8000c4c <PCModbusRTU+0x678>)
 8000a76:	6013      	str	r3, [r2, #0]
						record.read_byte_count = (record.read_registers * 2);
 8000a78:	4b75      	ldr	r3, [pc, #468]	; (8000c50 <PCModbusRTU+0x67c>)
 8000a7a:	88db      	ldrh	r3, [r3, #6]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <PCModbusRTU+0x67c>)
 8000a84:	729a      	strb	r2, [r3, #10]
						temp = (uint16_t)PC_RxBuff[pc_data_out] << 8;
 8000a86:	4b71      	ldr	r3, [pc, #452]	; (8000c4c <PCModbusRTU+0x678>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a72      	ldr	r2, [pc, #456]	; (8000c54 <PCModbusRTU+0x680>)
 8000a8c:	5cd3      	ldrb	r3, [r2, r3]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	807b      	strh	r3, [r7, #2]
						pc_data_out++;
 8000a94:	4b6d      	ldr	r3, [pc, #436]	; (8000c4c <PCModbusRTU+0x678>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	4a6c      	ldr	r2, [pc, #432]	; (8000c4c <PCModbusRTU+0x678>)
 8000a9c:	6013      	str	r3, [r2, #0]
						record.write_start_address = (uint16_t) (temp | PC_RxBuff[pc_data_out]);
 8000a9e:	4b6b      	ldr	r3, [pc, #428]	; (8000c4c <PCModbusRTU+0x678>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a6c      	ldr	r2, [pc, #432]	; (8000c54 <PCModbusRTU+0x680>)
 8000aa4:	5cd3      	ldrb	r3, [r2, r3]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	4b68      	ldr	r3, [pc, #416]	; (8000c50 <PCModbusRTU+0x67c>)
 8000ab0:	809a      	strh	r2, [r3, #4]
						pc_data_out++;
 8000ab2:	4b66      	ldr	r3, [pc, #408]	; (8000c4c <PCModbusRTU+0x678>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a64      	ldr	r2, [pc, #400]	; (8000c4c <PCModbusRTU+0x678>)
 8000aba:	6013      	str	r3, [r2, #0]
						temp = (uint16_t)PC_RxBuff[pc_data_out] << 8;
 8000abc:	4b63      	ldr	r3, [pc, #396]	; (8000c4c <PCModbusRTU+0x678>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a64      	ldr	r2, [pc, #400]	; (8000c54 <PCModbusRTU+0x680>)
 8000ac2:	5cd3      	ldrb	r3, [r2, r3]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	807b      	strh	r3, [r7, #2]
						pc_data_out++;
 8000aca:	4b60      	ldr	r3, [pc, #384]	; (8000c4c <PCModbusRTU+0x678>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a5e      	ldr	r2, [pc, #376]	; (8000c4c <PCModbusRTU+0x678>)
 8000ad2:	6013      	str	r3, [r2, #0]
						record.write_registers = (uint16_t) (temp | PC_RxBuff[pc_data_out]);
 8000ad4:	4b5d      	ldr	r3, [pc, #372]	; (8000c4c <PCModbusRTU+0x678>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a5e      	ldr	r2, [pc, #376]	; (8000c54 <PCModbusRTU+0x680>)
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b5a      	ldr	r3, [pc, #360]	; (8000c50 <PCModbusRTU+0x67c>)
 8000ae6:	811a      	strh	r2, [r3, #8]
						pc_data_out++;
 8000ae8:	4b58      	ldr	r3, [pc, #352]	; (8000c4c <PCModbusRTU+0x678>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a57      	ldr	r2, [pc, #348]	; (8000c4c <PCModbusRTU+0x678>)
 8000af0:	6013      	str	r3, [r2, #0]
						record.write_byte_count = PC_RxBuff[pc_data_out];
 8000af2:	4b56      	ldr	r3, [pc, #344]	; (8000c4c <PCModbusRTU+0x678>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a57      	ldr	r2, [pc, #348]	; (8000c54 <PCModbusRTU+0x680>)
 8000af8:	5cd2      	ldrb	r2, [r2, r3]
 8000afa:	4b55      	ldr	r3, [pc, #340]	; (8000c50 <PCModbusRTU+0x67c>)
 8000afc:	72da      	strb	r2, [r3, #11]
						pc_data_out++;
 8000afe:	4b53      	ldr	r3, [pc, #332]	; (8000c4c <PCModbusRTU+0x678>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a51      	ldr	r2, [pc, #324]	; (8000c4c <PCModbusRTU+0x678>)
 8000b06:	6013      	str	r3, [r2, #0]
						for(i=0; i<record.write_byte_count; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	e00f      	b.n	8000b2e <PCModbusRTU+0x55a>
							record.data[i] = PC_RxBuff[pc_data_out++];
 8000b0e:	4b4f      	ldr	r3, [pc, #316]	; (8000c4c <PCModbusRTU+0x678>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	494d      	ldr	r1, [pc, #308]	; (8000c4c <PCModbusRTU+0x678>)
 8000b16:	600a      	str	r2, [r1, #0]
 8000b18:	4a4e      	ldr	r2, [pc, #312]	; (8000c54 <PCModbusRTU+0x680>)
 8000b1a:	5cd1      	ldrb	r1, [r2, r3]
 8000b1c:	4a4c      	ldr	r2, [pc, #304]	; (8000c50 <PCModbusRTU+0x67c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	330c      	adds	r3, #12
 8000b24:	460a      	mov	r2, r1
 8000b26:	701a      	strb	r2, [r3, #0]
						for(i=0; i<record.write_byte_count; i++)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <PCModbusRTU+0x67c>)
 8000b30:	7adb      	ldrb	r3, [r3, #11]
 8000b32:	461a      	mov	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4293      	cmp	r3, r2
 8000b38:	dbe9      	blt.n	8000b0e <PCModbusRTU+0x53a>
						pc_protocol_state = TRANSMIT_STATE;
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <PCModbusRTU+0x684>)
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	701a      	strb	r2, [r3, #0]
						break;
 8000b40:	bf00      	nop
				break;
 8000b42:	e091      	b.n	8000c68 <PCModbusRTU+0x694>


			case TRANSMIT_STATE:

				//if(uut_ack) {
					switch(record.function_code) {
 8000b44:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <PCModbusRTU+0x67c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b17      	cmp	r3, #23
 8000b4a:	d062      	beq.n	8000c12 <PCModbusRTU+0x63e>
 8000b4c:	2b17      	cmp	r3, #23
 8000b4e:	f300 808d 	bgt.w	8000c6c <PCModbusRTU+0x698>
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d002      	beq.n	8000b5c <PCModbusRTU+0x588>
 8000b56:	2b10      	cmp	r3, #16
 8000b58:	d018      	beq.n	8000b8c <PCModbusRTU+0x5b8>

							break;

					}
				//}
				break;
 8000b5a:	e087      	b.n	8000c6c <PCModbusRTU+0x698>
							PC_TxBuff[0] = SLAVE_ADDRESS;
 8000b5c:	4b3f      	ldr	r3, [pc, #252]	; (8000c5c <PCModbusRTU+0x688>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
							PC_TxBuff[1] = record.function_code;
 8000b62:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <PCModbusRTU+0x67c>)
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <PCModbusRTU+0x688>)
 8000b68:	705a      	strb	r2, [r3, #1]
							PC_TxBuff[2] = record.read_byte_count;
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <PCModbusRTU+0x67c>)
 8000b6c:	7a9a      	ldrb	r2, [r3, #10]
 8000b6e:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <PCModbusRTU+0x688>)
 8000b70:	709a      	strb	r2, [r3, #2]
							FillTransmitBuffer(record.read_registers, 3);
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <PCModbusRTU+0x67c>)
 8000b74:	88db      	ldrh	r3, [r3, #6]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2103      	movs	r1, #3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fb1e 	bl	80031bc <FillTransmitBuffer>
							SerialTransmit();
 8000b80:	f000 ff14 	bl	80019ac <SerialTransmit>
							pc_protocol_state = SYNC_STATE;
 8000b84:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <PCModbusRTU+0x684>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
							break;
 8000b8a:	e05a      	b.n	8000c42 <PCModbusRTU+0x66e>
							PC_TxBuff[0] = SLAVE_ADDRESS;
 8000b8c:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <PCModbusRTU+0x688>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
							PC_TxBuff[1] = record.function_code;
 8000b92:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <PCModbusRTU+0x67c>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <PCModbusRTU+0x688>)
 8000b98:	705a      	strb	r2, [r3, #1]
							PC_TxBuff[2] = (uint8_t)((record.write_start_address & 0xFF00) >> 8);
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <PCModbusRTU+0x67c>)
 8000b9c:	889b      	ldrh	r3, [r3, #4]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <PCModbusRTU+0x688>)
 8000ba6:	709a      	strb	r2, [r3, #2]
							PC_TxBuff[3] = (uint8_t)(record.write_start_address & 0xFF);
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <PCModbusRTU+0x67c>)
 8000baa:	889b      	ldrh	r3, [r3, #4]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <PCModbusRTU+0x688>)
 8000bb0:	70da      	strb	r2, [r3, #3]
							PC_TxBuff[4] = (uint8_t)((record.write_registers & 0xFF00) >> 8);
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <PCModbusRTU+0x67c>)
 8000bb4:	891b      	ldrh	r3, [r3, #8]
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <PCModbusRTU+0x688>)
 8000bbe:	711a      	strb	r2, [r3, #4]
							PC_TxBuff[5] = (uint8_t)(record.write_registers & 0xFF);
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <PCModbusRTU+0x67c>)
 8000bc2:	891b      	ldrh	r3, [r3, #8]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <PCModbusRTU+0x688>)
 8000bc8:	715a      	strb	r2, [r3, #5]
							crc_count = 6;
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <PCModbusRTU+0x68c>)
 8000bcc:	2206      	movs	r2, #6
 8000bce:	801a      	strh	r2, [r3, #0]
							cal_crc = CRC16(PC_TxBuff,crc_count);
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <PCModbusRTU+0x68c>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4821      	ldr	r0, [pc, #132]	; (8000c5c <PCModbusRTU+0x688>)
 8000bd8:	f002 fb3a 	bl	8003250 <CRC16>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <PCModbusRTU+0x690>)
 8000be2:	801a      	strh	r2, [r3, #0]
							PC_TxBuff[6] = (uint8_t) (cal_crc & 0x00FF);
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <PCModbusRTU+0x690>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <PCModbusRTU+0x688>)
 8000bec:	719a      	strb	r2, [r3, #6]
							PC_TxBuff[7] = (uint8_t) ((cal_crc & 0xFF00) >> 8);
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <PCModbusRTU+0x690>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <PCModbusRTU+0x688>)
 8000bfa:	71da      	strb	r2, [r3, #7]
							pc_data_out = crc_count + 2;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <PCModbusRTU+0x68c>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	3302      	adds	r3, #2
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <PCModbusRTU+0x678>)
 8000c04:	6013      	str	r3, [r2, #0]
							SerialTransmit();
 8000c06:	f000 fed1 	bl	80019ac <SerialTransmit>
							pc_protocol_state = SYNC_STATE;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <PCModbusRTU+0x684>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
							break;
 8000c10:	e017      	b.n	8000c42 <PCModbusRTU+0x66e>
							PC_TxBuff[0] = SLAVE_ADDRESS;
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <PCModbusRTU+0x688>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
							PC_TxBuff[1] = record.function_code;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <PCModbusRTU+0x67c>)
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <PCModbusRTU+0x688>)
 8000c1e:	705a      	strb	r2, [r3, #1]
							PC_TxBuff[2] = record.read_byte_count;
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <PCModbusRTU+0x67c>)
 8000c22:	7a9a      	ldrb	r2, [r3, #10]
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <PCModbusRTU+0x688>)
 8000c26:	709a      	strb	r2, [r3, #2]
							FillTransmitBuffer(record.read_registers, 3);
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <PCModbusRTU+0x67c>)
 8000c2a:	88db      	ldrh	r3, [r3, #6]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2103      	movs	r1, #3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 fac3 	bl	80031bc <FillTransmitBuffer>
							SerialTransmit();
 8000c36:	f000 feb9 	bl	80019ac <SerialTransmit>
							pc_protocol_state = SYNC_STATE;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <PCModbusRTU+0x684>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
							break;
 8000c40:	bf00      	nop
				break;
 8000c42:	e013      	b.n	8000c6c <PCModbusRTU+0x698>


			default:
				break;
 8000c44:	bf00      	nop
 8000c46:	e012      	b.n	8000c6e <PCModbusRTU+0x69a>
			break;
 8000c48:	bf00      	nop
 8000c4a:	e010      	b.n	8000c6e <PCModbusRTU+0x69a>
 8000c4c:	2400124c 	.word	0x2400124c
 8000c50:	24003334 	.word	0x24003334
 8000c54:	2400125c 	.word	0x2400125c
 8000c58:	24003330 	.word	0x24003330
 8000c5c:	24001284 	.word	0x24001284
 8000c60:	24003394 	.word	0x24003394
 8000c64:	24003390 	.word	0x24003390
				break;
 8000c68:	bf00      	nop
 8000c6a:	e000      	b.n	8000c6e <PCModbusRTU+0x69a>
				break;
 8000c6c:	bf00      	nop
	}

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop

08000c78 <UUTModbusRTU>:


void UUTModbusRTU(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0


	int i,j;
	unsigned char index = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
	uint16_t cal_crc = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	81bb      	strh	r3, [r7, #12]
	uint16_t crc_count = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	80fb      	strh	r3, [r7, #6]
	uint16_t temp = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	817b      	strh	r3, [r7, #10]
	uint16_t temp_data = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	80bb      	strh	r3, [r7, #4]
	float ftemp = 0;
 8000c92:	f04f 0300 	mov.w	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
	unsigned char num_bytes = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	727b      	strb	r3, [r7, #9]

	switch(uut_protocol_state) {
 8000c9c:	4b95      	ldr	r3, [pc, #596]	; (8000ef4 <UUTModbusRTU+0x27c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	f200 8678 	bhi.w	8001996 <UUTModbusRTU+0xd1e>
 8000ca6:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <UUTModbusRTU+0x34>)
 8000ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cac:	08000cbd 	.word	0x08000cbd
 8000cb0:	08000cfd 	.word	0x08000cfd
 8000cb4:	08000eb5 	.word	0x08000eb5
 8000cb8:	0800101d 	.word	0x0800101d

		case UUT_SYNC_STATE:

			rx_data_in = 0;
 8000cbc:	4b8e      	ldr	r3, [pc, #568]	; (8000ef8 <UUTModbusRTU+0x280>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
			rx_data_out = 0;
 8000cc2:	4b8e      	ldr	r3, [pc, #568]	; (8000efc <UUTModbusRTU+0x284>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
			UART_Rx_byte_count = 0;
 8000cc8:	4b8d      	ldr	r3, [pc, #564]	; (8000f00 <UUTModbusRTU+0x288>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
			memset(UART_RxBuff, 0, UART_MSG_SIZE);
 8000cce:	2228      	movs	r2, #40	; 0x28
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	488c      	ldr	r0, [pc, #560]	; (8000f04 <UUTModbusRTU+0x28c>)
 8000cd4:	f00e fd80 	bl	800f7d8 <memset>
			memset(UART_TxBuff, 0, UART_MSG_SIZE);
 8000cd8:	2228      	movs	r2, #40	; 0x28
 8000cda:	2100      	movs	r1, #0
 8000cdc:	488a      	ldr	r0, [pc, #552]	; (8000f08 <UUTModbusRTU+0x290>)
 8000cde:	f00e fd7b 	bl	800f7d8 <memset>
			memset(record.uut_data, 0, UART_MSG_SIZE);
 8000ce2:	2228      	movs	r2, #40	; 0x28
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4889      	ldr	r0, [pc, #548]	; (8000f0c <UUTModbusRTU+0x294>)
 8000ce8:	f00e fd76 	bl	800f7d8 <memset>
			uut_protocol_state = UUT_TRANSMIT_STATE;
 8000cec:	4b81      	ldr	r3, [pc, #516]	; (8000ef4 <UUTModbusRTU+0x27c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
			uut_timer = 0;
 8000cf2:	4b87      	ldr	r3, [pc, #540]	; (8000f10 <UUTModbusRTU+0x298>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]

			break;
 8000cf8:	f000 be52 	b.w	80019a0 <UUTModbusRTU+0xd28>


		case UUT_TRANSMIT_STATE:


			if(send_uut_command) {
 8000cfc:	4b85      	ldr	r3, [pc, #532]	; (8000f14 <UUTModbusRTU+0x29c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 864a 	beq.w	800199a <UUTModbusRTU+0xd22>

				send_uut_command = 0;
 8000d06:	4b83      	ldr	r3, [pc, #524]	; (8000f14 <UUTModbusRTU+0x29c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
				switch(record.function_code) {
 8000d0c:	4b82      	ldr	r3, [pc, #520]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d002      	beq.n	8000d1a <UUTModbusRTU+0xa2>
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	d048      	beq.n	8000daa <UUTModbusRTU+0x132>
						//	uut_eeprom_status = EEPROM_TEST_IN_PROGRESS;
						break;


					default:
						break;
 8000d18:	e0ca      	b.n	8000eb0 <UUTModbusRTU+0x238>
						UART_TxBuff[0] = SLAVE_ADDRESS;
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <UUTModbusRTU+0x290>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
						UART_TxBuff[1] = record.function_code;
 8000d20:	4b7d      	ldr	r3, [pc, #500]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <UUTModbusRTU+0x290>)
 8000d26:	705a      	strb	r2, [r3, #1]
						UART_TxBuff[2] = (uint8_t)((record.read_start_address & 0xFF00) >> 8);
 8000d28:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000d2a:	885b      	ldrh	r3, [r3, #2]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b75      	ldr	r3, [pc, #468]	; (8000f08 <UUTModbusRTU+0x290>)
 8000d34:	709a      	strb	r2, [r3, #2]
						UART_TxBuff[3] = (uint8_t)(record.read_start_address & 0xFF);
 8000d36:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000d38:	885b      	ldrh	r3, [r3, #2]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b72      	ldr	r3, [pc, #456]	; (8000f08 <UUTModbusRTU+0x290>)
 8000d3e:	70da      	strb	r2, [r3, #3]
						UART_TxBuff[4] = (uint8_t)((record.read_registers & 0xFF00) >> 8);
 8000d40:	4b75      	ldr	r3, [pc, #468]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000d42:	88db      	ldrh	r3, [r3, #6]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b6f      	ldr	r3, [pc, #444]	; (8000f08 <UUTModbusRTU+0x290>)
 8000d4c:	711a      	strb	r2, [r3, #4]
						UART_TxBuff[5] = (uint8_t)(record.read_registers & 0xFF);
 8000d4e:	4b72      	ldr	r3, [pc, #456]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000d50:	88db      	ldrh	r3, [r3, #6]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b6c      	ldr	r3, [pc, #432]	; (8000f08 <UUTModbusRTU+0x290>)
 8000d56:	715a      	strb	r2, [r3, #5]
						crc_count = 6;
 8000d58:	2306      	movs	r3, #6
 8000d5a:	80fb      	strh	r3, [r7, #6]
						cal_crc = CRC16(UART_TxBuff,crc_count);
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4869      	ldr	r0, [pc, #420]	; (8000f08 <UUTModbusRTU+0x290>)
 8000d62:	f002 fa75 	bl	8003250 <CRC16>
 8000d66:	4603      	mov	r3, r0
 8000d68:	81bb      	strh	r3, [r7, #12]
						index = crc_count;
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	73fb      	strb	r3, [r7, #15]
						UART_TxBuff[index++] = (uint8_t) (cal_crc & 0x00FF);
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	73fa      	strb	r2, [r7, #15]
 8000d74:	461a      	mov	r2, r3
 8000d76:	89bb      	ldrh	r3, [r7, #12]
 8000d78:	b2d9      	uxtb	r1, r3
 8000d7a:	4b63      	ldr	r3, [pc, #396]	; (8000f08 <UUTModbusRTU+0x290>)
 8000d7c:	5499      	strb	r1, [r3, r2]
						UART_TxBuff[index++] = (uint8_t) ((cal_crc & 0xFF00) >> 8);
 8000d7e:	89bb      	ldrh	r3, [r7, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	b299      	uxth	r1, r3
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	73fa      	strb	r2, [r7, #15]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	b2c9      	uxtb	r1, r1
 8000d8e:	4b5e      	ldr	r3, [pc, #376]	; (8000f08 <UUTModbusRTU+0x290>)
 8000d90:	5499      	strb	r1, [r3, r2]
						rx_data_out = index;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4a59      	ldr	r2, [pc, #356]	; (8000efc <UUTModbusRTU+0x284>)
 8000d96:	6013      	str	r3, [r2, #0]
						uut_ack = 0;
 8000d98:	4b60      	ldr	r3, [pc, #384]	; (8000f1c <UUTModbusRTU+0x2a4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
						UUTSerialTransmit();
 8000d9e:	f000 fe1b 	bl	80019d8 <UUTSerialTransmit>
						uut_protocol_state = UUT_RECEIVE_STATE;
 8000da2:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <UUTModbusRTU+0x27c>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	701a      	strb	r2, [r3, #0]
						break;
 8000da8:	e082      	b.n	8000eb0 <UUTModbusRTU+0x238>
						UART_TxBuff[0] = SLAVE_ADDRESS;
 8000daa:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <UUTModbusRTU+0x290>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
						UART_TxBuff[1] = record.function_code;
 8000db0:	4b59      	ldr	r3, [pc, #356]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <UUTModbusRTU+0x290>)
 8000db6:	705a      	strb	r2, [r3, #1]
						UART_TxBuff[2] = (uint8_t)((record.write_start_address & 0xFF00) >> 8);
 8000db8:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000dba:	889b      	ldrh	r3, [r3, #4]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b51      	ldr	r3, [pc, #324]	; (8000f08 <UUTModbusRTU+0x290>)
 8000dc4:	709a      	strb	r2, [r3, #2]
						UART_TxBuff[3] = (uint8_t)(record.write_start_address & 0xFF);
 8000dc6:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000dc8:	889b      	ldrh	r3, [r3, #4]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	; (8000f08 <UUTModbusRTU+0x290>)
 8000dce:	70da      	strb	r2, [r3, #3]
						UART_TxBuff[4] = (uint8_t)((record.write_registers & 0xFF00) >> 8);
 8000dd0:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000dd2:	891b      	ldrh	r3, [r3, #8]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <UUTModbusRTU+0x290>)
 8000ddc:	711a      	strb	r2, [r3, #4]
						UART_TxBuff[5] = (uint8_t)(record.write_registers & 0xFF);
 8000dde:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000de0:	891b      	ldrh	r3, [r3, #8]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <UUTModbusRTU+0x290>)
 8000de6:	715a      	strb	r2, [r3, #5]
						UART_TxBuff[6] = (uint8_t)(record.write_byte_count);
 8000de8:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000dea:	7ada      	ldrb	r2, [r3, #11]
 8000dec:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <UUTModbusRTU+0x290>)
 8000dee:	719a      	strb	r2, [r3, #6]
						index = 7;
 8000df0:	2307      	movs	r3, #7
 8000df2:	73fb      	strb	r3, [r7, #15]
						for(i=0; i<record.write_byte_count; i++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e00d      	b.n	8000e16 <UUTModbusRTU+0x19e>
							UART_TxBuff[index++] = record.data[i];
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	73fa      	strb	r2, [r7, #15]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	4413      	add	r3, r2
 8000e08:	330c      	adds	r3, #12
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	4b3e      	ldr	r3, [pc, #248]	; (8000f08 <UUTModbusRTU+0x290>)
 8000e0e:	545a      	strb	r2, [r3, r1]
						for(i=0; i<record.write_byte_count; i++) {
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000e18:	7adb      	ldrb	r3, [r3, #11]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	dbeb      	blt.n	8000dfa <UUTModbusRTU+0x182>
						crc_count = index;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	80fb      	strh	r3, [r7, #6]
						cal_crc = CRC16(UART_TxBuff,crc_count);
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4837      	ldr	r0, [pc, #220]	; (8000f08 <UUTModbusRTU+0x290>)
 8000e2c:	f002 fa10 	bl	8003250 <CRC16>
 8000e30:	4603      	mov	r3, r0
 8000e32:	81bb      	strh	r3, [r7, #12]
						UART_TxBuff[index++] = (uint8_t) (cal_crc & 0x00FF);
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	73fa      	strb	r2, [r7, #15]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	89bb      	ldrh	r3, [r7, #12]
 8000e3e:	b2d9      	uxtb	r1, r3
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <UUTModbusRTU+0x290>)
 8000e42:	5499      	strb	r1, [r3, r2]
						UART_TxBuff[index++] = (uint8_t) ((cal_crc & 0xFF00) >> 8);
 8000e44:	89bb      	ldrh	r3, [r7, #12]
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	b299      	uxth	r1, r3
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	73fa      	strb	r2, [r7, #15]
 8000e50:	461a      	mov	r2, r3
 8000e52:	b2c9      	uxtb	r1, r1
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <UUTModbusRTU+0x290>)
 8000e56:	5499      	strb	r1, [r3, r2]
						rx_data_out = index;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <UUTModbusRTU+0x284>)
 8000e5c:	6013      	str	r3, [r2, #0]
						uut_ack = 0;
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <UUTModbusRTU+0x2a4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
						UUTSerialTransmit();
 8000e64:	f000 fdb8 	bl	80019d8 <UUTSerialTransmit>
						uut_protocol_state = UUT_RECEIVE_STATE;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <UUTModbusRTU+0x27c>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	701a      	strb	r2, [r3, #0]
						if((record.data[1] == AC_OUTPUTS) && (record.write_start_address == SPECIAL_ADDRESS)) {
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000e70:	7b5b      	ldrb	r3, [r3, #13]
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d11b      	bne.n	8000eae <UUTModbusRTU+0x236>
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <UUTModbusRTU+0x2a0>)
 8000e78:	889b      	ldrh	r3, [r3, #4]
 8000e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d115      	bne.n	8000eae <UUTModbusRTU+0x236>
							for(i=0; i<5; i++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	e00c      	b.n	8000ea2 <UUTModbusRTU+0x22a>
								pulse_counter[i] = 0x00;
 8000e88:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <UUTModbusRTU+0x2a8>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								acinputs[i] = 0x00;
 8000e92:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <UUTModbusRTU+0x2ac>)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	4413      	add	r3, r2
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
							for(i=0; i<5; i++) {
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	ddef      	ble.n	8000e88 <UUTModbusRTU+0x210>
							AC_Input = 0x00;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <UUTModbusRTU+0x2b0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	801a      	strh	r2, [r3, #0]
						break;
 8000eae:	bf00      	nop
				}
			}
			break;
 8000eb0:	f000 bd73 	b.w	800199a <UUTModbusRTU+0xd22>

		case UUT_RECEIVE_STATE:

			if(UART_Rx_byte_count) {
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <UUTModbusRTU+0x288>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00a      	beq.n	8000ed2 <UUTModbusRTU+0x25a>
				uut_timer = 1;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <UUTModbusRTU+0x298>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
				if(uut_timer_tick >= 500) {
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <UUTModbusRTU+0x2b4>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eca:	d302      	bcc.n	8000ed2 <UUTModbusRTU+0x25a>

					uut_protocol_state = UUT_SYNC_STATE;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <UUTModbusRTU+0x27c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
				}
			}

			if((UART_RxBuff[0] == SLAVE_ADDRESS) && ((UART_RxBuff[1] == READ_HOLDING_REGISTERS) || (UART_RxBuff[1] == WRITE_MULTIPLE_REGISTERS)))
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <UUTModbusRTU+0x28c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d12c      	bne.n	8000f34 <UUTModbusRTU+0x2bc>
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <UUTModbusRTU+0x28c>)
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d003      	beq.n	8000eea <UUTModbusRTU+0x272>
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <UUTModbusRTU+0x28c>)
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	2b10      	cmp	r3, #16
 8000ee8:	d124      	bne.n	8000f34 <UUTModbusRTU+0x2bc>
					junk_byte = 0;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <UUTModbusRTU+0x2b8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e02f      	b.n	8000f52 <UUTModbusRTU+0x2da>
 8000ef2:	bf00      	nop
 8000ef4:	24003331 	.word	0x24003331
 8000ef8:	24001250 	.word	0x24001250
 8000efc:	24001254 	.word	0x24001254
 8000f00:	2400125b 	.word	0x2400125b
 8000f04:	240012d4 	.word	0x240012d4
 8000f08:	240012ac 	.word	0x240012ac
 8000f0c:	24003368 	.word	0x24003368
 8000f10:	24001307 	.word	0x24001307
 8000f14:	24001308 	.word	0x24001308
 8000f18:	24003334 	.word	0x24003334
 8000f1c:	24000a6e 	.word	0x24000a6e
 8000f20:	24001344 	.word	0x24001344
 8000f24:	2400133c 	.word	0x2400133c
 8000f28:	24001342 	.word	0x24001342
 8000f2c:	24001304 	.word	0x24001304
 8000f30:	24000a6f 	.word	0x24000a6f
			else if((UART_RxBuff[1] == SLAVE_ADDRESS) && ((UART_RxBuff[2] == READ_HOLDING_REGISTERS) || (UART_RxBuff[2] == WRITE_MULTIPLE_REGISTERS)))
 8000f34:	4b86      	ldr	r3, [pc, #536]	; (8001150 <UUTModbusRTU+0x4d8>)
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d10a      	bne.n	8000f52 <UUTModbusRTU+0x2da>
 8000f3c:	4b84      	ldr	r3, [pc, #528]	; (8001150 <UUTModbusRTU+0x4d8>)
 8000f3e:	789b      	ldrb	r3, [r3, #2]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d003      	beq.n	8000f4c <UUTModbusRTU+0x2d4>
 8000f44:	4b82      	ldr	r3, [pc, #520]	; (8001150 <UUTModbusRTU+0x4d8>)
 8000f46:	789b      	ldrb	r3, [r3, #2]
 8000f48:	2b10      	cmp	r3, #16
 8000f4a:	d102      	bne.n	8000f52 <UUTModbusRTU+0x2da>
					junk_byte = 1;
 8000f4c:	4b81      	ldr	r3, [pc, #516]	; (8001154 <UUTModbusRTU+0x4dc>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]


			if(UART_RxBuff[1 + junk_byte] == READ_HOLDING_REGISTERS)
 8000f52:	4b80      	ldr	r3, [pc, #512]	; (8001154 <UUTModbusRTU+0x4dc>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a7d      	ldr	r2, [pc, #500]	; (8001150 <UUTModbusRTU+0x4d8>)
 8000f5a:	5cd3      	ldrb	r3, [r2, r3]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d10b      	bne.n	8000f78 <UUTModbusRTU+0x300>
				num_bytes = (UART_RxBuff[2 + junk_byte] + 5 + junk_byte);
 8000f60:	4b7c      	ldr	r3, [pc, #496]	; (8001154 <UUTModbusRTU+0x4dc>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	3302      	adds	r3, #2
 8000f66:	4a7a      	ldr	r2, [pc, #488]	; (8001150 <UUTModbusRTU+0x4d8>)
 8000f68:	5cd2      	ldrb	r2, [r2, r3]
 8000f6a:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <UUTModbusRTU+0x4dc>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3305      	adds	r3, #5
 8000f74:	727b      	strb	r3, [r7, #9]
 8000f76:	e003      	b.n	8000f80 <UUTModbusRTU+0x308>
			else
				num_bytes = (8 + junk_byte);
 8000f78:	4b76      	ldr	r3, [pc, #472]	; (8001154 <UUTModbusRTU+0x4dc>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	727b      	strb	r3, [r7, #9]

			if(num_bytes) {
 8000f80:	7a7b      	ldrb	r3, [r7, #9]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 850b 	beq.w	800199e <UUTModbusRTU+0xd26>

				if(UART_Rx_byte_count >= num_bytes) {
 8000f88:	4b73      	ldr	r3, [pc, #460]	; (8001158 <UUTModbusRTU+0x4e0>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	7a7a      	ldrb	r2, [r7, #9]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	f200 8505 	bhi.w	800199e <UUTModbusRTU+0xd26>

					uut_timer = 0;
 8000f94:	4b71      	ldr	r3, [pc, #452]	; (800115c <UUTModbusRTU+0x4e4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]

					if(junk_byte)
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <UUTModbusRTU+0x4dc>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00f      	beq.n	8000fc2 <UUTModbusRTU+0x34a>
						cal_crc = CRC16(&UART_RxBuff[1],(num_bytes - (2 + junk_byte)));
 8000fa2:	7a7b      	ldrb	r3, [r7, #9]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <UUTModbusRTU+0x4dc>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	3b02      	subs	r3, #2
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	486a      	ldr	r0, [pc, #424]	; (8001160 <UUTModbusRTU+0x4e8>)
 8000fb8:	f002 f94a 	bl	8003250 <CRC16>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	81bb      	strh	r3, [r7, #12]
 8000fc0:	e00e      	b.n	8000fe0 <UUTModbusRTU+0x368>
					else
						cal_crc = CRC16(UART_RxBuff,(num_bytes - (2 + junk_byte)));
 8000fc2:	7a7b      	ldrb	r3, [r7, #9]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b63      	ldr	r3, [pc, #396]	; (8001154 <UUTModbusRTU+0x4dc>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	3b02      	subs	r3, #2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	485e      	ldr	r0, [pc, #376]	; (8001150 <UUTModbusRTU+0x4d8>)
 8000fd8:	f002 f93a 	bl	8003250 <CRC16>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	81bb      	strh	r3, [r7, #12]

					temp = UART_RxBuff[num_bytes - 1];
 8000fe0:	7a7b      	ldrb	r3, [r7, #9]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	4a5a      	ldr	r2, [pc, #360]	; (8001150 <UUTModbusRTU+0x4d8>)
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	817b      	strh	r3, [r7, #10]
					temp = ((temp << 8) | UART_RxBuff[num_bytes - 2]);
 8000fea:	897b      	ldrh	r3, [r7, #10]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	7a7b      	ldrb	r3, [r7, #9]
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	4956      	ldr	r1, [pc, #344]	; (8001150 <UUTModbusRTU+0x4d8>)
 8000ff6:	5ccb      	ldrb	r3, [r1, r3]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	817b      	strh	r3, [r7, #10]

					if(cal_crc == temp)
 8001000:	89ba      	ldrh	r2, [r7, #12]
 8001002:	897b      	ldrh	r3, [r7, #10]
 8001004:	429a      	cmp	r2, r3
 8001006:	d104      	bne.n	8001012 <UUTModbusRTU+0x39a>
						uut_protocol_state = UUT_PROCESS_STATE;
 8001008:	4b56      	ldr	r3, [pc, #344]	; (8001164 <UUTModbusRTU+0x4ec>)
 800100a:	2203      	movs	r2, #3
 800100c:	701a      	strb	r2, [r3, #0]
					else
						uut_protocol_state = UUT_SYNC_STATE;
				}
			}

			break;
 800100e:	f000 bcc6 	b.w	800199e <UUTModbusRTU+0xd26>
						uut_protocol_state = UUT_SYNC_STATE;
 8001012:	4b54      	ldr	r3, [pc, #336]	; (8001164 <UUTModbusRTU+0x4ec>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
			break;
 8001018:	f000 bcc1 	b.w	800199e <UUTModbusRTU+0xd26>


		case UUT_PROCESS_STATE:

			switch(UART_RxBuff[1 + junk_byte]) {
 800101c:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <UUTModbusRTU+0x4dc>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <UUTModbusRTU+0x4d8>)
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	2b03      	cmp	r3, #3
 8001028:	d004      	beq.n	8001034 <UUTModbusRTU+0x3bc>
 800102a:	2b10      	cmp	r3, #16
 800102c:	f000 845d 	beq.w	80018ea <UUTModbusRTU+0xc72>
 8001030:	f000 bcac 	b.w	800198c <UUTModbusRTU+0xd14>

				case READ_HOLDING_REGISTERS:

					for(i=0,j=(3+junk_byte); i<UART_RxBuff[2 + junk_byte]; i++,j++)	{
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <UUTModbusRTU+0x4dc>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3303      	adds	r3, #3
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	e00f      	b.n	8001062 <UUTModbusRTU+0x3ea>
						record.uut_data[i] = UART_RxBuff[j];
 8001042:	4a43      	ldr	r2, [pc, #268]	; (8001150 <UUTModbusRTU+0x4d8>)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4413      	add	r3, r2
 8001048:	7819      	ldrb	r1, [r3, #0]
 800104a:	4a47      	ldr	r2, [pc, #284]	; (8001168 <UUTModbusRTU+0x4f0>)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	4413      	add	r3, r2
 8001050:	3334      	adds	r3, #52	; 0x34
 8001052:	460a      	mov	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
					for(i=0,j=(3+junk_byte); i<UART_RxBuff[2 + junk_byte]; i++,j++)	{
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	3301      	adds	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <UUTModbusRTU+0x4dc>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	3302      	adds	r3, #2
 8001068:	4a39      	ldr	r2, [pc, #228]	; (8001150 <UUTModbusRTU+0x4d8>)
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	461a      	mov	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	4293      	cmp	r3, r2
 8001072:	dbe6      	blt.n	8001042 <UUTModbusRTU+0x3ca>
					}


					if((record.read_start_address >= UUT_RTD_START_ADDRESS) && (record.read_start_address <= UUT_RTD_END_ADDRESS)) {
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <UUTModbusRTU+0x4f0>)
 8001076:	885b      	ldrh	r3, [r3, #2]
 8001078:	f241 3288 	movw	r2, #5000	; 0x1388
 800107c:	4293      	cmp	r3, r2
 800107e:	d935      	bls.n	80010ec <UUTModbusRTU+0x474>
 8001080:	4b39      	ldr	r3, [pc, #228]	; (8001168 <UUTModbusRTU+0x4f0>)
 8001082:	885b      	ldrh	r3, [r3, #2]
 8001084:	f241 3294 	movw	r2, #5012	; 0x1394
 8001088:	4293      	cmp	r3, r2
 800108a:	d82f      	bhi.n	80010ec <UUTModbusRTU+0x474>

						temp = record.read_start_address - UUT_RTD_START_ADDRESS;
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <UUTModbusRTU+0x4f0>)
 800108e:	885a      	ldrh	r2, [r3, #2]
 8001090:	4b36      	ldr	r3, [pc, #216]	; (800116c <UUTModbusRTU+0x4f4>)
 8001092:	4413      	add	r3, r2
 8001094:	817b      	strh	r3, [r7, #10]

						for(i=0,j=0; i<record.read_registers; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	e01f      	b.n	80010e0 <UUTModbusRTU+0x468>
							temp_data = record.uut_data[j++];
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	613a      	str	r2, [r7, #16]
 80010a6:	4a30      	ldr	r2, [pc, #192]	; (8001168 <UUTModbusRTU+0x4f0>)
 80010a8:	4413      	add	r3, r2
 80010aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ae:	80bb      	strh	r3, [r7, #4]
							uut_ana[temp++] = ((temp_data << 8) | record.uut_data[j++]);
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1c59      	adds	r1, r3, #1
 80010ba:	6139      	str	r1, [r7, #16]
 80010bc:	492a      	ldr	r1, [pc, #168]	; (8001168 <UUTModbusRTU+0x4f0>)
 80010be:	440b      	add	r3, r1
 80010c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b219      	sxth	r1, r3
 80010ca:	897b      	ldrh	r3, [r7, #10]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	817a      	strh	r2, [r7, #10]
 80010d0:	461a      	mov	r2, r3
 80010d2:	b289      	uxth	r1, r1
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <UUTModbusRTU+0x4f8>)
 80010d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for(i=0,j=0; i<record.read_registers; i++) {
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <UUTModbusRTU+0x4f0>)
 80010e2:	88db      	ldrh	r3, [r3, #6]
 80010e4:	461a      	mov	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	4293      	cmp	r3, r2
 80010ea:	dbd9      	blt.n	80010a0 <UUTModbusRTU+0x428>
						}

					}

					switch(record.read_start_address) {
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <UUTModbusRTU+0x4f0>)
 80010ee:	885b      	ldrh	r3, [r3, #2]
 80010f0:	f241 7276 	movw	r2, #6006	; 0x1776
 80010f4:	4293      	cmp	r3, r2
 80010f6:	f300 83f0 	bgt.w	80018da <UUTModbusRTU+0xc62>
 80010fa:	f241 7270 	movw	r2, #6000	; 0x1770
 80010fe:	4293      	cmp	r3, r2
 8001100:	da0f      	bge.n	8001122 <UUTModbusRTU+0x4aa>
 8001102:	f241 32d8 	movw	r2, #5080	; 0x13d8
 8001106:	4293      	cmp	r3, r2
 8001108:	f300 83e7 	bgt.w	80018da <UUTModbusRTU+0xc62>
 800110c:	f241 3295 	movw	r2, #5013	; 0x1395
 8001110:	4293      	cmp	r3, r2
 8001112:	da31      	bge.n	8001178 <UUTModbusRTU+0x500>
 8001114:	2b66      	cmp	r3, #102	; 0x66
 8001116:	f000 80e1 	beq.w	80012dc <UUTModbusRTU+0x664>
 800111a:	2b67      	cmp	r3, #103	; 0x67
 800111c:	f000 80ef 	beq.w	80012fe <UUTModbusRTU+0x686>
							pico_board_supply_power = ((temp << 8) | record.uut_data[1]);
							break;


						default:
							break;
 8001120:	e3db      	b.n	80018da <UUTModbusRTU+0xc62>
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <UUTModbusRTU+0x4fc>)
 8001124:	441a      	add	r2, r3
 8001126:	2a06      	cmp	r2, #6
 8001128:	f200 83d7 	bhi.w	80018da <UUTModbusRTU+0xc62>
 800112c:	a301      	add	r3, pc, #4	; (adr r3, 8001134 <UUTModbusRTU+0x4bc>)
 800112e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001132:	bf00      	nop
 8001134:	08001459 	.word	0x08001459
 8001138:	080018db 	.word	0x080018db
 800113c:	0800149b 	.word	0x0800149b
 8001140:	080018db 	.word	0x080018db
 8001144:	08001639 	.word	0x08001639
 8001148:	080018db 	.word	0x080018db
 800114c:	08001731 	.word	0x08001731
 8001150:	240012d4 	.word	0x240012d4
 8001154:	24000a6f 	.word	0x24000a6f
 8001158:	2400125b 	.word	0x2400125b
 800115c:	24001307 	.word	0x24001307
 8001160:	240012d5 	.word	0x240012d5
 8001164:	24003331 	.word	0x24003331
 8001168:	24003334 	.word	0x24003334
 800116c:	ffffec77 	.word	0xffffec77
 8001170:	24000a48 	.word	0x24000a48
 8001174:	ffffe890 	.word	0xffffe890
 8001178:	4aa9      	ldr	r2, [pc, #676]	; (8001420 <UUTModbusRTU+0x7a8>)
 800117a:	441a      	add	r2, r3
 800117c:	2a43      	cmp	r2, #67	; 0x43
 800117e:	f200 83ac 	bhi.w	80018da <UUTModbusRTU+0xc62>
 8001182:	a301      	add	r3, pc, #4	; (adr r3, 8001188 <UUTModbusRTU+0x510>)
 8001184:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001188:	080012bb 	.word	0x080012bb
 800118c:	08001299 	.word	0x08001299
 8001190:	080018db 	.word	0x080018db
 8001194:	080018db 	.word	0x080018db
 8001198:	080018db 	.word	0x080018db
 800119c:	080018db 	.word	0x080018db
 80011a0:	080018db 	.word	0x080018db
 80011a4:	080018db 	.word	0x080018db
 80011a8:	080018db 	.word	0x080018db
 80011ac:	080018db 	.word	0x080018db
 80011b0:	080018db 	.word	0x080018db
 80011b4:	080018db 	.word	0x080018db
 80011b8:	080018db 	.word	0x080018db
 80011bc:	080018db 	.word	0x080018db
 80011c0:	080018db 	.word	0x080018db
 80011c4:	080018db 	.word	0x080018db
 80011c8:	080018db 	.word	0x080018db
 80011cc:	080018db 	.word	0x080018db
 80011d0:	080018db 	.word	0x080018db
 80011d4:	080018db 	.word	0x080018db
 80011d8:	080018db 	.word	0x080018db
 80011dc:	080018db 	.word	0x080018db
 80011e0:	080018db 	.word	0x080018db
 80011e4:	080018db 	.word	0x080018db
 80011e8:	080018db 	.word	0x080018db
 80011ec:	080018db 	.word	0x080018db
 80011f0:	080018db 	.word	0x080018db
 80011f4:	08001321 	.word	0x08001321
 80011f8:	08001343 	.word	0x08001343
 80011fc:	080018db 	.word	0x080018db
 8001200:	080018db 	.word	0x080018db
 8001204:	08001365 	.word	0x08001365
 8001208:	08001385 	.word	0x08001385
 800120c:	080013a7 	.word	0x080013a7
 8001210:	080013c9 	.word	0x080013c9
 8001214:	080013eb 	.word	0x080013eb
 8001218:	080013fd 	.word	0x080013fd
 800121c:	080018db 	.word	0x080018db
 8001220:	080018db 	.word	0x080018db
 8001224:	080018db 	.word	0x080018db
 8001228:	080018db 	.word	0x080018db
 800122c:	08001795 	.word	0x08001795
 8001230:	080017b7 	.word	0x080017b7
 8001234:	080017df 	.word	0x080017df
 8001238:	0800183b 	.word	0x0800183b
 800123c:	080018db 	.word	0x080018db
 8001240:	080018db 	.word	0x080018db
 8001244:	08001897 	.word	0x08001897
 8001248:	080018b9 	.word	0x080018b9
 800124c:	080018db 	.word	0x080018db
 8001250:	080018db 	.word	0x080018db
 8001254:	080018db 	.word	0x080018db
 8001258:	080018db 	.word	0x080018db
 800125c:	080018db 	.word	0x080018db
 8001260:	080018db 	.word	0x080018db
 8001264:	080018db 	.word	0x080018db
 8001268:	080018db 	.word	0x080018db
 800126c:	080018db 	.word	0x080018db
 8001270:	080018db 	.word	0x080018db
 8001274:	080018db 	.word	0x080018db
 8001278:	080018db 	.word	0x080018db
 800127c:	080018db 	.word	0x080018db
 8001280:	080018db 	.word	0x080018db
 8001284:	080018db 	.word	0x080018db
 8001288:	080018db 	.word	0x080018db
 800128c:	080018db 	.word	0x080018db
 8001290:	080018db 	.word	0x080018db
 8001294:	08001773 	.word	0x08001773
							temp = record.uut_data[0];
 8001298:	4b62      	ldr	r3, [pc, #392]	; (8001424 <UUTModbusRTU+0x7ac>)
 800129a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800129e:	817b      	strh	r3, [r7, #10]
							uut_eeprom_status = ((temp << 8) | record.uut_data[1]);
 80012a0:	897b      	ldrh	r3, [r7, #10]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <UUTModbusRTU+0x7ac>)
 80012a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b5c      	ldr	r3, [pc, #368]	; (8001428 <UUTModbusRTU+0x7b0>)
 80012b6:	801a      	strh	r2, [r3, #0]
							break;
 80012b8:	e310      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 80012ba:	4b5a      	ldr	r3, [pc, #360]	; (8001424 <UUTModbusRTU+0x7ac>)
 80012bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012c0:	817b      	strh	r3, [r7, #10]
							uut_dig_in = ((temp << 8) | record.uut_data[1]);
 80012c2:	897b      	ldrh	r3, [r7, #10]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b56      	ldr	r3, [pc, #344]	; (8001424 <UUTModbusRTU+0x7ac>)
 80012ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b55      	ldr	r3, [pc, #340]	; (800142c <UUTModbusRTU+0x7b4>)
 80012d8:	801a      	strh	r2, [r3, #0]
							break;
 80012da:	e2ff      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 80012dc:	4b51      	ldr	r3, [pc, #324]	; (8001424 <UUTModbusRTU+0x7ac>)
 80012de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012e2:	817b      	strh	r3, [r7, #10]
							uut_sw_ver = ((temp << 8) | record.uut_data[1]);
 80012e4:	897b      	ldrh	r3, [r7, #10]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <UUTModbusRTU+0x7ac>)
 80012ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <UUTModbusRTU+0x7b8>)
 80012fa:	801a      	strh	r2, [r3, #0]
							break;
 80012fc:	e2ee      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 80012fe:	4b49      	ldr	r3, [pc, #292]	; (8001424 <UUTModbusRTU+0x7ac>)
 8001300:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001304:	817b      	strh	r3, [r7, #10]
							uut_hw_ver = ((temp << 8) | record.uut_data[1]);
 8001306:	897b      	ldrh	r3, [r7, #10]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <UUTModbusRTU+0x7ac>)
 800130e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b46      	ldr	r3, [pc, #280]	; (8001434 <UUTModbusRTU+0x7bc>)
 800131c:	801a      	strh	r2, [r3, #0]
							break;
 800131e:	e2dd      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 8001320:	4b40      	ldr	r3, [pc, #256]	; (8001424 <UUTModbusRTU+0x7ac>)
 8001322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001326:	817b      	strh	r3, [r7, #10]
							pico_sw_version = ((temp << 8) | record.uut_data[1]);
 8001328:	897b      	ldrh	r3, [r7, #10]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <UUTModbusRTU+0x7ac>)
 8001330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21b      	sxth	r3, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <UUTModbusRTU+0x7c0>)
 800133e:	801a      	strh	r2, [r3, #0]
							break;
 8001340:	e2cc      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <UUTModbusRTU+0x7ac>)
 8001344:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001348:	817b      	strh	r3, [r7, #10]
							pico_hw_version = ((temp << 8) | record.uut_data[1]);
 800134a:	897b      	ldrh	r3, [r7, #10]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b34      	ldr	r3, [pc, #208]	; (8001424 <UUTModbusRTU+0x7ac>)
 8001352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21b      	sxth	r3, r3
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <UUTModbusRTU+0x7c4>)
 8001360:	801a      	strh	r2, [r3, #0]
							break;
 8001362:	e2bb      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <UUTModbusRTU+0x7ac>)
 8001366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800136a:	817b      	strh	r3, [r7, #10]
							stack_rtd_counts = ((temp << 8) | record.uut_data[1]);
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <UUTModbusRTU+0x7ac>)
 8001374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <UUTModbusRTU+0x7c8>)
 8001382:	801a      	strh	r2, [r3, #0]
							temp = record.uut_data[0];
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <UUTModbusRTU+0x7ac>)
 8001386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800138a:	817b      	strh	r3, [r7, #10]
							stack_rtd_offset = ((temp << 8) | record.uut_data[1]);
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <UUTModbusRTU+0x7ac>)
 8001394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21b      	sxth	r3, r3
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <UUTModbusRTU+0x7cc>)
 80013a2:	801a      	strh	r2, [r3, #0]
							break;
 80013a4:	e29a      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <UUTModbusRTU+0x7ac>)
 80013a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013ac:	817b      	strh	r3, [r7, #10]
							stack_rtd_30_deg = ((temp << 8) | record.uut_data[1]);
 80013ae:	897b      	ldrh	r3, [r7, #10]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <UUTModbusRTU+0x7ac>)
 80013b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b21b      	sxth	r3, r3
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <UUTModbusRTU+0x7d0>)
 80013c4:	801a      	strh	r2, [r3, #0]
							break;
 80013c6:	e289      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <UUTModbusRTU+0x7ac>)
 80013ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013ce:	817b      	strh	r3, [r7, #10]
							stack_rtd_80_deg = ((temp << 8) | record.uut_data[1]);
 80013d0:	897b      	ldrh	r3, [r7, #10]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <UUTModbusRTU+0x7ac>)
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <UUTModbusRTU+0x7d4>)
 80013e6:	801a      	strh	r2, [r3, #0]
							break;
 80013e8:	e278      	b.n	80018dc <UUTModbusRTU+0xc64>
							stack_rtd_scale_factor = (uint16_t) (stack_rtd_80_deg - stack_rtd_30_deg);
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <UUTModbusRTU+0x7d4>)
 80013ec:	881a      	ldrh	r2, [r3, #0]
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <UUTModbusRTU+0x7d0>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <UUTModbusRTU+0x7d8>)
 80013f8:	801a      	strh	r2, [r3, #0]
							break;
 80013fa:	e26f      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <UUTModbusRTU+0x7ac>)
 80013fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001402:	817b      	strh	r3, [r7, #10]
							heater_rtd_counts = ((temp << 8) | record.uut_data[1]);
 8001404:	897b      	ldrh	r3, [r7, #10]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <UUTModbusRTU+0x7ac>)
 800140c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <UUTModbusRTU+0x7dc>)
 800141a:	801a      	strh	r2, [r3, #0]
							break;
 800141c:	e25e      	b.n	80018dc <UUTModbusRTU+0xc64>
 800141e:	bf00      	nop
 8001420:	ffffec6b 	.word	0xffffec6b
 8001424:	24003334 	.word	0x24003334
 8001428:	24000a62 	.word	0x24000a62
 800142c:	24000a60 	.word	0x24000a60
 8001430:	240032d2 	.word	0x240032d2
 8001434:	240032d4 	.word	0x240032d4
 8001438:	240032f6 	.word	0x240032f6
 800143c:	240032f8 	.word	0x240032f8
 8001440:	24003300 	.word	0x24003300
 8001444:	240032fe 	.word	0x240032fe
 8001448:	24003302 	.word	0x24003302
 800144c:	24003304 	.word	0x24003304
 8001450:	24003306 	.word	0x24003306
 8001454:	2400330a 	.word	0x2400330a
							temp = record.uut_data[0];
 8001458:	4b8b      	ldr	r3, [pc, #556]	; (8001688 <UUTModbusRTU+0xa10>)
 800145a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800145e:	817b      	strh	r3, [r7, #10]
							heater_rtd_high = ((temp << 8) | record.uut_data[1]);
 8001460:	897b      	ldrh	r3, [r7, #10]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b88      	ldr	r3, [pc, #544]	; (8001688 <UUTModbusRTU+0xa10>)
 8001468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800146c:	b21b      	sxth	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	b21b      	sxth	r3, r3
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b85      	ldr	r3, [pc, #532]	; (800168c <UUTModbusRTU+0xa14>)
 8001476:	801a      	strh	r2, [r3, #0]
							temp = record.uut_data[2];
 8001478:	4b83      	ldr	r3, [pc, #524]	; (8001688 <UUTModbusRTU+0xa10>)
 800147a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800147e:	817b      	strh	r3, [r7, #10]
							heater_rtd_low = ((temp << 8) | record.uut_data[3]);
 8001480:	897b      	ldrh	r3, [r7, #10]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b80      	ldr	r3, [pc, #512]	; (8001688 <UUTModbusRTU+0xa10>)
 8001488:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800148c:	b21b      	sxth	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	b21b      	sxth	r3, r3
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b7e      	ldr	r3, [pc, #504]	; (8001690 <UUTModbusRTU+0xa18>)
 8001496:	801a      	strh	r2, [r3, #0]
							break;
 8001498:	e220      	b.n	80018dc <UUTModbusRTU+0xc64>
							switch(record.read_registers) {
 800149a:	4b7b      	ldr	r3, [pc, #492]	; (8001688 <UUTModbusRTU+0xa10>)
 800149c:	88db      	ldrh	r3, [r3, #6]
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d069      	beq.n	8001576 <UUTModbusRTU+0x8fe>
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	f300 80c8 	bgt.w	8001638 <UUTModbusRTU+0x9c0>
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d002      	beq.n	80014b2 <UUTModbusRTU+0x83a>
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d021      	beq.n	80014f4 <UUTModbusRTU+0x87c>
 80014b0:	e0c2      	b.n	8001638 <UUTModbusRTU+0x9c0>
								temp = record.uut_data[0];
 80014b2:	4b75      	ldr	r3, [pc, #468]	; (8001688 <UUTModbusRTU+0xa10>)
 80014b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014b8:	817b      	strh	r3, [r7, #10]
								calib_coeff1_high = ((temp << 8) | record.uut_data[1]);
 80014ba:	897b      	ldrh	r3, [r7, #10]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	4b71      	ldr	r3, [pc, #452]	; (8001688 <UUTModbusRTU+0xa10>)
 80014c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b71      	ldr	r3, [pc, #452]	; (8001694 <UUTModbusRTU+0xa1c>)
 80014d0:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[2];
 80014d2:	4b6d      	ldr	r3, [pc, #436]	; (8001688 <UUTModbusRTU+0xa10>)
 80014d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80014d8:	817b      	strh	r3, [r7, #10]
								calib_coeff1_low = ((temp << 8) | record.uut_data[3]);
 80014da:	897b      	ldrh	r3, [r7, #10]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b69      	ldr	r3, [pc, #420]	; (8001688 <UUTModbusRTU+0xa10>)
 80014e2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <UUTModbusRTU+0xa20>)
 80014f0:	801a      	strh	r2, [r3, #0]
								break;
 80014f2:	e0a1      	b.n	8001638 <UUTModbusRTU+0x9c0>
								temp = record.uut_data[0];
 80014f4:	4b64      	ldr	r3, [pc, #400]	; (8001688 <UUTModbusRTU+0xa10>)
 80014f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014fa:	817b      	strh	r3, [r7, #10]
								calib_coeff1_high = ((temp << 8) | record.uut_data[1]);
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b61      	ldr	r3, [pc, #388]	; (8001688 <UUTModbusRTU+0xa10>)
 8001504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21b      	sxth	r3, r3
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b60      	ldr	r3, [pc, #384]	; (8001694 <UUTModbusRTU+0xa1c>)
 8001512:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[2];
 8001514:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <UUTModbusRTU+0xa10>)
 8001516:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800151a:	817b      	strh	r3, [r7, #10]
								calib_coeff1_low = ((temp << 8) | record.uut_data[3]);
 800151c:	897b      	ldrh	r3, [r7, #10]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	b21a      	sxth	r2, r3
 8001522:	4b59      	ldr	r3, [pc, #356]	; (8001688 <UUTModbusRTU+0xa10>)
 8001524:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <UUTModbusRTU+0xa20>)
 8001532:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[4];
 8001534:	4b54      	ldr	r3, [pc, #336]	; (8001688 <UUTModbusRTU+0xa10>)
 8001536:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800153a:	817b      	strh	r3, [r7, #10]
								calib_coeff2_high = ((temp << 8) | record.uut_data[5]);
 800153c:	897b      	ldrh	r3, [r7, #10]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b51      	ldr	r3, [pc, #324]	; (8001688 <UUTModbusRTU+0xa10>)
 8001544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b52      	ldr	r3, [pc, #328]	; (800169c <UUTModbusRTU+0xa24>)
 8001552:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[6];
 8001554:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <UUTModbusRTU+0xa10>)
 8001556:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800155a:	817b      	strh	r3, [r7, #10]
								calib_coeff2_low = ((temp << 8) | record.uut_data[7]);
 800155c:	897b      	ldrh	r3, [r7, #10]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	4b49      	ldr	r3, [pc, #292]	; (8001688 <UUTModbusRTU+0xa10>)
 8001564:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21b      	sxth	r3, r3
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b4b      	ldr	r3, [pc, #300]	; (80016a0 <UUTModbusRTU+0xa28>)
 8001572:	801a      	strh	r2, [r3, #0]
								break;
 8001574:	e060      	b.n	8001638 <UUTModbusRTU+0x9c0>
								temp = record.uut_data[0];
 8001576:	4b44      	ldr	r3, [pc, #272]	; (8001688 <UUTModbusRTU+0xa10>)
 8001578:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800157c:	817b      	strh	r3, [r7, #10]
								calib_coeff1_high = ((temp << 8) | record.uut_data[1]);
 800157e:	897b      	ldrh	r3, [r7, #10]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <UUTModbusRTU+0xa10>)
 8001586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21b      	sxth	r3, r3
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <UUTModbusRTU+0xa1c>)
 8001594:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[2];
 8001596:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <UUTModbusRTU+0xa10>)
 8001598:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800159c:	817b      	strh	r3, [r7, #10]
								calib_coeff1_low = ((temp << 8) | record.uut_data[3]);
 800159e:	897b      	ldrh	r3, [r7, #10]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <UUTModbusRTU+0xa10>)
 80015a6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b39      	ldr	r3, [pc, #228]	; (8001698 <UUTModbusRTU+0xa20>)
 80015b4:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[4];
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <UUTModbusRTU+0xa10>)
 80015b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015bc:	817b      	strh	r3, [r7, #10]
								calib_coeff2_high = ((temp << 8) | record.uut_data[5]);
 80015be:	897b      	ldrh	r3, [r7, #10]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b30      	ldr	r3, [pc, #192]	; (8001688 <UUTModbusRTU+0xa10>)
 80015c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <UUTModbusRTU+0xa24>)
 80015d4:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[6];
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <UUTModbusRTU+0xa10>)
 80015d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015dc:	817b      	strh	r3, [r7, #10]
								calib_coeff2_low = ((temp << 8) | record.uut_data[7]);
 80015de:	897b      	ldrh	r3, [r7, #10]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <UUTModbusRTU+0xa10>)
 80015e6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <UUTModbusRTU+0xa28>)
 80015f4:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[8];
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <UUTModbusRTU+0xa10>)
 80015f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015fc:	817b      	strh	r3, [r7, #10]
								calib_coeff3_high = ((temp << 8) | record.uut_data[9]);
 80015fe:	897b      	ldrh	r3, [r7, #10]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <UUTModbusRTU+0xa10>)
 8001606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21b      	sxth	r3, r3
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <UUTModbusRTU+0xa2c>)
 8001614:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[10];
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <UUTModbusRTU+0xa10>)
 8001618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800161c:	817b      	strh	r3, [r7, #10]
								calib_coeff3_low = ((temp << 8) | record.uut_data[11]);
 800161e:	897b      	ldrh	r3, [r7, #10]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <UUTModbusRTU+0xa10>)
 8001626:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800162a:	b21b      	sxth	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b21b      	sxth	r3, r3
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <UUTModbusRTU+0xa30>)
 8001634:	801a      	strh	r2, [r3, #0]
								break;
 8001636:	bf00      	nop
							switch(record.read_registers) {
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <UUTModbusRTU+0xa10>)
 800163a:	88db      	ldrh	r3, [r3, #6]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d002      	beq.n	8001646 <UUTModbusRTU+0x9ce>
 8001640:	2b04      	cmp	r3, #4
 8001642:	d033      	beq.n	80016ac <UUTModbusRTU+0xa34>
							break;
 8001644:	e14a      	b.n	80018dc <UUTModbusRTU+0xc64>
								temp = record.uut_data[0];
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <UUTModbusRTU+0xa10>)
 8001648:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800164c:	817b      	strh	r3, [r7, #10]
								calib_coeff2_high = ((temp << 8) | record.uut_data[1]);
 800164e:	897b      	ldrh	r3, [r7, #10]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <UUTModbusRTU+0xa10>)
 8001656:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21b      	sxth	r3, r3
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <UUTModbusRTU+0xa24>)
 8001664:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[2];
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <UUTModbusRTU+0xa10>)
 8001668:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800166c:	817b      	strh	r3, [r7, #10]
								calib_coeff2_low = ((temp << 8) | record.uut_data[3]);
 800166e:	897b      	ldrh	r3, [r7, #10]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <UUTModbusRTU+0xa10>)
 8001676:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800167a:	b21b      	sxth	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b21b      	sxth	r3, r3
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <UUTModbusRTU+0xa28>)
 8001684:	801a      	strh	r2, [r3, #0]
								break;
 8001686:	e052      	b.n	800172e <UUTModbusRTU+0xab6>
 8001688:	24003334 	.word	0x24003334
 800168c:	2400330e 	.word	0x2400330e
 8001690:	24003310 	.word	0x24003310
 8001694:	24003322 	.word	0x24003322
 8001698:	24003324 	.word	0x24003324
 800169c:	24003326 	.word	0x24003326
 80016a0:	24003328 	.word	0x24003328
 80016a4:	2400332a 	.word	0x2400332a
 80016a8:	2400332c 	.word	0x2400332c
								temp = record.uut_data[0];
 80016ac:	4ba2      	ldr	r3, [pc, #648]	; (8001938 <UUTModbusRTU+0xcc0>)
 80016ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016b2:	817b      	strh	r3, [r7, #10]
								calib_coeff2_high = ((temp << 8) | record.uut_data[1]);
 80016b4:	897b      	ldrh	r3, [r7, #10]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	4b9f      	ldr	r3, [pc, #636]	; (8001938 <UUTModbusRTU+0xcc0>)
 80016bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b9c      	ldr	r3, [pc, #624]	; (800193c <UUTModbusRTU+0xcc4>)
 80016ca:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[2];
 80016cc:	4b9a      	ldr	r3, [pc, #616]	; (8001938 <UUTModbusRTU+0xcc0>)
 80016ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80016d2:	817b      	strh	r3, [r7, #10]
								calib_coeff2_low = ((temp << 8) | record.uut_data[3]);
 80016d4:	897b      	ldrh	r3, [r7, #10]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	4b97      	ldr	r3, [pc, #604]	; (8001938 <UUTModbusRTU+0xcc0>)
 80016dc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b95      	ldr	r3, [pc, #596]	; (8001940 <UUTModbusRTU+0xcc8>)
 80016ea:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[4];
 80016ec:	4b92      	ldr	r3, [pc, #584]	; (8001938 <UUTModbusRTU+0xcc0>)
 80016ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016f2:	817b      	strh	r3, [r7, #10]
								calib_coeff3_high = ((temp << 8) | record.uut_data[5]);
 80016f4:	897b      	ldrh	r3, [r7, #10]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b8f      	ldr	r3, [pc, #572]	; (8001938 <UUTModbusRTU+0xcc0>)
 80016fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001700:	b21b      	sxth	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b21b      	sxth	r3, r3
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b8e      	ldr	r3, [pc, #568]	; (8001944 <UUTModbusRTU+0xccc>)
 800170a:	801a      	strh	r2, [r3, #0]
								temp = record.uut_data[6];
 800170c:	4b8a      	ldr	r3, [pc, #552]	; (8001938 <UUTModbusRTU+0xcc0>)
 800170e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001712:	817b      	strh	r3, [r7, #10]
								calib_coeff3_low = ((temp << 8) | record.uut_data[7]);
 8001714:	897b      	ldrh	r3, [r7, #10]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21a      	sxth	r2, r3
 800171a:	4b87      	ldr	r3, [pc, #540]	; (8001938 <UUTModbusRTU+0xcc0>)
 800171c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001720:	b21b      	sxth	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b21b      	sxth	r3, r3
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b87      	ldr	r3, [pc, #540]	; (8001948 <UUTModbusRTU+0xcd0>)
 800172a:	801a      	strh	r2, [r3, #0]
								break;
 800172c:	bf00      	nop
							break;
 800172e:	e0d5      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 8001730:	4b81      	ldr	r3, [pc, #516]	; (8001938 <UUTModbusRTU+0xcc0>)
 8001732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001736:	817b      	strh	r3, [r7, #10]
							calib_coeff3_high = ((temp << 8) | record.uut_data[1]);
 8001738:	897b      	ldrh	r3, [r7, #10]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b21a      	sxth	r2, r3
 800173e:	4b7e      	ldr	r3, [pc, #504]	; (8001938 <UUTModbusRTU+0xcc0>)
 8001740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001744:	b21b      	sxth	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b21b      	sxth	r3, r3
 800174a:	b29a      	uxth	r2, r3
 800174c:	4b7d      	ldr	r3, [pc, #500]	; (8001944 <UUTModbusRTU+0xccc>)
 800174e:	801a      	strh	r2, [r3, #0]
							temp = record.uut_data[2];
 8001750:	4b79      	ldr	r3, [pc, #484]	; (8001938 <UUTModbusRTU+0xcc0>)
 8001752:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001756:	817b      	strh	r3, [r7, #10]
							calib_coeff3_low = ((temp << 8) | record.uut_data[3]);
 8001758:	897b      	ldrh	r3, [r7, #10]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	4b76      	ldr	r3, [pc, #472]	; (8001938 <UUTModbusRTU+0xcc0>)
 8001760:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001764:	b21b      	sxth	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b21b      	sxth	r3, r3
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b76      	ldr	r3, [pc, #472]	; (8001948 <UUTModbusRTU+0xcd0>)
 800176e:	801a      	strh	r2, [r3, #0]
							break;
 8001770:	e0b4      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 8001772:	4b71      	ldr	r3, [pc, #452]	; (8001938 <UUTModbusRTU+0xcc0>)
 8001774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001778:	817b      	strh	r3, [r7, #10]
							calibration_status = ((temp << 8) | record.uut_data[1]);
 800177a:	897b      	ldrh	r3, [r7, #10]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <UUTModbusRTU+0xcc0>)
 8001782:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21b      	sxth	r3, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b6f      	ldr	r3, [pc, #444]	; (800194c <UUTModbusRTU+0xcd4>)
 8001790:	801a      	strh	r2, [r3, #0]
							break;
 8001792:	e0a3      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <UUTModbusRTU+0xcc0>)
 8001796:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800179a:	817b      	strh	r3, [r7, #10]
							hall_counts = ((temp << 8) | record.uut_data[1]);
 800179c:	897b      	ldrh	r3, [r7, #10]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <UUTModbusRTU+0xcc0>)
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b67      	ldr	r3, [pc, #412]	; (8001950 <UUTModbusRTU+0xcd8>)
 80017b2:	801a      	strh	r2, [r3, #0]
							break;
 80017b4:	e092      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 80017b6:	4b60      	ldr	r3, [pc, #384]	; (8001938 <UUTModbusRTU+0xcc0>)
 80017b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017bc:	817b      	strh	r3, [r7, #10]
							hall_offset = ((temp << 8) | record.uut_data[1]);
 80017be:	897b      	ldrh	r3, [r7, #10]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <UUTModbusRTU+0xcc0>)
 80017c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b60      	ldr	r3, [pc, #384]	; (8001954 <UUTModbusRTU+0xcdc>)
 80017d4:	801a      	strh	r2, [r3, #0]
							hall_gain = 0;
 80017d6:	4b60      	ldr	r3, [pc, #384]	; (8001958 <UUTModbusRTU+0xce0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	801a      	strh	r2, [r3, #0]
							break;
 80017dc:	e07e      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 80017de:	4b56      	ldr	r3, [pc, #344]	; (8001938 <UUTModbusRTU+0xcc0>)
 80017e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017e4:	817b      	strh	r3, [r7, #10]
							hall_vin_020 = ((temp << 8) | record.uut_data[1]);
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	4b52      	ldr	r3, [pc, #328]	; (8001938 <UUTModbusRTU+0xcc0>)
 80017ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b58      	ldr	r3, [pc, #352]	; (800195c <UUTModbusRTU+0xce4>)
 80017fc:	801a      	strh	r2, [r3, #0]
							ftemp = (float)((float)hall_vin_020 / (float)vin_020);
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <UUTModbusRTU+0xce4>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800180a:	4b55      	ldr	r3, [pc, #340]	; (8001960 <UUTModbusRTU+0xce8>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181a:	edc7 7a00 	vstr	s15, [r7]
							hall_gain = (uint16_t)(ftemp * 1000);
 800181e:	edd7 7a00 	vldr	s15, [r7]
 8001822:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001964 <UUTModbusRTU+0xcec>
 8001826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800182e:	ee17 3a90 	vmov	r3, s15
 8001832:	b29a      	uxth	r2, r3
 8001834:	4b48      	ldr	r3, [pc, #288]	; (8001958 <UUTModbusRTU+0xce0>)
 8001836:	801a      	strh	r2, [r3, #0]
							break;
 8001838:	e050      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <UUTModbusRTU+0xcc0>)
 800183c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001840:	817b      	strh	r3, [r7, #10]
							hall_vin_060 = ((temp << 8) | record.uut_data[1]);
 8001842:	897b      	ldrh	r3, [r7, #10]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b21a      	sxth	r2, r3
 8001848:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <UUTModbusRTU+0xcc0>)
 800184a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800184e:	b21b      	sxth	r3, r3
 8001850:	4313      	orrs	r3, r2
 8001852:	b21b      	sxth	r3, r3
 8001854:	b29a      	uxth	r2, r3
 8001856:	4b44      	ldr	r3, [pc, #272]	; (8001968 <UUTModbusRTU+0xcf0>)
 8001858:	801a      	strh	r2, [r3, #0]
							ftemp = (float)((float)hall_vin_060 / (float)vin_060);
 800185a:	4b43      	ldr	r3, [pc, #268]	; (8001968 <UUTModbusRTU+0xcf0>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <UUTModbusRTU+0xcf4>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001876:	edc7 7a00 	vstr	s15, [r7]
							hall_gain = (uint16_t) (ftemp * 1000);
 800187a:	edd7 7a00 	vldr	s15, [r7]
 800187e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001964 <UUTModbusRTU+0xcec>
 8001882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <UUTModbusRTU+0xce0>)
 8001892:	801a      	strh	r2, [r3, #0]
							break;
 8001894:	e022      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 8001896:	4b28      	ldr	r3, [pc, #160]	; (8001938 <UUTModbusRTU+0xcc0>)
 8001898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800189c:	817b      	strh	r3, [r7, #10]
							pico_board_supply_amps = ((temp << 8) | record.uut_data[1]);
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <UUTModbusRTU+0xcc0>)
 80018a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <UUTModbusRTU+0xcf8>)
 80018b4:	801a      	strh	r2, [r3, #0]
							break;
 80018b6:	e011      	b.n	80018dc <UUTModbusRTU+0xc64>
							temp = record.uut_data[0];
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <UUTModbusRTU+0xcc0>)
 80018ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018be:	817b      	strh	r3, [r7, #10]
							pico_board_supply_power = ((temp << 8) | record.uut_data[1]);
 80018c0:	897b      	ldrh	r3, [r7, #10]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <UUTModbusRTU+0xcc0>)
 80018c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <UUTModbusRTU+0xcfc>)
 80018d6:	801a      	strh	r2, [r3, #0]
							break;
 80018d8:	e000      	b.n	80018dc <UUTModbusRTU+0xc64>
							break;
 80018da:	bf00      	nop

					}
					uut_ack = 1;
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <UUTModbusRTU+0xd00>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
					uut_protocol_state = UUT_SYNC_STATE;
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <UUTModbusRTU+0xd04>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]

					break;
 80018e8:	e054      	b.n	8001994 <UUTModbusRTU+0xd1c>


				case WRITE_MULTIPLE_REGISTERS:

					switch(record.write_start_address) {
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <UUTModbusRTU+0xcc0>)
 80018ec:	889b      	ldrh	r3, [r3, #4]
 80018ee:	461a      	mov	r2, r3
 80018f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d116      	bne.n	8001926 <UUTModbusRTU+0xcae>

						case SPECIAL_ADDRESS:
							for(i=0; i<5; i++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e00c      	b.n	8001918 <UUTModbusRTU+0xca0>
								pulse_counter[i] = 0x00;
 80018fe:	4a20      	ldr	r2, [pc, #128]	; (8001980 <UUTModbusRTU+0xd08>)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2100      	movs	r1, #0
 8001904:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								acinputs[i] = 0x00;
 8001908:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <UUTModbusRTU+0xd0c>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	4413      	add	r3, r2
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
							for(i=0; i<5; i++) {
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b04      	cmp	r3, #4
 800191c:	ddef      	ble.n	80018fe <UUTModbusRTU+0xc86>
							}
							AC_Input = 0x00;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <UUTModbusRTU+0xd10>)
 8001920:	2200      	movs	r2, #0
 8001922:	801a      	strh	r2, [r3, #0]

							break;
 8001924:	e000      	b.n	8001928 <UUTModbusRTU+0xcb0>


						default:
							break;
 8001926:	bf00      	nop

					}
					uut_ack = 1;
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <UUTModbusRTU+0xd00>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
					uut_protocol_state = UUT_SYNC_STATE;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <UUTModbusRTU+0xd04>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]

					break;
 8001934:	e02e      	b.n	8001994 <UUTModbusRTU+0xd1c>
 8001936:	bf00      	nop
 8001938:	24003334 	.word	0x24003334
 800193c:	24003326 	.word	0x24003326
 8001940:	24003328 	.word	0x24003328
 8001944:	2400332a 	.word	0x2400332a
 8001948:	2400332c 	.word	0x2400332c
 800194c:	2400332e 	.word	0x2400332e
 8001950:	24003312 	.word	0x24003312
 8001954:	24003318 	.word	0x24003318
 8001958:	2400331a 	.word	0x2400331a
 800195c:	24003314 	.word	0x24003314
 8001960:	2400001a 	.word	0x2400001a
 8001964:	447a0000 	.word	0x447a0000
 8001968:	24003316 	.word	0x24003316
 800196c:	2400001c 	.word	0x2400001c
 8001970:	2400331e 	.word	0x2400331e
 8001974:	24003320 	.word	0x24003320
 8001978:	24000a6e 	.word	0x24000a6e
 800197c:	24003331 	.word	0x24003331
 8001980:	24001344 	.word	0x24001344
 8001984:	2400133c 	.word	0x2400133c
 8001988:	24001342 	.word	0x24001342


				default:
					uut_protocol_state = UUT_SYNC_STATE;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <UUTModbusRTU+0xd30>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
					break;
 8001992:	bf00      	nop
			}
			break;
 8001994:	e004      	b.n	80019a0 <UUTModbusRTU+0xd28>

		default:
			break;
 8001996:	bf00      	nop
 8001998:	e002      	b.n	80019a0 <UUTModbusRTU+0xd28>
			break;
 800199a:	bf00      	nop
 800199c:	e000      	b.n	80019a0 <UUTModbusRTU+0xd28>
			break;
 800199e:	bf00      	nop


	}

}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	24003331 	.word	0x24003331

080019ac <SerialTransmit>:


void SerialTransmit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart1, PC_TxBuff, pc_data_out, 5000);
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <SerialTransmit+0x20>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ba:	4905      	ldr	r1, [pc, #20]	; (80019d0 <SerialTransmit+0x24>)
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <SerialTransmit+0x28>)
 80019be:	f00b fb29 	bl	800d014 <HAL_UART_Transmit>
	HAL_Delay(5);
 80019c2:	2005      	movs	r0, #5
 80019c4:	f003 fb88 	bl	80050d8 <HAL_Delay>

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2400124c 	.word	0x2400124c
 80019d0:	24001284 	.word	0x24001284
 80019d4:	2400075c 	.word	0x2400075c

080019d8 <UUTSerialTransmit>:

void UUTSerialTransmit(void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);		// transmit mode
 80019dc:	2201      	movs	r2, #1
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <UUTSerialTransmit+0x3c>)
 80019e2:	f006 f9e9 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f003 fb76 	bl	80050d8 <HAL_Delay>
	HAL_UART_Transmit(&huart2, UART_TxBuff, rx_data_out, 5000);
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <UUTSerialTransmit+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80019f6:	4909      	ldr	r1, [pc, #36]	; (8001a1c <UUTSerialTransmit+0x44>)
 80019f8:	4809      	ldr	r0, [pc, #36]	; (8001a20 <UUTSerialTransmit+0x48>)
 80019fa:	f00b fb0b 	bl	800d014 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);	// receive mode
 80019fe:	2200      	movs	r2, #0
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	4804      	ldr	r0, [pc, #16]	; (8001a14 <UUTSerialTransmit+0x3c>)
 8001a04:	f006 f9d8 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f003 fb65 	bl	80050d8 <HAL_Delay>
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	58020c00 	.word	0x58020c00
 8001a18:	24001254 	.word	0x24001254
 8001a1c:	240012ac 	.word	0x240012ac
 8001a20:	240007f0 	.word	0x240007f0

08001a24 <ReadInputs>:

void ReadInputs(void)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0

	int i = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
	// Digital Inputs
	dig_inputs[i++] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1);
 8001a2e:	687c      	ldr	r4, [r7, #4]
 8001a30:	1c63      	adds	r3, r4, #1
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	2102      	movs	r1, #2
 8001a36:	48a6      	ldr	r0, [pc, #664]	; (8001cd0 <ReadInputs+0x2ac>)
 8001a38:	f006 f9a6 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4ba4      	ldr	r3, [pc, #656]	; (8001cd4 <ReadInputs+0x2b0>)
 8001a42:	551a      	strb	r2, [r3, r4]
	dig_inputs[i++] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0);
 8001a44:	687c      	ldr	r4, [r7, #4]
 8001a46:	1c63      	adds	r3, r4, #1
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	48a0      	ldr	r0, [pc, #640]	; (8001cd0 <ReadInputs+0x2ac>)
 8001a4e:	f006 f99b 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b9f      	ldr	r3, [pc, #636]	; (8001cd4 <ReadInputs+0x2b0>)
 8001a58:	551a      	strb	r2, [r3, r4]
	dig_inputs[i++] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8001a5a:	687c      	ldr	r4, [r7, #4]
 8001a5c:	1c63      	adds	r3, r4, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a64:	489c      	ldr	r0, [pc, #624]	; (8001cd8 <ReadInputs+0x2b4>)
 8001a66:	f006 f98f 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b99      	ldr	r3, [pc, #612]	; (8001cd4 <ReadInputs+0x2b0>)
 8001a70:	551a      	strb	r2, [r3, r4]
	dig_inputs[i++] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8001a72:	687c      	ldr	r4, [r7, #4]
 8001a74:	1c63      	adds	r3, r4, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7c:	4896      	ldr	r0, [pc, #600]	; (8001cd8 <ReadInputs+0x2b4>)
 8001a7e:	f006 f983 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b93      	ldr	r3, [pc, #588]	; (8001cd4 <ReadInputs+0x2b0>)
 8001a88:	551a      	strb	r2, [r3, r4]
	dig_inputs[i++] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8001a8a:	687c      	ldr	r4, [r7, #4]
 8001a8c:	1c63      	adds	r3, r4, #1
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	4891      	ldr	r0, [pc, #580]	; (8001cd8 <ReadInputs+0x2b4>)
 8001a94:	f006 f978 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b8d      	ldr	r3, [pc, #564]	; (8001cd4 <ReadInputs+0x2b0>)
 8001a9e:	551a      	strb	r2, [r3, r4]
	dig_inputs[i++] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001aa0:	687c      	ldr	r4, [r7, #4]
 8001aa2:	1c63      	adds	r3, r4, #1
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	2140      	movs	r1, #64	; 0x40
 8001aa8:	488b      	ldr	r0, [pc, #556]	; (8001cd8 <ReadInputs+0x2b4>)
 8001aaa:	f006 f96d 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <ReadInputs+0x2b0>)
 8001ab4:	551a      	strb	r2, [r3, r4]
	dig_inputs[i++] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001ab6:	687c      	ldr	r4, [r7, #4]
 8001ab8:	1c63      	adds	r3, r4, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	2120      	movs	r1, #32
 8001abe:	4886      	ldr	r0, [pc, #536]	; (8001cd8 <ReadInputs+0x2b4>)
 8001ac0:	f006 f962 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b82      	ldr	r3, [pc, #520]	; (8001cd4 <ReadInputs+0x2b0>)
 8001aca:	551a      	strb	r2, [r3, r4]
	dig_inputs[i++] = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_15);
 8001acc:	687c      	ldr	r4, [r7, #4]
 8001ace:	1c63      	adds	r3, r4, #1
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ad6:	4881      	ldr	r0, [pc, #516]	; (8001cdc <ReadInputs+0x2b8>)
 8001ad8:	f006 f956 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <ReadInputs+0x2b0>)
 8001ae2:	551a      	strb	r2, [r3, r4]

	Digital_Input = 0;
 8001ae4:	4b7e      	ldr	r3, [pc, #504]	; (8001ce0 <ReadInputs+0x2bc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	801a      	strh	r2, [r3, #0]
	Digital_Input = (Digital_Input | dig_inputs[7]);
 8001aea:	4b7a      	ldr	r3, [pc, #488]	; (8001cd4 <ReadInputs+0x2b0>)
 8001aec:	79db      	ldrb	r3, [r3, #7]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b7b      	ldr	r3, [pc, #492]	; (8001ce0 <ReadInputs+0x2bc>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <ReadInputs+0x2bc>)
 8001afa:	801a      	strh	r2, [r3, #0]
	for(i=6; i>=0; i--) {
 8001afc:	2306      	movs	r3, #6
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	e010      	b.n	8001b24 <ReadInputs+0x100>

		Digital_Input = ((Digital_Input << 1) | dig_inputs[i]);
 8001b02:	4b77      	ldr	r3, [pc, #476]	; (8001ce0 <ReadInputs+0x2bc>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	4972      	ldr	r1, [pc, #456]	; (8001cd4 <ReadInputs+0x2b0>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	440b      	add	r3, r1
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b71      	ldr	r3, [pc, #452]	; (8001ce0 <ReadInputs+0x2bc>)
 8001b1c:	801a      	strh	r2, [r3, #0]
	for(i=6; i>=0; i--) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	daeb      	bge.n	8001b02 <ReadInputs+0xde>
	}


	// Analog Inputs
	i = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
	v33_inputs[i++] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0);
 8001b2e:	687c      	ldr	r4, [r7, #4]
 8001b30:	1c63      	adds	r3, r4, #1
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	2101      	movs	r1, #1
 8001b36:	486b      	ldr	r0, [pc, #428]	; (8001ce4 <ReadInputs+0x2c0>)
 8001b38:	f006 f926 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <ReadInputs+0x2c4>)
 8001b42:	551a      	strb	r2, [r3, r4]
	v33_inputs[i++] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 8001b44:	687c      	ldr	r4, [r7, #4]
 8001b46:	1c63      	adds	r3, r4, #1
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4865      	ldr	r0, [pc, #404]	; (8001ce4 <ReadInputs+0x2c0>)
 8001b4e:	f006 f91b 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b64      	ldr	r3, [pc, #400]	; (8001ce8 <ReadInputs+0x2c4>)
 8001b58:	551a      	strb	r2, [r3, r4]
	v33_inputs[i++] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2);
 8001b5a:	687c      	ldr	r4, [r7, #4]
 8001b5c:	1c63      	adds	r3, r4, #1
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	2104      	movs	r1, #4
 8001b62:	4860      	ldr	r0, [pc, #384]	; (8001ce4 <ReadInputs+0x2c0>)
 8001b64:	f006 f910 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ce8 <ReadInputs+0x2c4>)
 8001b6e:	551a      	strb	r2, [r3, r4]
	v33_inputs[i++] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3);
 8001b70:	687c      	ldr	r4, [r7, #4]
 8001b72:	1c63      	adds	r3, r4, #1
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	2108      	movs	r1, #8
 8001b78:	485a      	ldr	r0, [pc, #360]	; (8001ce4 <ReadInputs+0x2c0>)
 8001b7a:	f006 f905 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <ReadInputs+0x2c4>)
 8001b84:	551a      	strb	r2, [r3, r4]
	v33_inputs[i++] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_4);
 8001b86:	687c      	ldr	r4, [r7, #4]
 8001b88:	1c63      	adds	r3, r4, #1
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	4855      	ldr	r0, [pc, #340]	; (8001ce4 <ReadInputs+0x2c0>)
 8001b90:	f006 f8fa 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <ReadInputs+0x2c4>)
 8001b9a:	551a      	strb	r2, [r3, r4]
	v33_inputs[i++] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5);
 8001b9c:	687c      	ldr	r4, [r7, #4]
 8001b9e:	1c63      	adds	r3, r4, #1
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	484f      	ldr	r0, [pc, #316]	; (8001ce4 <ReadInputs+0x2c0>)
 8001ba6:	f006 f8ef 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b4e      	ldr	r3, [pc, #312]	; (8001ce8 <ReadInputs+0x2c4>)
 8001bb0:	551a      	strb	r2, [r3, r4]
	v33_inputs[i++] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 8001bb2:	687c      	ldr	r4, [r7, #4]
 8001bb4:	1c63      	adds	r3, r4, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	484a      	ldr	r0, [pc, #296]	; (8001ce4 <ReadInputs+0x2c0>)
 8001bbc:	f006 f8e4 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <ReadInputs+0x2c4>)
 8001bc6:	551a      	strb	r2, [r3, r4]
	v33_inputs[i++] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8001bc8:	687c      	ldr	r4, [r7, #4]
 8001bca:	1c63      	adds	r3, r4, #1
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	4844      	ldr	r0, [pc, #272]	; (8001ce4 <ReadInputs+0x2c0>)
 8001bd2:	f006 f8d9 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <ReadInputs+0x2c4>)
 8001bdc:	551a      	strb	r2, [r3, r4]

	V33_Input = 0;
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <ReadInputs+0x2c8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	801a      	strh	r2, [r3, #0]
	V33_Input = (V33_Input | v33_inputs[7]);
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <ReadInputs+0x2c4>)
 8001be6:	79db      	ldrb	r3, [r3, #7]
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	4b40      	ldr	r3, [pc, #256]	; (8001cec <ReadInputs+0x2c8>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <ReadInputs+0x2c8>)
 8001bf4:	801a      	strh	r2, [r3, #0]
	for(i=6; i>=0; i--) {
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	e010      	b.n	8001c1e <ReadInputs+0x1fa>

		V33_Input = ((V33_Input << 1) | v33_inputs[i]);
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <ReadInputs+0x2c8>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	4938      	ldr	r1, [pc, #224]	; (8001ce8 <ReadInputs+0x2c4>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	440b      	add	r3, r1
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <ReadInputs+0x2c8>)
 8001c16:	801a      	strh	r2, [r3, #0]
	for(i=6; i>=0; i--) {
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	daeb      	bge.n	8001bfc <ReadInputs+0x1d8>
	}*/



	// Switch Inputs
	i = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
	sw_inputs[i++]	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8001c28:	687c      	ldr	r4, [r7, #4]
 8001c2a:	1c63      	adds	r3, r4, #1
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c32:	482c      	ldr	r0, [pc, #176]	; (8001ce4 <ReadInputs+0x2c0>)
 8001c34:	f006 f8a8 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <ReadInputs+0x2cc>)
 8001c3e:	551a      	strb	r2, [r3, r4]
	sw_inputs[i++]	= HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8001c40:	687c      	ldr	r4, [r7, #4]
 8001c42:	1c63      	adds	r3, r4, #1
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4a:	4826      	ldr	r0, [pc, #152]	; (8001ce4 <ReadInputs+0x2c0>)
 8001c4c:	f006 f89c 	bl	8007d88 <HAL_GPIO_ReadPin>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <ReadInputs+0x2cc>)
 8001c56:	551a      	strb	r2, [r3, r4]

	// AC Inputs
	AC_Input = 0;
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <ReadInputs+0x2d0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
	for(i=0; i<MAX_AC_INPUTS; i++) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	e013      	b.n	8001c8c <ReadInputs+0x268>
		if(pulse_counter[i])
 8001c64:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <ReadInputs+0x2d4>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <ReadInputs+0x258>
			acinputs[i] = 1;
 8001c70:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <ReadInputs+0x2d8>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e004      	b.n	8001c86 <ReadInputs+0x262>
		else
			acinputs[i] = 0;
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <ReadInputs+0x2d8>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
	for(i=0; i<MAX_AC_INPUTS; i++) {
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	dde8      	ble.n	8001c64 <ReadInputs+0x240>
	}

	AC_Input = 0;
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <ReadInputs+0x2d0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	801a      	strh	r2, [r3, #0]
	for(i=4; i>=0; i--) {
 8001c98:	2304      	movs	r3, #4
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	e010      	b.n	8001cc0 <ReadInputs+0x29c>

		AC_Input = ((AC_Input << 1) | acinputs[i]);
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <ReadInputs+0x2d0>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	4915      	ldr	r1, [pc, #84]	; (8001cfc <ReadInputs+0x2d8>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	440b      	add	r3, r1
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <ReadInputs+0x2d0>)
 8001cb8:	801a      	strh	r2, [r3, #0]
	for(i=4; i>=0; i--) {
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	daeb      	bge.n	8001c9e <ReadInputs+0x27a>
	dig_input_arr[5] = (Digital_Input & 0xFF);

*/


}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}
 8001cd0:	58021000 	.word	0x58021000
 8001cd4:	2400130c 	.word	0x2400130c
 8001cd8:	58020400 	.word	0x58020400
 8001cdc:	58021800 	.word	0x58021800
 8001ce0:	24001314 	.word	0x24001314
 8001ce4:	58021400 	.word	0x58021400
 8001ce8:	24001318 	.word	0x24001318
 8001cec:	24001320 	.word	0x24001320
 8001cf0:	24001330 	.word	0x24001330
 8001cf4:	24001342 	.word	0x24001342
 8001cf8:	24001344 	.word	0x24001344
 8001cfc:	2400133c 	.word	0x2400133c

08001d00 <read_analog_data1>:
				}
}
*/

void read_analog_data1(void)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b08f      	sub	sp, #60	; 0x3c
 8001d04:	af00      	add	r7, sp, #0

	uint32_t status = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ch_sel = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t ch_seq = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	static uint16_t i = 0;
	uint16_t j[14] = {0,1};
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	615a      	str	r2, [r3, #20]
 8001d22:	619a      	str	r2, [r3, #24]
 8001d24:	2301      	movs	r3, #1
 8001d26:	80fb      	strh	r3, [r7, #6]
	uint16_t k = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	857b      	strh	r3, [r7, #42]	; 0x2a
	double temp = 0;
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e9c7 2308 	strd	r2, r3, [r7, #32]
//	static double temp_HV1_voltage = 0;
//	static float adcbuff_14 = 0;
//	static uint16_t voltage_capture_count = 0;
//	static uint16_t adc_data14_prev = 0, adc_data14_curr = 0;

	adc_data14_prev = adc_data[14];
 8001d38:	4b9f      	ldr	r3, [pc, #636]	; (8001fb8 <read_analog_data1+0x2b8>)
 8001d3a:	8b9a      	ldrh	r2, [r3, #28]
 8001d3c:	4b9f      	ldr	r3, [pc, #636]	; (8001fbc <read_analog_data1+0x2bc>)
 8001d3e:	801a      	strh	r2, [r3, #0]

	  for(i=0; i<=1; i++)
 8001d40:	4b9f      	ldr	r3, [pc, #636]	; (8001fc0 <read_analog_data1+0x2c0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	e07c      	b.n	8001e42 <read_analog_data1+0x142>
	  {

		HAL_ADC_Stop(&hadc3);
 8001d48:	489e      	ldr	r0, [pc, #632]	; (8001fc4 <read_analog_data1+0x2c4>)
 8001d4a:	f003 fea9 	bl	8005aa0 <HAL_ADC_Stop>
		status = hadc3.Instance->CR;
 8001d4e:	4b9d      	ldr	r3, [pc, #628]	; (8001fc4 <read_analog_data1+0x2c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
		ch_sel = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
		k = j[i];
 8001d5a:	4b99      	ldr	r3, [pc, #612]	; (8001fc0 <read_analog_data1+0x2c0>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	3338      	adds	r3, #56	; 0x38
 8001d62:	443b      	add	r3, r7
 8001d64:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8001d68:	857b      	strh	r3, [r7, #42]	; 0x2a

		if((status & 0x4) == 0)
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d160      	bne.n	8001e36 <read_analog_data1+0x136>
		{
			ch_sel = (ch_sel << k);
 8001d74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
			hadc3.Instance->PCSEL = ch_sel;
 8001d7e:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <read_analog_data1+0x2c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d84:	61da      	str	r2, [r3, #28]
			ch_seq = (k << 6);
 8001d86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d88:	019b      	lsls	r3, r3, #6
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			hadc3.Instance->SQR1  = ch_seq;
 8001d8c:	4b8d      	ldr	r3, [pc, #564]	; (8001fc4 <read_analog_data1+0x2c4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
			//hadc1.Instance->SQR2  = ch_seq;
			//hadc1.Instance->SQR3  = ch_seq;
			//hadc1.Instance->SQR4  = ch_seq;

			HAL_ADC_Start(&hadc3);
 8001d94:	488b      	ldr	r0, [pc, #556]	; (8001fc4 <read_analog_data1+0x2c4>)
 8001d96:	f003 fdb9 	bl	800590c <HAL_ADC_Start>
			//HAL_Delay(1);
			HAL_ADC_PollForConversion(&hadc3, 10);
 8001d9a:	210a      	movs	r1, #10
 8001d9c:	4889      	ldr	r0, [pc, #548]	; (8001fc4 <read_analog_data1+0x2c4>)
 8001d9e:	f003 feb3 	bl	8005b08 <HAL_ADC_PollForConversion>
			adc_buff[i + 14] = HAL_ADC_GetValue(&hadc3);
 8001da2:	4b87      	ldr	r3, [pc, #540]	; (8001fc0 <read_analog_data1+0x2c0>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	f103 040e 	add.w	r4, r3, #14
 8001daa:	4886      	ldr	r0, [pc, #536]	; (8001fc4 <read_analog_data1+0x2c4>)
 8001dac:	f003 ffa0 	bl	8005cf0 <HAL_ADC_GetValue>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a85      	ldr	r2, [pc, #532]	; (8001fc8 <read_analog_data1+0x2c8>)
 8001db4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			//Since the voltage goes up to 130V, It is not possible to send 130000 millivolts in 16-bit number (Max 65535).
			//Hence converting to 2 decimal precision. 130V -> 130.00V
			temp = temp/10;
			adc_data[i + 14] = (uint16_t)temp;
			*/
			adcbuff_14 = (float)(adc_buff[i + 14]);
 8001db8:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <read_analog_data1+0x2c0>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	330e      	adds	r3, #14
 8001dbe:	4a82      	ldr	r2, [pc, #520]	; (8001fc8 <read_analog_data1+0x2c8>)
 8001dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dcc:	4b7f      	ldr	r3, [pc, #508]	; (8001fcc <read_analog_data1+0x2cc>)
 8001dce:	edc3 7a00 	vstr	s15, [r3]
			temp = (double)((0.0000007*adcbuff_14*adcbuff_14)+(0.2213*adcbuff_14)-74.627);	//2nd degree polynomial to find voltage (scaled by x100) from counts
 8001dd2:	4b7e      	ldr	r3, [pc, #504]	; (8001fcc <read_analog_data1+0x2cc>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ddc:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8001fa0 <read_analog_data1+0x2a0>
 8001de0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001de4:	4b79      	ldr	r3, [pc, #484]	; (8001fcc <read_analog_data1+0x2cc>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dee:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <read_analog_data1+0x2cc>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dfc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8001fa8 <read_analog_data1+0x2a8>
 8001e00:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001e04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e08:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001fb0 <read_analog_data1+0x2b0>
 8001e0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e10:	ed87 7b08 	vstr	d7, [r7, #32]
			adc_data[i + 14] = (uint16_t)temp;
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <read_analog_data1+0x2c0>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	330e      	adds	r3, #14
 8001e1a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e22:	ee17 2a90 	vmov	r2, s15
 8001e26:	b291      	uxth	r1, r2
 8001e28:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <read_analog_data1+0x2b8>)
 8001e2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			adc_data14_curr = adc_data[14];
 8001e2e:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <read_analog_data1+0x2b8>)
 8001e30:	8b9a      	ldrh	r2, [r3, #28]
 8001e32:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <read_analog_data1+0x2d0>)
 8001e34:	801a      	strh	r2, [r3, #0]
	  for(i=0; i<=1; i++)
 8001e36:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <read_analog_data1+0x2c0>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	4b60      	ldr	r3, [pc, #384]	; (8001fc0 <read_analog_data1+0x2c0>)
 8001e40:	801a      	strh	r2, [r3, #0]
 8001e42:	4b5f      	ldr	r3, [pc, #380]	; (8001fc0 <read_analog_data1+0x2c0>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	f67f af7e 	bls.w	8001d48 <read_analog_data1+0x48>
		//if(cnt >= 10000)
		//	cnt = 0;
	  }
		//calculating Supply Current measured from the Current measurement board
		//Using 2000 samples to find the average current consumption
		if(HV1_sample < 50) //50 samples average
 8001e4c:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <read_analog_data1+0x2d4>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	2b31      	cmp	r3, #49	; 0x31
 8001e52:	d819      	bhi.n	8001e88 <read_analog_data1+0x188>
		{
			HV1_sample++;
 8001e54:	4b5f      	ldr	r3, [pc, #380]	; (8001fd4 <read_analog_data1+0x2d4>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <read_analog_data1+0x2d4>)
 8001e5e:	801a      	strh	r2, [r3, #0]
			HV1_readings[HV1_sample] = adc_data[14];
 8001e60:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <read_analog_data1+0x2b8>)
 8001e62:	8b99      	ldrh	r1, [r3, #28]
 8001e64:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <read_analog_data1+0x2d4>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b5b      	ldr	r3, [pc, #364]	; (8001fd8 <read_analog_data1+0x2d8>)
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			HV1_acc = HV1_acc + HV1_readings[HV1_sample];
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <read_analog_data1+0x2d4>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b58      	ldr	r3, [pc, #352]	; (8001fd8 <read_analog_data1+0x2d8>)
 8001e78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <read_analog_data1+0x2dc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <read_analog_data1+0x2dc>)
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e036      	b.n	8001ef6 <read_analog_data1+0x1f6>
		}
		else
		{
			HV1_sample = 0;
 8001e88:	4b52      	ldr	r3, [pc, #328]	; (8001fd4 <read_analog_data1+0x2d4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	801a      	strh	r2, [r3, #0]
			temp_HV1_voltage = (HV1_acc/50);	//50 samples average
 8001e8e:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <read_analog_data1+0x2dc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a53      	ldr	r2, [pc, #332]	; (8001fe0 <read_analog_data1+0x2e0>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ea2:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <read_analog_data1+0x2e4>)
 8001ea4:	ed83 7b00 	vstr	d7, [r3]
			HV1_channel_voltage = (uint16_t)(temp_HV1_voltage);		//Current value in mA - milliamps
 8001ea8:	4b4e      	ldr	r3, [pc, #312]	; (8001fe4 <read_analog_data1+0x2e4>)
 8001eaa:	ed93 7b00 	vldr	d7, [r3]
 8001eae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001eb2:	ee17 3a90 	vmov	r3, s15
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <read_analog_data1+0x2e8>)
 8001eba:	801a      	strh	r2, [r3, #0]
			HV1_channel_adc_counts = (uint16_t)(((float)(HV1_channel_voltage) * 10.0)/(scale_factor_150V));
 8001ebc:	4b4a      	ldr	r3, [pc, #296]	; (8001fe8 <read_analog_data1+0x2e8>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ecc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001ed0:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001ed4:	4b45      	ldr	r3, [pc, #276]	; (8001fec <read_analog_data1+0x2ec>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ede:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ee2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ee6:	ee17 3a90 	vmov	r3, s15
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <read_analog_data1+0x2f0>)
 8001eee:	801a      	strh	r2, [r3, #0]
			HV1_acc = 0;
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <read_analog_data1+0x2dc>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
		}

		if(voltage_capture_count < 1000)
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <read_analog_data1+0x2f4>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001efe:	d20e      	bcs.n	8001f1e <read_analog_data1+0x21e>
		{
			HV1_channel_voltage_capture[voltage_capture_count] = adc_data[14];
 8001f00:	4b3c      	ldr	r3, [pc, #240]	; (8001ff4 <read_analog_data1+0x2f4>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <read_analog_data1+0x2b8>)
 8001f08:	8b99      	ldrh	r1, [r3, #28]
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <read_analog_data1+0x2f8>)
 8001f0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			voltage_capture_count++;
 8001f10:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <read_analog_data1+0x2f4>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	4b36      	ldr	r3, [pc, #216]	; (8001ff4 <read_analog_data1+0x2f4>)
 8001f1a:	801a      	strh	r2, [r3, #0]
 8001f1c:	e002      	b.n	8001f24 <read_analog_data1+0x224>
		}
		else
		{
			voltage_capture_count = 0;
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <read_analog_data1+0x2f4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	801a      	strh	r2, [r3, #0]
		}

		// Finding the Fall time (Open time) and then the Slew rate in V/microsecond
		if(Measure_fall_time)
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <read_analog_data1+0x2fc>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00f      	beq.n	8001f4c <read_analog_data1+0x24c>
		{
			if(adc_data14_prev > 9300 && adc_data14_curr < 9300)
 8001f2c:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <read_analog_data1+0x2bc>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	f242 4254 	movw	r2, #9300	; 0x2454
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d90c      	bls.n	8001f52 <read_analog_data1+0x252>
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <read_analog_data1+0x2d0>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	f242 4253 	movw	r2, #9299	; 0x2453
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d806      	bhi.n	8001f52 <read_analog_data1+0x252>
			{
				start_falltime_counter = 1;
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <read_analog_data1+0x300>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	e002      	b.n	8001f52 <read_analog_data1+0x252>
			}
		}
		else
		{
			start_falltime_counter = 0;
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <read_analog_data1+0x300>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	801a      	strh	r2, [r3, #0]
		}

		if(Measure_fall_time && start_falltime_counter)
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <read_analog_data1+0x2fc>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d011      	beq.n	8001f7e <read_analog_data1+0x27e>
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <read_analog_data1+0x300>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <read_analog_data1+0x27e>
		{
			if((adc_data14_prev) > 200 && (adc_data14_curr < 200))
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <read_analog_data1+0x2bc>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2bc8      	cmp	r3, #200	; 0xc8
 8001f68:	d909      	bls.n	8001f7e <read_analog_data1+0x27e>
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <read_analog_data1+0x2d0>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	2bc7      	cmp	r3, #199	; 0xc7
 8001f70:	d805      	bhi.n	8001f7e <read_analog_data1+0x27e>
			{
				start_falltime_counter = 0;
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <read_analog_data1+0x300>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	801a      	strh	r2, [r3, #0]
				Measure_fall_time = 0;
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <read_analog_data1+0x2fc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	801a      	strh	r2, [r3, #0]
			}
		}

		// Finding the Rise time (Close time) and then the Slew rate in V/microsecond
		if(Measure_rise_time)
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <read_analog_data1+0x304>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d042      	beq.n	800200c <read_analog_data1+0x30c>
		{
			if(adc_data14_prev < 200 && adc_data14_curr > 200)
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <read_analog_data1+0x2bc>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	2bc7      	cmp	r3, #199	; 0xc7
 8001f8c:	d841      	bhi.n	8002012 <read_analog_data1+0x312>
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <read_analog_data1+0x2d0>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	2bc8      	cmp	r3, #200	; 0xc8
 8001f94:	d93d      	bls.n	8002012 <read_analog_data1+0x312>
			{
				start_risetime_counter = 1;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <read_analog_data1+0x308>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	801a      	strh	r2, [r3, #0]
 8001f9c:	e039      	b.n	8002012 <read_analog_data1+0x312>
 8001f9e:	bf00      	nop
 8001fa0:	4765195f 	.word	0x4765195f
 8001fa4:	3ea77cf4 	.word	0x3ea77cf4
 8001fa8:	f34d6a16 	.word	0xf34d6a16
 8001fac:	3fcc538e 	.word	0x3fcc538e
 8001fb0:	c49ba5e3 	.word	0xc49ba5e3
 8001fb4:	4052a820 	.word	0x4052a820
 8001fb8:	24000a08 	.word	0x24000a08
 8001fbc:	240032ce 	.word	0x240032ce
 8001fc0:	24003396 	.word	0x24003396
 8001fc4:	240004c8 	.word	0x240004c8
 8001fc8:	24000884 	.word	0x24000884
 8001fcc:	240032c8 	.word	0x240032c8
 8001fd0:	240032d0 	.word	0x240032d0
 8001fd4:	24001378 	.word	0x24001378
 8001fd8:	2400137c 	.word	0x2400137c
 8001fdc:	240032bc 	.word	0x240032bc
 8001fe0:	51eb851f 	.word	0x51eb851f
 8001fe4:	240032c0 	.word	0x240032c0
 8001fe8:	24000a74 	.word	0x24000a74
 8001fec:	24000000 	.word	0x24000000
 8001ff0:	24000a76 	.word	0x24000a76
 8001ff4:	240032cc 	.word	0x240032cc
 8001ff8:	24000a78 	.word	0x24000a78
 8001ffc:	24001374 	.word	0x24001374
 8002000:	24001368 	.word	0x24001368
 8002004:	24001376 	.word	0x24001376
 8002008:	2400136c 	.word	0x2400136c
			}
		}
		else
		{
			start_risetime_counter = 0;
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <read_analog_data1+0x350>)
 800200e:	2200      	movs	r2, #0
 8002010:	801a      	strh	r2, [r3, #0]
		}

		if(Measure_rise_time && start_risetime_counter)
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <read_analog_data1+0x354>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d015      	beq.n	8002046 <read_analog_data1+0x346>
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <read_analog_data1+0x350>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d011      	beq.n	8002046 <read_analog_data1+0x346>
		{
			if((adc_data14_prev) < 9300 && (adc_data14_curr > 9300))
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <read_analog_data1+0x358>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f242 4253 	movw	r2, #9299	; 0x2453
 800202a:	4293      	cmp	r3, r2
 800202c:	d80b      	bhi.n	8002046 <read_analog_data1+0x346>
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <read_analog_data1+0x35c>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	f242 4254 	movw	r2, #9300	; 0x2454
 8002036:	4293      	cmp	r3, r2
 8002038:	d905      	bls.n	8002046 <read_analog_data1+0x346>
			{
				start_risetime_counter = 0;
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <read_analog_data1+0x350>)
 800203c:	2200      	movs	r2, #0
 800203e:	801a      	strh	r2, [r3, #0]
				Measure_rise_time = 0;
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <read_analog_data1+0x354>)
 8002042:	2200      	movs	r2, #0
 8002044:	801a      	strh	r2, [r3, #0]
			}
		}
}
 8002046:	bf00      	nop
 8002048:	373c      	adds	r7, #60	; 0x3c
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	bf00      	nop
 8002050:	2400136c 	.word	0x2400136c
 8002054:	24001376 	.word	0x24001376
 8002058:	240032ce 	.word	0x240032ce
 800205c:	240032d0 	.word	0x240032d0

08002060 <update_led>:


void update_led(int toggle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

	if(toggle) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <update_led+0x1c>
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);	// RED LED
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // GREEN LED
 800206e:	2201      	movs	r2, #1
 8002070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002074:	4806      	ldr	r0, [pc, #24]	; (8002090 <update_led+0x30>)
 8002076:	f005 fe9f 	bl	8007db8 <HAL_GPIO_WritePin>
	else {
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); // RED LED
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // GREEN LED
		//ClearOutputs();
	}
}
 800207a:	e005      	b.n	8002088 <update_led+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // GREEN LED
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002082:	4803      	ldr	r0, [pc, #12]	; (8002090 <update_led+0x30>)
 8002084:	f005 fe98 	bl	8007db8 <HAL_GPIO_WritePin>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	58020000 	.word	0x58020000

08002094 <change_uut_state>:
}



void change_uut_state(void *data)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

	uut_protocol_state = UUT_SYNC_STATE;
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <change_uut_state+0x20>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	send_uut_command = 1;
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <change_uut_state+0x24>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]

}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	24003331 	.word	0x24003331
 80020b8:	24001308 	.word	0x24001308

080020bc <clear_uut_data>:

void clear_uut_data(void *data)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]

	if(clear_data) {
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <clear_uut_data+0x5c>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01b      	beq.n	8002108 <clear_uut_data+0x4c>
		uut_sw_ver = 0;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <clear_uut_data+0x60>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	801a      	strh	r2, [r3, #0]
		uut_hw_ver = 0;
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <clear_uut_data+0x64>)
 80020d8:	2200      	movs	r2, #0
 80020da:	801a      	strh	r2, [r3, #0]
		uut_eeprom_status = EEPROM_TEST_IN_PROGRESS;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <clear_uut_data+0x68>)
 80020de:	2200      	movs	r2, #0
 80020e0:	801a      	strh	r2, [r3, #0]
		uut_dig_in = 0;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <clear_uut_data+0x6c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	801a      	strh	r2, [r3, #0]

		for(i=0; i<12; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e007      	b.n	80020fe <clear_uut_data+0x42>
			uut_ana[i] = 0x00;
 80020ee:	4a0f      	ldr	r2, [pc, #60]	; (800212c <clear_uut_data+0x70>)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2100      	movs	r1, #0
 80020f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(i=0; i<12; i++)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b0b      	cmp	r3, #11
 8002102:	ddf4      	ble.n	80020ee <clear_uut_data+0x32>

		//clear Pico 2.1 vale board uut data
		clear_pico_valve_data();
 8002104:	f000 f814 	bl	8002130 <clear_pico_valve_data>
	}

	clear_data = 0;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <clear_uut_data+0x5c>)
 800210a:	2200      	movs	r2, #0
 800210c:	801a      	strh	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	240032d6 	.word	0x240032d6
 800211c:	240032d2 	.word	0x240032d2
 8002120:	240032d4 	.word	0x240032d4
 8002124:	24000a62 	.word	0x24000a62
 8002128:	24000a60 	.word	0x24000a60
 800212c:	24000a48 	.word	0x24000a48

08002130 <clear_pico_valve_data>:

//clear Pico 2.1 vale board uut data
void clear_pico_valve_data(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
	pico_sw_version = 0;
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <clear_pico_valve_data+0x70>)
 8002136:	2200      	movs	r2, #0
 8002138:	801a      	strh	r2, [r3, #0]
	pico_hw_version = 0;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <clear_pico_valve_data+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	801a      	strh	r2, [r3, #0]
	green_led_flag = 0;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <clear_pico_valve_data+0x78>)
 8002142:	2200      	movs	r2, #0
 8002144:	801a      	strh	r2, [r3, #0]
	red_led_flag = 0;
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <clear_pico_valve_data+0x7c>)
 8002148:	2200      	movs	r2, #0
 800214a:	801a      	strh	r2, [r3, #0]
	stack_rtd_offset = 0;
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <clear_pico_valve_data+0x80>)
 800214e:	2200      	movs	r2, #0
 8002150:	801a      	strh	r2, [r3, #0]
	stack_rtd_scale_factor = 0;
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <clear_pico_valve_data+0x84>)
 8002154:	2200      	movs	r2, #0
 8002156:	801a      	strh	r2, [r3, #0]
	stack_rtd_counts = 0;
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <clear_pico_valve_data+0x88>)
 800215a:	2200      	movs	r2, #0
 800215c:	801a      	strh	r2, [r3, #0]
	heater_rtd_offset = 0;
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <clear_pico_valve_data+0x8c>)
 8002160:	2200      	movs	r2, #0
 8002162:	801a      	strh	r2, [r3, #0]
	heater_rtd_scale_factor = 0;
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <clear_pico_valve_data+0x90>)
 8002166:	2200      	movs	r2, #0
 8002168:	801a      	strh	r2, [r3, #0]
	heater_rtd_counts = 0;
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <clear_pico_valve_data+0x94>)
 800216c:	2200      	movs	r2, #0
 800216e:	801a      	strh	r2, [r3, #0]
	hall_offset = 0;
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <clear_pico_valve_data+0x98>)
 8002172:	2200      	movs	r2, #0
 8002174:	801a      	strh	r2, [r3, #0]
	hall_gain = 0;
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <clear_pico_valve_data+0x9c>)
 8002178:	2200      	movs	r2, #0
 800217a:	801a      	strh	r2, [r3, #0]
	hall_counts = 0;
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <clear_pico_valve_data+0xa0>)
 800217e:	2200      	movs	r2, #0
 8002180:	801a      	strh	r2, [r3, #0]
	heater_flag = 0;
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <clear_pico_valve_data+0xa4>)
 8002184:	2200      	movs	r2, #0
 8002186:	801a      	strh	r2, [r3, #0]
	pico_board_supply_amps = 0;
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <clear_pico_valve_data+0xa8>)
 800218a:	2200      	movs	r2, #0
 800218c:	801a      	strh	r2, [r3, #0]
	pico_board_supply_power = 0;
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <clear_pico_valve_data+0xac>)
 8002190:	2200      	movs	r2, #0
 8002192:	801a      	strh	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	240032f6 	.word	0x240032f6
 80021a4:	240032f8 	.word	0x240032f8
 80021a8:	240032fa 	.word	0x240032fa
 80021ac:	240032fc 	.word	0x240032fc
 80021b0:	240032fe 	.word	0x240032fe
 80021b4:	24003306 	.word	0x24003306
 80021b8:	24003300 	.word	0x24003300
 80021bc:	24003308 	.word	0x24003308
 80021c0:	2400330c 	.word	0x2400330c
 80021c4:	2400330a 	.word	0x2400330a
 80021c8:	24003318 	.word	0x24003318
 80021cc:	2400331a 	.word	0x2400331a
 80021d0:	24003312 	.word	0x24003312
 80021d4:	2400331c 	.word	0x2400331c
 80021d8:	2400331e 	.word	0x2400331e
 80021dc:	24003320 	.word	0x24003320

080021e0 <set_clear_relay_output>:

void set_clear_relay_output(void *data)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	int i;
	int bit;
	uint16_t *val;

	bit = 1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
	val = (int *)data;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < 12; i++) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e027      	b.n	8002246 <set_clear_relay_output+0x66>
		if (*val & bit)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00d      	beq.n	8002220 <set_clear_relay_output+0x40>
			HAL_GPIO_WritePin(relay_map[i].port, relay_map[i].pin, GPIO_PIN_SET);
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <set_clear_relay_output+0x78>)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <set_clear_relay_output+0x78>)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	889b      	ldrh	r3, [r3, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	4619      	mov	r1, r3
 800221a:	f005 fdcd 	bl	8007db8 <HAL_GPIO_WritePin>
 800221e:	e00c      	b.n	800223a <set_clear_relay_output+0x5a>
		else
			HAL_GPIO_WritePin(relay_map[i].port, relay_map[i].pin, GPIO_PIN_RESET);
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <set_clear_relay_output+0x78>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002228:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <set_clear_relay_output+0x78>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	889b      	ldrh	r3, [r3, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	4619      	mov	r1, r3
 8002236:	f005 fdbf 	bl	8007db8 <HAL_GPIO_WritePin>
		bit <<= 1;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 12; i++) {
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3301      	adds	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b0b      	cmp	r3, #11
 800224a:	ddd4      	ble.n	80021f6 <set_clear_relay_output+0x16>
	}

}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	0800f864 	.word	0x0800f864

0800225c <set_clear_v33_output>:


void set_clear_v33_output(void *data)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	int i;
	int bit;
	int *val;

	bit = 1;
 8002264:	2301      	movs	r3, #1
 8002266:	613b      	str	r3, [r7, #16]
	val = (int *)data;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < 12; i++) {
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e026      	b.n	80022c0 <set_clear_v33_output+0x64>
		if (*val & bit)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <set_clear_v33_output+0x3e>
			HAL_GPIO_WritePin(v33_dig_out_map[i].port, v33_dig_out_map[i].pin, GPIO_PIN_SET);
 800227e:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <set_clear_v33_output+0x74>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <set_clear_v33_output+0x74>)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	889b      	ldrh	r3, [r3, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	4619      	mov	r1, r3
 8002294:	f005 fd90 	bl	8007db8 <HAL_GPIO_WritePin>
 8002298:	e00c      	b.n	80022b4 <set_clear_v33_output+0x58>
		else
			HAL_GPIO_WritePin(v33_dig_out_map[i].port, v33_dig_out_map[i].pin, GPIO_PIN_RESET);
 800229a:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <set_clear_v33_output+0x74>)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <set_clear_v33_output+0x74>)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	889b      	ldrh	r3, [r3, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	f005 fd82 	bl	8007db8 <HAL_GPIO_WritePin>
		bit <<= 1;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 12; i++) {
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b0b      	cmp	r3, #11
 80022c4:	ddd5      	ble.n	8002272 <set_clear_v33_output+0x16>
	}

}
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	0800f8c4 	.word	0x0800f8c4

080022d4 <set_clear_v33diff_output>:

void set_clear_v33diff_output(void *data)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	int i;
	int bit;
	int *val;

	bit = 1;
 80022dc:	2301      	movs	r3, #1
 80022de:	613b      	str	r3, [r7, #16]
	val = (int *)data;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < 4; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e026      	b.n	8002338 <set_clear_v33diff_output+0x64>
		if (*val & bit)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <set_clear_v33diff_output+0x3e>
			HAL_GPIO_WritePin(v33_diff_out_map[i].port, v33_diff_out_map[i].pin, GPIO_PIN_SET);
 80022f6:	4a14      	ldr	r2, [pc, #80]	; (8002348 <set_clear_v33diff_output+0x74>)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <set_clear_v33diff_output+0x74>)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	889b      	ldrh	r3, [r3, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	4619      	mov	r1, r3
 800230c:	f005 fd54 	bl	8007db8 <HAL_GPIO_WritePin>
 8002310:	e00c      	b.n	800232c <set_clear_v33diff_output+0x58>
		else
			HAL_GPIO_WritePin(v33_diff_out_map[i].port, v33_diff_out_map[i].pin, GPIO_PIN_RESET);
 8002312:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <set_clear_v33diff_output+0x74>)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <set_clear_v33diff_output+0x74>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	889b      	ldrh	r3, [r3, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	4619      	mov	r1, r3
 8002328:	f005 fd46 	bl	8007db8 <HAL_GPIO_WritePin>
		bit <<= 1;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 4; i++) {
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3301      	adds	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b03      	cmp	r3, #3
 800233c:	ddd5      	ble.n	80022ea <set_clear_v33diff_output+0x16>
	}

}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	0800f924 	.word	0x0800f924

0800234c <set_clear_v24_source_output>:


void set_clear_v24_source_output(void *data)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	int i;
	int bit;
	int *val;

	bit = 1;
 8002354:	2301      	movs	r3, #1
 8002356:	613b      	str	r3, [r7, #16]
	val = (int *)data;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < 8; i++) {
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	e026      	b.n	80023b0 <set_clear_v24_source_output+0x64>
		if (*val & bit)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00d      	beq.n	800238a <set_clear_v24_source_output+0x3e>
			HAL_GPIO_WritePin(v24_source_out_map[i].port, v24_source_out_map[i].pin, GPIO_PIN_SET);
 800236e:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <set_clear_v24_source_output+0x74>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002376:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <set_clear_v24_source_output+0x74>)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	889b      	ldrh	r3, [r3, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	4619      	mov	r1, r3
 8002384:	f005 fd18 	bl	8007db8 <HAL_GPIO_WritePin>
 8002388:	e00c      	b.n	80023a4 <set_clear_v24_source_output+0x58>
		else
			HAL_GPIO_WritePin(v24_source_out_map[i].port, v24_source_out_map[i].pin, GPIO_PIN_RESET);
 800238a:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <set_clear_v24_source_output+0x74>)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <set_clear_v24_source_output+0x74>)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	889b      	ldrh	r3, [r3, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	4619      	mov	r1, r3
 80023a0:	f005 fd0a 	bl	8007db8 <HAL_GPIO_WritePin>
		bit <<= 1;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 8; i++) {
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b07      	cmp	r3, #7
 80023b4:	ddd5      	ble.n	8002362 <set_clear_v24_source_output+0x16>
	}

}
 80023b6:	bf00      	nop
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	0800f944 	.word	0x0800f944

080023c4 <update_analog_output1>:

}
*/

void update_analog_output1(void *data)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
		spi_data[0] = 0x71;    //Channel B
 80023cc:	4bb1      	ldr	r3, [pc, #708]	; (8002694 <update_analog_output1+0x2d0>)
 80023ce:	2271      	movs	r2, #113	; 0x71
 80023d0:	701a      	strb	r2, [r3, #0]
		//spi_data[0] = 0x1F;        // Both Channels
		spi_data[1] = 0; //(uint8_t)((Analog_output[1] & 0xFF00)>>8);
 80023d2:	4bb0      	ldr	r3, [pc, #704]	; (8002694 <update_analog_output1+0x2d0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	705a      	strb	r2, [r3, #1]
		spi_data[2] = 0; //(uint8_t)(Analog_output[1] & 0x00FF);
 80023d8:	4bae      	ldr	r3, [pc, #696]	; (8002694 <update_analog_output1+0x2d0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	709a      	strb	r2, [r3, #2]

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e4:	48ac      	ldr	r0, [pc, #688]	; (8002698 <update_analog_output1+0x2d4>)
 80023e6:	f005 fce7 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 80023ea:	2032      	movs	r0, #50	; 0x32
 80023ec:	f002 fe74 	bl	80050d8 <HAL_Delay>

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023f6:	48a8      	ldr	r0, [pc, #672]	; (8002698 <update_analog_output1+0x2d4>)
 80023f8:	f005 fcde 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80023fc:	2032      	movs	r0, #50	; 0x32
 80023fe:	f002 fe6b 	bl	80050d8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002408:	48a3      	ldr	r0, [pc, #652]	; (8002698 <update_analog_output1+0x2d4>)
 800240a:	f005 fcd5 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800240e:	2032      	movs	r0, #50	; 0x32
 8002410:	f002 fe62 	bl	80050d8 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 8002414:	f241 3388 	movw	r3, #5000	; 0x1388
 8002418:	2203      	movs	r2, #3
 800241a:	499e      	ldr	r1, [pc, #632]	; (8002694 <update_analog_output1+0x2d0>)
 800241c:	489f      	ldr	r0, [pc, #636]	; (800269c <update_analog_output1+0x2d8>)
 800241e:	f009 fb27 	bl	800ba70 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002428:	489b      	ldr	r0, [pc, #620]	; (8002698 <update_analog_output1+0x2d4>)
 800242a:	f005 fcc5 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800242e:	2032      	movs	r0, #50	; 0x32
 8002430:	f002 fe52 	bl	80050d8 <HAL_Delay>

		spi_data[0] = 0x71;    //Channel B
 8002434:	4b97      	ldr	r3, [pc, #604]	; (8002694 <update_analog_output1+0x2d0>)
 8002436:	2271      	movs	r2, #113	; 0x71
 8002438:	701a      	strb	r2, [r3, #0]
		//spi_data[0] = 0x1F;        // Both Channels
		spi_data[1] = 0; //(uint8_t)((Analog_output[1] & 0xFF00)>>8);
 800243a:	4b96      	ldr	r3, [pc, #600]	; (8002694 <update_analog_output1+0x2d0>)
 800243c:	2200      	movs	r2, #0
 800243e:	705a      	strb	r2, [r3, #1]
		spi_data[2] = 0; //(uint8_t)(Analog_output[1] & 0x00FF);
 8002440:	4b94      	ldr	r3, [pc, #592]	; (8002694 <update_analog_output1+0x2d0>)
 8002442:	2200      	movs	r2, #0
 8002444:	709a      	strb	r2, [r3, #2]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
 8002446:	2201      	movs	r2, #1
 8002448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800244c:	4892      	ldr	r0, [pc, #584]	; (8002698 <update_analog_output1+0x2d4>)
 800244e:	f005 fcb3 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002452:	2032      	movs	r0, #50	; 0x32
 8002454:	f002 fe40 	bl	80050d8 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800245e:	488e      	ldr	r0, [pc, #568]	; (8002698 <update_analog_output1+0x2d4>)
 8002460:	f005 fcaa 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002464:	2032      	movs	r0, #50	; 0x32
 8002466:	f002 fe37 	bl	80050d8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002470:	4889      	ldr	r0, [pc, #548]	; (8002698 <update_analog_output1+0x2d4>)
 8002472:	f005 fca1 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002476:	2032      	movs	r0, #50	; 0x32
 8002478:	f002 fe2e 	bl	80050d8 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 800247c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002480:	2203      	movs	r2, #3
 8002482:	4984      	ldr	r1, [pc, #528]	; (8002694 <update_analog_output1+0x2d0>)
 8002484:	4885      	ldr	r0, [pc, #532]	; (800269c <update_analog_output1+0x2d8>)
 8002486:	f009 faf3 	bl	800ba70 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800248a:	2201      	movs	r2, #1
 800248c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002490:	4881      	ldr	r0, [pc, #516]	; (8002698 <update_analog_output1+0x2d4>)
 8002492:	f005 fc91 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002496:	2032      	movs	r0, #50	; 0x32
 8002498:	f002 fe1e 	bl	80050d8 <HAL_Delay>

		spi_data[0] = 0x18;    //Channel A
 800249c:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <update_analog_output1+0x2d0>)
 800249e:	2218      	movs	r2, #24
 80024a0:	701a      	strb	r2, [r3, #0]
		//spi_data[0] = 0x1F;        // Both Channels
		spi_data[1] = (uint8_t)((Analog_output[0] & 0xFF00)>>8);
 80024a2:	4b7f      	ldr	r3, [pc, #508]	; (80026a0 <update_analog_output1+0x2dc>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b79      	ldr	r3, [pc, #484]	; (8002694 <update_analog_output1+0x2d0>)
 80024ae:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (uint8_t)(Analog_output[0] & 0x00FF);
 80024b0:	4b7b      	ldr	r3, [pc, #492]	; (80026a0 <update_analog_output1+0x2dc>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b77      	ldr	r3, [pc, #476]	; (8002694 <update_analog_output1+0x2d0>)
 80024b8:	709a      	strb	r2, [r3, #2]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
 80024ba:	2201      	movs	r2, #1
 80024bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024c0:	4875      	ldr	r0, [pc, #468]	; (8002698 <update_analog_output1+0x2d4>)
 80024c2:	f005 fc79 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80024c6:	2032      	movs	r0, #50	; 0x32
 80024c8:	f002 fe06 	bl	80050d8 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024d2:	4871      	ldr	r0, [pc, #452]	; (8002698 <update_analog_output1+0x2d4>)
 80024d4:	f005 fc70 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80024d8:	2032      	movs	r0, #50	; 0x32
 80024da:	f002 fdfd 	bl	80050d8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e4:	486c      	ldr	r0, [pc, #432]	; (8002698 <update_analog_output1+0x2d4>)
 80024e6:	f005 fc67 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80024ea:	2032      	movs	r0, #50	; 0x32
 80024ec:	f002 fdf4 	bl	80050d8 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 80024f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80024f4:	2203      	movs	r2, #3
 80024f6:	4967      	ldr	r1, [pc, #412]	; (8002694 <update_analog_output1+0x2d0>)
 80024f8:	4868      	ldr	r0, [pc, #416]	; (800269c <update_analog_output1+0x2d8>)
 80024fa:	f009 fab9 	bl	800ba70 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002504:	4864      	ldr	r0, [pc, #400]	; (8002698 <update_analog_output1+0x2d4>)
 8002506:	f005 fc57 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800250a:	2032      	movs	r0, #50	; 0x32
 800250c:	f002 fde4 	bl	80050d8 <HAL_Delay>

		spi_data[0] = 0x18;    //Channel A
 8002510:	4b60      	ldr	r3, [pc, #384]	; (8002694 <update_analog_output1+0x2d0>)
 8002512:	2218      	movs	r2, #24
 8002514:	701a      	strb	r2, [r3, #0]
		//spi_data[0] = 0x1F;        // Both Channels
		spi_data[1] = (uint8_t)((Analog_output[0] & 0xFF00)>>8);
 8002516:	4b62      	ldr	r3, [pc, #392]	; (80026a0 <update_analog_output1+0x2dc>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	b29b      	uxth	r3, r3
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <update_analog_output1+0x2d0>)
 8002522:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (uint8_t)(Analog_output[0] & 0x00FF);
 8002524:	4b5e      	ldr	r3, [pc, #376]	; (80026a0 <update_analog_output1+0x2dc>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <update_analog_output1+0x2d0>)
 800252c:	709a      	strb	r2, [r3, #2]

	   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
	   // HAL_Delay(50);

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002534:	4858      	ldr	r0, [pc, #352]	; (8002698 <update_analog_output1+0x2d4>)
 8002536:	f005 fc3f 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f002 fdcc 	bl	80050d8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002546:	4854      	ldr	r0, [pc, #336]	; (8002698 <update_analog_output1+0x2d4>)
 8002548:	f005 fc36 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800254c:	2032      	movs	r0, #50	; 0x32
 800254e:	f002 fdc3 	bl	80050d8 <HAL_Delay>
		HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 8002552:	f241 3388 	movw	r3, #5000	; 0x1388
 8002556:	2203      	movs	r2, #3
 8002558:	494e      	ldr	r1, [pc, #312]	; (8002694 <update_analog_output1+0x2d0>)
 800255a:	4850      	ldr	r0, [pc, #320]	; (800269c <update_analog_output1+0x2d8>)
 800255c:	f009 fa88 	bl	800ba70 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002560:	2201      	movs	r2, #1
 8002562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002566:	484c      	ldr	r0, [pc, #304]	; (8002698 <update_analog_output1+0x2d4>)
 8002568:	f005 fc26 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800256c:	2032      	movs	r0, #50	; 0x32
 800256e:	f002 fdb3 	bl	80050d8 <HAL_Delay>

		spi_data[0] = 0x19;    //Channel B
 8002572:	4b48      	ldr	r3, [pc, #288]	; (8002694 <update_analog_output1+0x2d0>)
 8002574:	2219      	movs	r2, #25
 8002576:	701a      	strb	r2, [r3, #0]
	    //spi_data[0] = 0x19;    //Channel B
	    //spi_data[0] = 0x1F;        // Both Channels
	    spi_data[1] = 0; //(uint8_t)((Analog_output[1]&0xFF00)>>8);
 8002578:	4b46      	ldr	r3, [pc, #280]	; (8002694 <update_analog_output1+0x2d0>)
 800257a:	2200      	movs	r2, #0
 800257c:	705a      	strb	r2, [r3, #1]
	    spi_data[2] = 0; //(uint8_t)(Analog_output[1]& 0x00FF);
 800257e:	4b45      	ldr	r3, [pc, #276]	; (8002694 <update_analog_output1+0x2d0>)
 8002580:	2200      	movs	r2, #0
 8002582:	709a      	strb	r2, [r3, #2]

	   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
	   // HAL_Delay(50);

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002584:	2201      	movs	r2, #1
 8002586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800258a:	4843      	ldr	r0, [pc, #268]	; (8002698 <update_analog_output1+0x2d4>)
 800258c:	f005 fc14 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 8002590:	2032      	movs	r0, #50	; 0x32
 8002592:	f002 fda1 	bl	80050d8 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
 8002598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800259c:	483e      	ldr	r0, [pc, #248]	; (8002698 <update_analog_output1+0x2d4>)
 800259e:	f005 fc0b 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 80025a2:	2032      	movs	r0, #50	; 0x32
 80025a4:	f002 fd98 	bl	80050d8 <HAL_Delay>
	    HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 80025a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80025ac:	2203      	movs	r2, #3
 80025ae:	4939      	ldr	r1, [pc, #228]	; (8002694 <update_analog_output1+0x2d0>)
 80025b0:	483a      	ldr	r0, [pc, #232]	; (800269c <update_analog_output1+0x2d8>)
 80025b2:	f009 fa5d 	bl	800ba70 <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80025b6:	2201      	movs	r2, #1
 80025b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025bc:	4836      	ldr	r0, [pc, #216]	; (8002698 <update_analog_output1+0x2d4>)
 80025be:	f005 fbfb 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 80025c2:	2032      	movs	r0, #50	; 0x32
 80025c4:	f002 fd88 	bl	80050d8 <HAL_Delay>

		spi_data[0] = 0x19;    //Channel B
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <update_analog_output1+0x2d0>)
 80025ca:	2219      	movs	r2, #25
 80025cc:	701a      	strb	r2, [r3, #0]
	    //spi_data[0] = 0x19;    //Channel B
	    //spi_data[0] = 0x1F;        // Both Channels
	    spi_data[1] = (uint8_t)((Analog_output[1] & 0xFF00)>>8);
 80025ce:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <update_analog_output1+0x2dc>)
 80025d0:	885b      	ldrh	r3, [r3, #2]
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <update_analog_output1+0x2d0>)
 80025da:	705a      	strb	r2, [r3, #1]
	    spi_data[2] = (uint8_t)(Analog_output[1] & 0x00FF);
 80025dc:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <update_analog_output1+0x2dc>)
 80025de:	885b      	ldrh	r3, [r3, #2]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <update_analog_output1+0x2d0>)
 80025e4:	709a      	strb	r2, [r3, #2]

	   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
	   // HAL_Delay(50);

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80025e6:	2201      	movs	r2, #1
 80025e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ec:	482a      	ldr	r0, [pc, #168]	; (8002698 <update_analog_output1+0x2d4>)
 80025ee:	f005 fbe3 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 80025f2:	2032      	movs	r0, #50	; 0x32
 80025f4:	f002 fd70 	bl	80050d8 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025fe:	4826      	ldr	r0, [pc, #152]	; (8002698 <update_analog_output1+0x2d4>)
 8002600:	f005 fbda 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 8002604:	2032      	movs	r0, #50	; 0x32
 8002606:	f002 fd67 	bl	80050d8 <HAL_Delay>
	    HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 800260a:	f241 3388 	movw	r3, #5000	; 0x1388
 800260e:	2203      	movs	r2, #3
 8002610:	4920      	ldr	r1, [pc, #128]	; (8002694 <update_analog_output1+0x2d0>)
 8002612:	4822      	ldr	r0, [pc, #136]	; (800269c <update_analog_output1+0x2d8>)
 8002614:	f009 fa2c 	bl	800ba70 <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800261e:	481e      	ldr	r0, [pc, #120]	; (8002698 <update_analog_output1+0x2d4>)
 8002620:	f005 fbca 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 8002624:	2032      	movs	r0, #50	; 0x32
 8002626:	f002 fd57 	bl	80050d8 <HAL_Delay>


		spi_data[0] = 0x19;    //Channel B
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <update_analog_output1+0x2d0>)
 800262c:	2219      	movs	r2, #25
 800262e:	701a      	strb	r2, [r3, #0]
	    //spi_data[0] = 0x19;    //Channel B
	    //spi_data[0] = 0x1F;        // Both Channels
	    spi_data[1] = (uint8_t)((Analog_output[1] & 0xFF00)>>8);
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <update_analog_output1+0x2dc>)
 8002632:	885b      	ldrh	r3, [r3, #2]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	b29b      	uxth	r3, r3
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <update_analog_output1+0x2d0>)
 800263c:	705a      	strb	r2, [r3, #1]
	    spi_data[2] = (uint8_t)(Analog_output[1] & 0x00FF);
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <update_analog_output1+0x2dc>)
 8002640:	885b      	ldrh	r3, [r3, #2]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <update_analog_output1+0x2d0>)
 8002646:	709a      	strb	r2, [r3, #2]

	  //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
	  //  HAL_Delay(50);

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002648:	2201      	movs	r2, #1
 800264a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800264e:	4812      	ldr	r0, [pc, #72]	; (8002698 <update_analog_output1+0x2d4>)
 8002650:	f005 fbb2 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 8002654:	2032      	movs	r0, #50	; 0x32
 8002656:	f002 fd3f 	bl	80050d8 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002660:	480d      	ldr	r0, [pc, #52]	; (8002698 <update_analog_output1+0x2d4>)
 8002662:	f005 fba9 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 8002666:	2032      	movs	r0, #50	; 0x32
 8002668:	f002 fd36 	bl	80050d8 <HAL_Delay>
	    HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 800266c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002670:	2203      	movs	r2, #3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <update_analog_output1+0x2d0>)
 8002674:	4809      	ldr	r0, [pc, #36]	; (800269c <update_analog_output1+0x2d8>)
 8002676:	f009 f9fb 	bl	800ba70 <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002680:	4805      	ldr	r0, [pc, #20]	; (8002698 <update_analog_output1+0x2d4>)
 8002682:	f005 fb99 	bl	8007db8 <HAL_GPIO_WritePin>
	    HAL_Delay(50);
 8002686:	2032      	movs	r0, #50	; 0x32
 8002688:	f002 fd26 	bl	80050d8 <HAL_Delay>
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	240012fc 	.word	0x240012fc
 8002698:	58020400 	.word	0x58020400
 800269c:	2400052c 	.word	0x2400052c
 80026a0:	24000a68 	.word	0x24000a68

080026a4 <update_analog_output>:

void update_analog_output(void *data)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	//if(Analog_output[0] >= 3800)
	//	Analog_output[0] = 3800;	// This count gives 0.608 Volts
	//if(Analog_output[1] >= 3800)
	//	Analog_output[1] = 3800;	// This count gives 0.608 Volts

	spi_data[0] = 0x71;    //Channel B
 80026ac:	4bb1      	ldr	r3, [pc, #708]	; (8002974 <update_analog_output+0x2d0>)
 80026ae:	2271      	movs	r2, #113	; 0x71
 80026b0:	701a      	strb	r2, [r3, #0]
	//spi_data[0] = 0x1F;        // Both Channels
	spi_data[1] = 0; //(uint8_t)((Analog_output[1] & 0xFF00)>>8);
 80026b2:	4bb0      	ldr	r3, [pc, #704]	; (8002974 <update_analog_output+0x2d0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	705a      	strb	r2, [r3, #1]
	spi_data[2] = 0; //(uint8_t)(Analog_output[1] & 0x00FF);
 80026b8:	4bae      	ldr	r3, [pc, #696]	; (8002974 <update_analog_output+0x2d0>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	709a      	strb	r2, [r3, #2]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
 80026be:	2201      	movs	r2, #1
 80026c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026c4:	48ac      	ldr	r0, [pc, #688]	; (8002978 <update_analog_output+0x2d4>)
 80026c6:	f005 fb77 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80026ca:	2032      	movs	r0, #50	; 0x32
 80026cc:	f002 fd04 	bl	80050d8 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80026d0:	2201      	movs	r2, #1
 80026d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026d6:	48a8      	ldr	r0, [pc, #672]	; (8002978 <update_analog_output+0x2d4>)
 80026d8:	f005 fb6e 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80026dc:	2032      	movs	r0, #50	; 0x32
 80026de:	f002 fcfb 	bl	80050d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026e8:	48a3      	ldr	r0, [pc, #652]	; (8002978 <update_analog_output+0x2d4>)
 80026ea:	f005 fb65 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80026ee:	2032      	movs	r0, #50	; 0x32
 80026f0:	f002 fcf2 	bl	80050d8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 80026f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80026f8:	2203      	movs	r2, #3
 80026fa:	499e      	ldr	r1, [pc, #632]	; (8002974 <update_analog_output+0x2d0>)
 80026fc:	489f      	ldr	r0, [pc, #636]	; (800297c <update_analog_output+0x2d8>)
 80026fe:	f009 f9b7 	bl	800ba70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002702:	2201      	movs	r2, #1
 8002704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002708:	489b      	ldr	r0, [pc, #620]	; (8002978 <update_analog_output+0x2d4>)
 800270a:	f005 fb55 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800270e:	2032      	movs	r0, #50	; 0x32
 8002710:	f002 fce2 	bl	80050d8 <HAL_Delay>

	spi_data[0] = 0x71;    //Channel B
 8002714:	4b97      	ldr	r3, [pc, #604]	; (8002974 <update_analog_output+0x2d0>)
 8002716:	2271      	movs	r2, #113	; 0x71
 8002718:	701a      	strb	r2, [r3, #0]
	//spi_data[0] = 0x1F;        // Both Channels
	spi_data[1] = 0; //(uint8_t)((Analog_output[1] & 0xFF00)>>8);
 800271a:	4b96      	ldr	r3, [pc, #600]	; (8002974 <update_analog_output+0x2d0>)
 800271c:	2200      	movs	r2, #0
 800271e:	705a      	strb	r2, [r3, #1]
	spi_data[2] = 0; //(uint8_t)(Analog_output[1] & 0x00FF);
 8002720:	4b94      	ldr	r3, [pc, #592]	; (8002974 <update_analog_output+0x2d0>)
 8002722:	2200      	movs	r2, #0
 8002724:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
 8002726:	2201      	movs	r2, #1
 8002728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800272c:	4892      	ldr	r0, [pc, #584]	; (8002978 <update_analog_output+0x2d4>)
 800272e:	f005 fb43 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002732:	2032      	movs	r0, #50	; 0x32
 8002734:	f002 fcd0 	bl	80050d8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800273e:	488e      	ldr	r0, [pc, #568]	; (8002978 <update_analog_output+0x2d4>)
 8002740:	f005 fb3a 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002744:	2032      	movs	r0, #50	; 0x32
 8002746:	f002 fcc7 	bl	80050d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002750:	4889      	ldr	r0, [pc, #548]	; (8002978 <update_analog_output+0x2d4>)
 8002752:	f005 fb31 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002756:	2032      	movs	r0, #50	; 0x32
 8002758:	f002 fcbe 	bl	80050d8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 800275c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002760:	2203      	movs	r2, #3
 8002762:	4984      	ldr	r1, [pc, #528]	; (8002974 <update_analog_output+0x2d0>)
 8002764:	4885      	ldr	r0, [pc, #532]	; (800297c <update_analog_output+0x2d8>)
 8002766:	f009 f983 	bl	800ba70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800276a:	2201      	movs	r2, #1
 800276c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002770:	4881      	ldr	r0, [pc, #516]	; (8002978 <update_analog_output+0x2d4>)
 8002772:	f005 fb21 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002776:	2032      	movs	r0, #50	; 0x32
 8002778:	f002 fcae 	bl	80050d8 <HAL_Delay>

	spi_data[0] = 0x19;    //Channel B
 800277c:	4b7d      	ldr	r3, [pc, #500]	; (8002974 <update_analog_output+0x2d0>)
 800277e:	2219      	movs	r2, #25
 8002780:	701a      	strb	r2, [r3, #0]
	//spi_data[0] = 0x1F;        // Both Channels
	spi_data[1] = (uint8_t)((Analog_output[1] & 0xFF00)>>8);
 8002782:	4b7f      	ldr	r3, [pc, #508]	; (8002980 <update_analog_output+0x2dc>)
 8002784:	885b      	ldrh	r3, [r3, #2]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	b29b      	uxth	r3, r3
 800278a:	b2da      	uxtb	r2, r3
 800278c:	4b79      	ldr	r3, [pc, #484]	; (8002974 <update_analog_output+0x2d0>)
 800278e:	705a      	strb	r2, [r3, #1]
	spi_data[2] = (uint8_t)(Analog_output[1] & 0x00FF);
 8002790:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <update_analog_output+0x2dc>)
 8002792:	885b      	ldrh	r3, [r3, #2]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b77      	ldr	r3, [pc, #476]	; (8002974 <update_analog_output+0x2d0>)
 8002798:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
 800279a:	2201      	movs	r2, #1
 800279c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a0:	4875      	ldr	r0, [pc, #468]	; (8002978 <update_analog_output+0x2d4>)
 80027a2:	f005 fb09 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80027a6:	2032      	movs	r0, #50	; 0x32
 80027a8:	f002 fc96 	bl	80050d8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80027ac:	2201      	movs	r2, #1
 80027ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b2:	4871      	ldr	r0, [pc, #452]	; (8002978 <update_analog_output+0x2d4>)
 80027b4:	f005 fb00 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80027b8:	2032      	movs	r0, #50	; 0x32
 80027ba:	f002 fc8d 	bl	80050d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027c4:	486c      	ldr	r0, [pc, #432]	; (8002978 <update_analog_output+0x2d4>)
 80027c6:	f005 faf7 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80027ca:	2032      	movs	r0, #50	; 0x32
 80027cc:	f002 fc84 	bl	80050d8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 80027d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80027d4:	2203      	movs	r2, #3
 80027d6:	4967      	ldr	r1, [pc, #412]	; (8002974 <update_analog_output+0x2d0>)
 80027d8:	4868      	ldr	r0, [pc, #416]	; (800297c <update_analog_output+0x2d8>)
 80027da:	f009 f949 	bl	800ba70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80027de:	2201      	movs	r2, #1
 80027e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027e4:	4864      	ldr	r0, [pc, #400]	; (8002978 <update_analog_output+0x2d4>)
 80027e6:	f005 fae7 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80027ea:	2032      	movs	r0, #50	; 0x32
 80027ec:	f002 fc74 	bl	80050d8 <HAL_Delay>

	spi_data[0] = 0x19;    //Channel B
 80027f0:	4b60      	ldr	r3, [pc, #384]	; (8002974 <update_analog_output+0x2d0>)
 80027f2:	2219      	movs	r2, #25
 80027f4:	701a      	strb	r2, [r3, #0]
	//spi_data[0] = 0x1F;        // Both Channels
	spi_data[1] = (uint8_t)((Analog_output[1] & 0xFF00)>>8);
 80027f6:	4b62      	ldr	r3, [pc, #392]	; (8002980 <update_analog_output+0x2dc>)
 80027f8:	885b      	ldrh	r3, [r3, #2]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <update_analog_output+0x2d0>)
 8002802:	705a      	strb	r2, [r3, #1]
	spi_data[2] = (uint8_t)(Analog_output[1] & 0x00FF);
 8002804:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <update_analog_output+0x2dc>)
 8002806:	885b      	ldrh	r3, [r3, #2]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b5a      	ldr	r3, [pc, #360]	; (8002974 <update_analog_output+0x2d0>)
 800280c:	709a      	strb	r2, [r3, #2]

   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
   // HAL_Delay(50);

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800280e:	2201      	movs	r2, #1
 8002810:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002814:	4858      	ldr	r0, [pc, #352]	; (8002978 <update_analog_output+0x2d4>)
 8002816:	f005 facf 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800281a:	2032      	movs	r0, #50	; 0x32
 800281c:	f002 fc5c 	bl	80050d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002826:	4854      	ldr	r0, [pc, #336]	; (8002978 <update_analog_output+0x2d4>)
 8002828:	f005 fac6 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800282c:	2032      	movs	r0, #50	; 0x32
 800282e:	f002 fc53 	bl	80050d8 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 8002832:	f241 3388 	movw	r3, #5000	; 0x1388
 8002836:	2203      	movs	r2, #3
 8002838:	494e      	ldr	r1, [pc, #312]	; (8002974 <update_analog_output+0x2d0>)
 800283a:	4850      	ldr	r0, [pc, #320]	; (800297c <update_analog_output+0x2d8>)
 800283c:	f009 f918 	bl	800ba70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002840:	2201      	movs	r2, #1
 8002842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002846:	484c      	ldr	r0, [pc, #304]	; (8002978 <update_analog_output+0x2d4>)
 8002848:	f005 fab6 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800284c:	2032      	movs	r0, #50	; 0x32
 800284e:	f002 fc43 	bl	80050d8 <HAL_Delay>

	spi_data[0] = 0x18;    //Channel A
 8002852:	4b48      	ldr	r3, [pc, #288]	; (8002974 <update_analog_output+0x2d0>)
 8002854:	2218      	movs	r2, #24
 8002856:	701a      	strb	r2, [r3, #0]
    //spi_data[0] = 0x19;    //Channel B
    //spi_data[0] = 0x1F;        // Both Channels
    spi_data[1] = 0; //(uint8_t)((Analog_output[0]&0xFF00)>>8);
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <update_analog_output+0x2d0>)
 800285a:	2200      	movs	r2, #0
 800285c:	705a      	strb	r2, [r3, #1]
    spi_data[2] = 0; //(uint8_t)(Analog_output[0]& 0x00FF);
 800285e:	4b45      	ldr	r3, [pc, #276]	; (8002974 <update_analog_output+0x2d0>)
 8002860:	2200      	movs	r2, #0
 8002862:	709a      	strb	r2, [r3, #2]

   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
   // HAL_Delay(50);

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002864:	2201      	movs	r2, #1
 8002866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800286a:	4843      	ldr	r0, [pc, #268]	; (8002978 <update_analog_output+0x2d4>)
 800286c:	f005 faa4 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8002870:	2032      	movs	r0, #50	; 0x32
 8002872:	f002 fc31 	bl	80050d8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800287c:	483e      	ldr	r0, [pc, #248]	; (8002978 <update_analog_output+0x2d4>)
 800287e:	f005 fa9b 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8002882:	2032      	movs	r0, #50	; 0x32
 8002884:	f002 fc28 	bl	80050d8 <HAL_Delay>
    HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 8002888:	f241 3388 	movw	r3, #5000	; 0x1388
 800288c:	2203      	movs	r2, #3
 800288e:	4939      	ldr	r1, [pc, #228]	; (8002974 <update_analog_output+0x2d0>)
 8002890:	483a      	ldr	r0, [pc, #232]	; (800297c <update_analog_output+0x2d8>)
 8002892:	f009 f8ed 	bl	800ba70 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002896:	2201      	movs	r2, #1
 8002898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800289c:	4836      	ldr	r0, [pc, #216]	; (8002978 <update_analog_output+0x2d4>)
 800289e:	f005 fa8b 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80028a2:	2032      	movs	r0, #50	; 0x32
 80028a4:	f002 fc18 	bl	80050d8 <HAL_Delay>

	spi_data[0] = 0x18;    //Channel A
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <update_analog_output+0x2d0>)
 80028aa:	2218      	movs	r2, #24
 80028ac:	701a      	strb	r2, [r3, #0]
    //spi_data[0] = 0x19;    //Channel B
    //spi_data[0] = 0x1F;        // Both Channels
    spi_data[1] = (uint8_t)((Analog_output[0] & 0xFF00)>>8);
 80028ae:	4b34      	ldr	r3, [pc, #208]	; (8002980 <update_analog_output+0x2dc>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <update_analog_output+0x2d0>)
 80028ba:	705a      	strb	r2, [r3, #1]
    spi_data[2] = (uint8_t)(Analog_output[0] & 0x00FF);
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <update_analog_output+0x2dc>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <update_analog_output+0x2d0>)
 80028c4:	709a      	strb	r2, [r3, #2]

   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
   // HAL_Delay(50);

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80028c6:	2201      	movs	r2, #1
 80028c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028cc:	482a      	ldr	r0, [pc, #168]	; (8002978 <update_analog_output+0x2d4>)
 80028ce:	f005 fa73 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80028d2:	2032      	movs	r0, #50	; 0x32
 80028d4:	f002 fc00 	bl	80050d8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80028d8:	2200      	movs	r2, #0
 80028da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028de:	4826      	ldr	r0, [pc, #152]	; (8002978 <update_analog_output+0x2d4>)
 80028e0:	f005 fa6a 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80028e4:	2032      	movs	r0, #50	; 0x32
 80028e6:	f002 fbf7 	bl	80050d8 <HAL_Delay>
    HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 80028ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80028ee:	2203      	movs	r2, #3
 80028f0:	4920      	ldr	r1, [pc, #128]	; (8002974 <update_analog_output+0x2d0>)
 80028f2:	4822      	ldr	r0, [pc, #136]	; (800297c <update_analog_output+0x2d8>)
 80028f4:	f009 f8bc 	bl	800ba70 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80028f8:	2201      	movs	r2, #1
 80028fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028fe:	481e      	ldr	r0, [pc, #120]	; (8002978 <update_analog_output+0x2d4>)
 8002900:	f005 fa5a 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8002904:	2032      	movs	r0, #50	; 0x32
 8002906:	f002 fbe7 	bl	80050d8 <HAL_Delay>


	spi_data[0] = 0x18;    //Channel A
 800290a:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <update_analog_output+0x2d0>)
 800290c:	2218      	movs	r2, #24
 800290e:	701a      	strb	r2, [r3, #0]
    //spi_data[0] = 0x19;    //Channel B
    //spi_data[0] = 0x1F;        // Both Channels
    spi_data[1] = (uint8_t)((Analog_output[0] & 0xFF00)>>8);
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <update_analog_output+0x2dc>)
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	b29b      	uxth	r3, r3
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <update_analog_output+0x2d0>)
 800291c:	705a      	strb	r2, [r3, #1]
    spi_data[2] = (uint8_t)(Analog_output[0] & 0x00FF);
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <update_analog_output+0x2dc>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <update_analog_output+0x2d0>)
 8002926:	709a      	strb	r2, [r3, #2]

  //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	// EEPROM DESELECT
  //  HAL_Delay(50);

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002928:	2201      	movs	r2, #1
 800292a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800292e:	4812      	ldr	r0, [pc, #72]	; (8002978 <update_analog_output+0x2d4>)
 8002930:	f005 fa42 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8002934:	2032      	movs	r0, #50	; 0x32
 8002936:	f002 fbcf 	bl	80050d8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800293a:	2200      	movs	r2, #0
 800293c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <update_analog_output+0x2d4>)
 8002942:	f005 fa39 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8002946:	2032      	movs	r0, #50	; 0x32
 8002948:	f002 fbc6 	bl	80050d8 <HAL_Delay>
    HAL_SPI_Transmit(&hspi2, spi_data, 3, 5000);
 800294c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002950:	2203      	movs	r2, #3
 8002952:	4908      	ldr	r1, [pc, #32]	; (8002974 <update_analog_output+0x2d0>)
 8002954:	4809      	ldr	r0, [pc, #36]	; (800297c <update_analog_output+0x2d8>)
 8002956:	f009 f88b 	bl	800ba70 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800295a:	2201      	movs	r2, #1
 800295c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002960:	4805      	ldr	r0, [pc, #20]	; (8002978 <update_analog_output+0x2d4>)
 8002962:	f005 fa29 	bl	8007db8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8002966:	2032      	movs	r0, #50	; 0x32
 8002968:	f002 fbb6 	bl	80050d8 <HAL_Delay>


}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	240012fc 	.word	0x240012fc
 8002978:	58020400 	.word	0x58020400
 800297c:	2400052c 	.word	0x2400052c
 8002980:	24000a68 	.word	0x24000a68

08002984 <set_clear_v24_sink_output>:


void set_clear_v24_sink_output(void *data)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	int i;
	int bit;
	int *val;

	bit = 1;
 800298c:	2301      	movs	r3, #1
 800298e:	613b      	str	r3, [r7, #16]
	val = (int *)data;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < 8; i++) {
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e026      	b.n	80029e8 <set_clear_v24_sink_output+0x64>
		if (*val & bit)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <set_clear_v24_sink_output+0x3e>
			HAL_GPIO_WritePin(v24_sink_out_map[i].port, v24_sink_out_map[i].pin, GPIO_PIN_SET);
 80029a6:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <set_clear_v24_sink_output+0x74>)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <set_clear_v24_sink_output+0x74>)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	889b      	ldrh	r3, [r3, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	4619      	mov	r1, r3
 80029bc:	f005 f9fc 	bl	8007db8 <HAL_GPIO_WritePin>
 80029c0:	e00c      	b.n	80029dc <set_clear_v24_sink_output+0x58>
		else
			HAL_GPIO_WritePin(v24_sink_out_map[i].port, v24_sink_out_map[i].pin, GPIO_PIN_RESET);
 80029c2:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <set_clear_v24_sink_output+0x74>)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <set_clear_v24_sink_output+0x74>)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	889b      	ldrh	r3, [r3, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	4619      	mov	r1, r3
 80029d8:	f005 f9ee 	bl	8007db8 <HAL_GPIO_WritePin>
		bit <<= 1;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 8; i++) {
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3301      	adds	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b07      	cmp	r3, #7
 80029ec:	ddd5      	ble.n	800299a <set_clear_v24_sink_output+0x16>
	}

}
 80029ee:	bf00      	nop
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0800f984 	.word	0x0800f984

080029fc <PCP_pulse_counter_test>:

void PCP_pulse_counter_test(void *data)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	81fb      	strh	r3, [r7, #14]
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); // Up Count direction
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a0e:	484a      	ldr	r0, [pc, #296]	; (8002b38 <PCP_pulse_counter_test+0x13c>)
 8002a10:	f005 f9d2 	bl	8007db8 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8002a14:	200a      	movs	r0, #10
 8002a16:	f002 fb5f 	bl	80050d8 <HAL_Delay>

		  	spiTxData[0] = spiRxData[0] = 0;
 8002a1a:	4b48      	ldr	r3, [pc, #288]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	4b46      	ldr	r3, [pc, #280]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a22:	781a      	ldrb	r2, [r3, #0]
 8002a24:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <PCP_pulse_counter_test+0x144>)
 8002a26:	701a      	strb	r2, [r3, #0]
		  	spiTxData[1] = spiRxData[1]  = 0;
 8002a28:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	705a      	strb	r2, [r3, #1]
 8002a2e:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a30:	785a      	ldrb	r2, [r3, #1]
 8002a32:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <PCP_pulse_counter_test+0x144>)
 8002a34:	705a      	strb	r2, [r3, #1]
		  	spiTxData[2] = spiRxData[2]  = 0;
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	709a      	strb	r2, [r3, #2]
 8002a3c:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a3e:	789a      	ldrb	r2, [r3, #2]
 8002a40:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <PCP_pulse_counter_test+0x144>)
 8002a42:	709a      	strb	r2, [r3, #2]
		  	spiTxData[3] = spiRxData[3]  = 0;
 8002a44:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	70da      	strb	r2, [r3, #3]
 8002a4a:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a4c:	78da      	ldrb	r2, [r3, #3]
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <PCP_pulse_counter_test+0x144>)
 8002a50:	70da      	strb	r2, [r3, #3]
		  	spiTxData[4] = spiRxData[4]  = 0;
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	711a      	strb	r2, [r3, #4]
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002a5a:	791a      	ldrb	r2, [r3, #4]
 8002a5c:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <PCP_pulse_counter_test+0x144>)
 8002a5e:	711a      	strb	r2, [r3, #4]

			  // Generating pulses of Differential output 1 Pin (PB2)
			  for(i=0; i<pulse_count; i++) {
 8002a60:	2300      	movs	r3, #0
 8002a62:	81fb      	strh	r3, [r7, #14]
 8002a64:	e012      	b.n	8002a8c <PCP_pulse_counter_test+0x90>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8002a66:	2201      	movs	r2, #1
 8002a68:	2104      	movs	r1, #4
 8002a6a:	4836      	ldr	r0, [pc, #216]	; (8002b44 <PCP_pulse_counter_test+0x148>)
 8002a6c:	f005 f9a4 	bl	8007db8 <HAL_GPIO_WritePin>
				  HAL_Delay(5);
 8002a70:	2005      	movs	r0, #5
 8002a72:	f002 fb31 	bl	80050d8 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2104      	movs	r1, #4
 8002a7a:	4832      	ldr	r0, [pc, #200]	; (8002b44 <PCP_pulse_counter_test+0x148>)
 8002a7c:	f005 f99c 	bl	8007db8 <HAL_GPIO_WritePin>
				  HAL_Delay(5);
 8002a80:	2005      	movs	r0, #5
 8002a82:	f002 fb29 	bl	80050d8 <HAL_Delay>
			  for(i=0; i<pulse_count; i++) {
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	81fb      	strh	r3, [r7, #14]
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <PCP_pulse_counter_test+0x14c>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	89fa      	ldrh	r2, [r7, #14]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d3e7      	bcc.n	8002a66 <PCP_pulse_counter_test+0x6a>
			  }

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);	// chip select
 8002a96:	2200      	movs	r2, #0
 8002a98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a9c:	482b      	ldr	r0, [pc, #172]	; (8002b4c <PCP_pulse_counter_test+0x150>)
 8002a9e:	f005 f98b 	bl	8007db8 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8002aa2:	200a      	movs	r0, #10
 8002aa4:	f002 fb18 	bl	80050d8 <HAL_Delay>
				spiTxData[0] = 0x60;	// read counter register
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <PCP_pulse_counter_test+0x144>)
 8002aaa:	2260      	movs	r2, #96	; 0x60
 8002aac:	701a      	strb	r2, [r3, #0]
			//	HAL_SPI_Transmit(&hspi4, &spiTxData[0], 5, 5000);
				HAL_SPI_TransmitReceive(&hspi4, &spiTxData[0], &spiRxData[0], 5, 5000);
 8002aae:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002ab8:	4921      	ldr	r1, [pc, #132]	; (8002b40 <PCP_pulse_counter_test+0x144>)
 8002aba:	4825      	ldr	r0, [pc, #148]	; (8002b50 <PCP_pulse_counter_test+0x154>)
 8002abc:	f009 f9d4 	bl	800be68 <HAL_SPI_TransmitReceive>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);	// chip select
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ac6:	4821      	ldr	r0, [pc, #132]	; (8002b4c <PCP_pulse_counter_test+0x150>)
 8002ac8:	f005 f976 	bl	8007db8 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8002acc:	200a      	movs	r0, #10
 8002ace:	f002 fb03 	bl	80050d8 <HAL_Delay>

				PCP_pulse_count_read = spiRxData[4];
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002ad4:	791b      	ldrb	r3, [r3, #4]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <PCP_pulse_counter_test+0x158>)
 8002ada:	801a      	strh	r2, [r3, #0]

				//Clear the counter register in the IC
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8002adc:	2201      	movs	r2, #1
 8002ade:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ae2:	481a      	ldr	r0, [pc, #104]	; (8002b4c <PCP_pulse_counter_test+0x150>)
 8002ae4:	f005 f968 	bl	8007db8 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8002ae8:	200a      	movs	r0, #10
 8002aea:	f002 faf5 	bl	80050d8 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);	// chip select
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002af4:	4815      	ldr	r0, [pc, #84]	; (8002b4c <PCP_pulse_counter_test+0x150>)
 8002af6:	f005 f95f 	bl	8007db8 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8002afa:	200a      	movs	r0, #10
 8002afc:	f002 faec 	bl	80050d8 <HAL_Delay>
				spiTxData[0] = 0x98;	// clear counter
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <PCP_pulse_counter_test+0x144>)
 8002b02:	2298      	movs	r2, #152	; 0x98
 8002b04:	701a      	strb	r2, [r3, #0]
				//HAL_SPI_Transmit(&hspi4, &spiTxData[0], 1, 5000);
				HAL_SPI_TransmitReceive(&hspi4, &spiTxData[0], &spiRxData[0], 5, 500);
 8002b06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2305      	movs	r3, #5
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <PCP_pulse_counter_test+0x140>)
 8002b10:	490b      	ldr	r1, [pc, #44]	; (8002b40 <PCP_pulse_counter_test+0x144>)
 8002b12:	480f      	ldr	r0, [pc, #60]	; (8002b50 <PCP_pulse_counter_test+0x154>)
 8002b14:	f009 f9a8 	bl	800be68 <HAL_SPI_TransmitReceive>
				HAL_Delay(10);
 8002b18:	200a      	movs	r0, #10
 8002b1a:	f002 fadd 	bl	80050d8 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b24:	4809      	ldr	r0, [pc, #36]	; (8002b4c <PCP_pulse_counter_test+0x150>)
 8002b26:	f005 f947 	bl	8007db8 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8002b2a:	200a      	movs	r0, #10
 8002b2c:	f002 fad4 	bl	80050d8 <HAL_Delay>

}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	58021400 	.word	0x58021400
 8002b3c:	240032dc 	.word	0x240032dc
 8002b40:	240032d8 	.word	0x240032d8
 8002b44:	58020400 	.word	0x58020400
 8002b48:	240032ea 	.word	0x240032ea
 8002b4c:	58021000 	.word	0x58021000
 8002b50:	2400063c 	.word	0x2400063c
 8002b54:	240032ec 	.word	0x240032ec

08002b58 <Ultimus_Pressure_Sensor1_Test>:


void Ultimus_Pressure_Sensor1_Test(void *data)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	6078      	str	r0, [r7, #4]
	if(read_U13counts != 0)
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <Ultimus_Pressure_Sensor1_Test+0x8c>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d039      	beq.n	8002bdc <Ultimus_Pressure_Sensor1_Test+0x84>
	{
		U13counts = 0; 	//Clear the earlier value and be ready to read new value
 8002b68:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <Ultimus_Pressure_Sensor1_Test+0x90>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	801a      	strh	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //This chip select is for SPI3 which was used earlier. Now using SPI4 interface, hence this is commented.
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);	// chip select for SPI4 // J8 Connector
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b74:	481d      	ldr	r0, [pc, #116]	; (8002bec <Ultimus_Pressure_Sensor1_Test+0x94>)
 8002b76:	f005 f91f 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002b7a:	2032      	movs	r0, #50	; 0x32
 8002b7c:	f002 faac 	bl	80050d8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);	// chip select asserted for SPI4
 8002b80:	2200      	movs	r2, #0
 8002b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b86:	4819      	ldr	r0, [pc, #100]	; (8002bec <Ultimus_Pressure_Sensor1_Test+0x94>)
 8002b88:	f005 f916 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002b8c:	2032      	movs	r0, #50	; 0x32
 8002b8e:	f002 faa3 	bl	80050d8 <HAL_Delay>
		HAL_SPI_TransmitReceive(&hspi4, &spiUltiTx[0], &spiUltiRx[0], 4, 5000);
 8002b92:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2304      	movs	r3, #4
 8002b9a:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <Ultimus_Pressure_Sensor1_Test+0x98>)
 8002b9c:	4915      	ldr	r1, [pc, #84]	; (8002bf4 <Ultimus_Pressure_Sensor1_Test+0x9c>)
 8002b9e:	4816      	ldr	r0, [pc, #88]	; (8002bf8 <Ultimus_Pressure_Sensor1_Test+0xa0>)
 8002ba0:	f009 f962 	bl	800be68 <HAL_SPI_TransmitReceive>
		HAL_Delay(50);
 8002ba4:	2032      	movs	r0, #50	; 0x32
 8002ba6:	f002 fa97 	bl	80050d8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);	// Set Chip select line for SPI4
 8002baa:	2201      	movs	r2, #1
 8002bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bb0:	480e      	ldr	r0, [pc, #56]	; (8002bec <Ultimus_Pressure_Sensor1_Test+0x94>)
 8002bb2:	f005 f901 	bl	8007db8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8002bb6:	2032      	movs	r0, #50	; 0x32
 8002bb8:	f002 fa8e 	bl	80050d8 <HAL_Delay>
		U13counts = ((U13counts | spiUltiRx[0])<<8)|(spiUltiRx[1]);
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <Ultimus_Pressure_Sensor1_Test+0x90>)
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <Ultimus_Pressure_Sensor1_Test+0x98>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	b21a      	sxth	r2, r3
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <Ultimus_Pressure_Sensor1_Test+0x98>)
 8002bce:	785b      	ldrb	r3, [r3, #1]
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <Ultimus_Pressure_Sensor1_Test+0x90>)
 8002bda:	801a      	strh	r2, [r3, #0]
	}

}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	240032ee 	.word	0x240032ee
 8002be8:	240032f2 	.word	0x240032f2
 8002bec:	58021000 	.word	0x58021000
 8002bf0:	240032e4 	.word	0x240032e4
 8002bf4:	24000014 	.word	0x24000014
 8002bf8:	2400063c 	.word	0x2400063c

08002bfc <Ultimus_Pressure_Sensor2_Test>:

void Ultimus_Pressure_Sensor2_Test(void *data)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	6078      	str	r0, [r7, #4]
	if(read_U15counts != 0)
 8002c04:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <Ultimus_Pressure_Sensor2_Test+0x8c>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d039      	beq.n	8002c80 <Ultimus_Pressure_Sensor2_Test+0x84>
		{
			U15counts = 0; //Clear the earlier value and be ready to read new value
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <Ultimus_Pressure_Sensor2_Test+0x90>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8002c12:	2201      	movs	r2, #1
 8002c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c18:	481d      	ldr	r0, [pc, #116]	; (8002c90 <Ultimus_Pressure_Sensor2_Test+0x94>)
 8002c1a:	f005 f8cd 	bl	8007db8 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8002c1e:	2032      	movs	r0, #50	; 0x32
 8002c20:	f002 fa5a 	bl	80050d8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);	// chip select
 8002c24:	2200      	movs	r2, #0
 8002c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c2a:	4819      	ldr	r0, [pc, #100]	; (8002c90 <Ultimus_Pressure_Sensor2_Test+0x94>)
 8002c2c:	f005 f8c4 	bl	8007db8 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8002c30:	2032      	movs	r0, #50	; 0x32
 8002c32:	f002 fa51 	bl	80050d8 <HAL_Delay>
			HAL_SPI_TransmitReceive(&hspi4, &spiUltiTx[0], &spiUltiRx[0], 4, 5000);
 8002c36:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <Ultimus_Pressure_Sensor2_Test+0x98>)
 8002c40:	4915      	ldr	r1, [pc, #84]	; (8002c98 <Ultimus_Pressure_Sensor2_Test+0x9c>)
 8002c42:	4816      	ldr	r0, [pc, #88]	; (8002c9c <Ultimus_Pressure_Sensor2_Test+0xa0>)
 8002c44:	f009 f910 	bl	800be68 <HAL_SPI_TransmitReceive>
			HAL_Delay(50);
 8002c48:	2032      	movs	r0, #50	; 0x32
 8002c4a:	f002 fa45 	bl	80050d8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c54:	480e      	ldr	r0, [pc, #56]	; (8002c90 <Ultimus_Pressure_Sensor2_Test+0x94>)
 8002c56:	f005 f8af 	bl	8007db8 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8002c5a:	2032      	movs	r0, #50	; 0x32
 8002c5c:	f002 fa3c 	bl	80050d8 <HAL_Delay>
			U15counts = ((U15counts | spiUltiRx[0])<<8)|(spiUltiRx[1]);
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <Ultimus_Pressure_Sensor2_Test+0x90>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <Ultimus_Pressure_Sensor2_Test+0x98>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <Ultimus_Pressure_Sensor2_Test+0x98>)
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	4313      	orrs	r3, r2
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <Ultimus_Pressure_Sensor2_Test+0x90>)
 8002c7e:	801a      	strh	r2, [r3, #0]
		}
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	240032f0 	.word	0x240032f0
 8002c8c:	240032f4 	.word	0x240032f4
 8002c90:	58021000 	.word	0x58021000
 8002c94:	240032e4 	.word	0x240032e4
 8002c98:	24000014 	.word	0x24000014
 8002c9c:	2400063c 	.word	0x2400063c

08002ca0 <set_clear_uut_power>:


void set_clear_uut_power(void *data)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

	//int bit;
	int *val;

	//bit = 1;
	val = (int *)data;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	60fb      	str	r3, [r7, #12]

		if (*val > 0)												//Any non-Zero value will turn On UUT relay
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dd06      	ble.n	8002cc2 <set_clear_uut_power+0x22>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);	//UUT Power On
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cba:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <set_clear_uut_power+0x38>)
 8002cbc:	f005 f87c 	bl	8007db8 <HAL_GPIO_WritePin>
		else
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);		//UUT Power Off
}
 8002cc0:	e005      	b.n	8002cce <set_clear_uut_power+0x2e>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);		//UUT Power Off
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cc8:	4803      	ldr	r0, [pc, #12]	; (8002cd8 <set_clear_uut_power+0x38>)
 8002cca:	f005 f875 	bl	8007db8 <HAL_GPIO_WritePin>
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	58021400 	.word	0x58021400

08002cdc <ClearOutputs>:


void ClearOutputs(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0

	// Relay Outputs OFF
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	4883      	ldr	r0, [pc, #524]	; (8002ef4 <ClearOutputs+0x218>)
 8002ce6:	f005 f867 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2108      	movs	r1, #8
 8002cee:	4881      	ldr	r0, [pc, #516]	; (8002ef4 <ClearOutputs+0x218>)
 8002cf0:	f005 f862 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	487e      	ldr	r0, [pc, #504]	; (8002ef4 <ClearOutputs+0x218>)
 8002cfa:	f005 f85d 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2120      	movs	r1, #32
 8002d02:	487c      	ldr	r0, [pc, #496]	; (8002ef4 <ClearOutputs+0x218>)
 8002d04:	f005 f858 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	4879      	ldr	r0, [pc, #484]	; (8002ef4 <ClearOutputs+0x218>)
 8002d0e:	f005 f853 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d18:	4877      	ldr	r0, [pc, #476]	; (8002ef8 <ClearOutputs+0x21c>)
 8002d1a:	f005 f84d 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d24:	4874      	ldr	r0, [pc, #464]	; (8002ef8 <ClearOutputs+0x21c>)
 8002d26:	f005 f847 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d30:	4871      	ldr	r0, [pc, #452]	; (8002ef8 <ClearOutputs+0x21c>)
 8002d32:	f005 f841 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8002d36:	2200      	movs	r2, #0
 8002d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d3c:	486f      	ldr	r0, [pc, #444]	; (8002efc <ClearOutputs+0x220>)
 8002d3e:	f005 f83b 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8002d42:	2200      	movs	r2, #0
 8002d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d48:	486c      	ldr	r0, [pc, #432]	; (8002efc <ClearOutputs+0x220>)
 8002d4a:	f005 f835 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2101      	movs	r1, #1
 8002d52:	486b      	ldr	r0, [pc, #428]	; (8002f00 <ClearOutputs+0x224>)
 8002d54:	f005 f830 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4868      	ldr	r0, [pc, #416]	; (8002f00 <ClearOutputs+0x224>)
 8002d5e:	f005 f82b 	bl	8007db8 <HAL_GPIO_WritePin>


	// Clear Digital Driver Outputs
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	4863      	ldr	r0, [pc, #396]	; (8002ef4 <ClearOutputs+0x218>)
 8002d68:	f005 f826 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d72:	4860      	ldr	r0, [pc, #384]	; (8002ef4 <ClearOutputs+0x218>)
 8002d74:	f005 f820 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d7e:	485d      	ldr	r0, [pc, #372]	; (8002ef4 <ClearOutputs+0x218>)
 8002d80:	f005 f81a 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8002d84:	2200      	movs	r2, #0
 8002d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d8a:	485a      	ldr	r0, [pc, #360]	; (8002ef4 <ClearOutputs+0x218>)
 8002d8c:	f005 f814 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8002d90:	2200      	movs	r2, #0
 8002d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d96:	4857      	ldr	r0, [pc, #348]	; (8002ef4 <ClearOutputs+0x218>)
 8002d98:	f005 f80e 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002da2:	4858      	ldr	r0, [pc, #352]	; (8002f04 <ClearOutputs+0x228>)
 8002da4:	f005 f808 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002da8:	2200      	movs	r2, #0
 8002daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dae:	4852      	ldr	r0, [pc, #328]	; (8002ef8 <ClearOutputs+0x21c>)
 8002db0:	f005 f802 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002db4:	2200      	movs	r2, #0
 8002db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dba:	4853      	ldr	r0, [pc, #332]	; (8002f08 <ClearOutputs+0x22c>)
 8002dbc:	f004 fffc 	bl	8007db8 <HAL_GPIO_WritePin>

	// UUT Power OFF
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dc6:	484d      	ldr	r0, [pc, #308]	; (8002efc <ClearOutputs+0x220>)
 8002dc8:	f004 fff6 	bl	8007db8 <HAL_GPIO_WritePin>


	// 3V3 Digital Output OFF
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dd2:	484e      	ldr	r0, [pc, #312]	; (8002f0c <ClearOutputs+0x230>)
 8002dd4:	f004 fff0 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dde:	484b      	ldr	r0, [pc, #300]	; (8002f0c <ClearOutputs+0x230>)
 8002de0:	f004 ffea 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2104      	movs	r1, #4
 8002de8:	4845      	ldr	r0, [pc, #276]	; (8002f00 <ClearOutputs+0x224>)
 8002dea:	f004 ffe5 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2108      	movs	r1, #8
 8002df2:	4843      	ldr	r0, [pc, #268]	; (8002f00 <ClearOutputs+0x224>)
 8002df4:	f004 ffe0 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	4840      	ldr	r0, [pc, #256]	; (8002f00 <ClearOutputs+0x224>)
 8002dfe:	f004 ffdb 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2120      	movs	r1, #32
 8002e06:	483e      	ldr	r0, [pc, #248]	; (8002f00 <ClearOutputs+0x224>)
 8002e08:	f004 ffd6 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	483b      	ldr	r0, [pc, #236]	; (8002f00 <ClearOutputs+0x224>)
 8002e12:	f004 ffd1 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	4839      	ldr	r0, [pc, #228]	; (8002f00 <ClearOutputs+0x224>)
 8002e1c:	f004 ffcc 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e26:	4836      	ldr	r0, [pc, #216]	; (8002f00 <ClearOutputs+0x224>)
 8002e28:	f004 ffc6 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2140      	movs	r1, #64	; 0x40
 8002e30:	4831      	ldr	r0, [pc, #196]	; (8002ef8 <ClearOutputs+0x21c>)
 8002e32:	f004 ffc1 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2180      	movs	r1, #128	; 0x80
 8002e3a:	482f      	ldr	r0, [pc, #188]	; (8002ef8 <ClearOutputs+0x21c>)
 8002e3c:	f004 ffbc 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e40:	2200      	movs	r2, #0
 8002e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e46:	482c      	ldr	r0, [pc, #176]	; (8002ef8 <ClearOutputs+0x21c>)
 8002e48:	f004 ffb6 	bl	8007db8 <HAL_GPIO_WritePin>


	// LED OFF
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e52:	482d      	ldr	r0, [pc, #180]	; (8002f08 <ClearOutputs+0x22c>)
 8002e54:	f004 ffb0 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e5e:	482a      	ldr	r0, [pc, #168]	; (8002f08 <ClearOutputs+0x22c>)
 8002e60:	f004 ffaa 	bl	8007db8 <HAL_GPIO_WritePin>

	// Clear Differential Outputs
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2104      	movs	r1, #4
 8002e68:	4826      	ldr	r0, [pc, #152]	; (8002f04 <ClearOutputs+0x228>)
 8002e6a:	f004 ffa5 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e74:	4821      	ldr	r0, [pc, #132]	; (8002efc <ClearOutputs+0x220>)
 8002e76:	f004 ff9f 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e80:	481e      	ldr	r0, [pc, #120]	; (8002efc <ClearOutputs+0x220>)
 8002e82:	f004 ff99 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8002e86:	2200      	movs	r2, #0
 8002e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e8c:	481b      	ldr	r0, [pc, #108]	; (8002efc <ClearOutputs+0x220>)
 8002e8e:	f004 ff93 	bl	8007db8 <HAL_GPIO_WritePin>

	// 24V Digital Outputs OFF
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2108      	movs	r1, #8
 8002e96:	481d      	ldr	r0, [pc, #116]	; (8002f0c <ClearOutputs+0x230>)
 8002e98:	f004 ff8e 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2110      	movs	r1, #16
 8002ea0:	481a      	ldr	r0, [pc, #104]	; (8002f0c <ClearOutputs+0x230>)
 8002ea2:	f004 ff89 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eac:	4814      	ldr	r0, [pc, #80]	; (8002f00 <ClearOutputs+0x224>)
 8002eae:	f004 ff83 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002eb8:	4811      	ldr	r0, [pc, #68]	; (8002f00 <ClearOutputs+0x224>)
 8002eba:	f004 ff7d 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ec4:	480e      	ldr	r0, [pc, #56]	; (8002f00 <ClearOutputs+0x224>)
 8002ec6:	f004 ff77 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ed0:	480b      	ldr	r0, [pc, #44]	; (8002f00 <ClearOutputs+0x224>)
 8002ed2:	f004 ff71 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002edc:	4808      	ldr	r0, [pc, #32]	; (8002f00 <ClearOutputs+0x224>)
 8002ede:	f004 ff6b 	bl	8007db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ee8:	4805      	ldr	r0, [pc, #20]	; (8002f00 <ClearOutputs+0x224>)
 8002eea:	f004 ff65 	bl	8007db8 <HAL_GPIO_WritePin>

}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	58021000 	.word	0x58021000
 8002ef8:	58020800 	.word	0x58020800
 8002efc:	58021400 	.word	0x58021400
 8002f00:	58021800 	.word	0x58021800
 8002f04:	58020400 	.word	0x58020400
 8002f08:	58020000 	.word	0x58020000
 8002f0c:	58020c00 	.word	0x58020c00

08002f10 <calculate_board_power>:

void calculate_board_power(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
	float temp = 0;
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
	float board_volt = 0;
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	603b      	str	r3, [r7, #0]

	temp = adc_data[5];
 8002f22:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <calculate_board_power+0x90>)
 8002f24:	895b      	ldrh	r3, [r3, #10]
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2e:	edc7 7a01 	vstr	s15, [r7, #4]
	board_volt = (adc_data[0] / 1000);
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <calculate_board_power+0x90>)
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <calculate_board_power+0x94>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f48:	edc7 7a00 	vstr	s15, [r7]

	// 1.448 V per Amp -> (1 / 1.448 = 0.69)
	// Amp = Vout * 0.69

	pico_board_supply_amps = (uint16_t) (temp * 0.69);
 8002f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f54:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002f98 <calculate_board_power+0x88>
 8002f58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f60:	ee17 3a90 	vmov	r3, s15
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <calculate_board_power+0x98>)
 8002f68:	801a      	strh	r2, [r3, #0]
	pico_board_supply_power = (uint16_t) (board_volt * pico_board_supply_amps);
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <calculate_board_power+0x98>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f76:	edd7 7a00 	vldr	s15, [r7]
 8002f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f82:	ee17 3a90 	vmov	r3, s15
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <calculate_board_power+0x9c>)
 8002f8a:	801a      	strh	r2, [r3, #0]

}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e147ae14 	.word	0xe147ae14
 8002f9c:	3fe6147a 	.word	0x3fe6147a
 8002fa0:	24000a08 	.word	0x24000a08
 8002fa4:	10624dd3 	.word	0x10624dd3
 8002fa8:	2400331e 	.word	0x2400331e
 8002fac:	24003320 	.word	0x24003320

08002fb0 <ProcessPCCommands>:


void ProcessPCCommands(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0

	int i,j;
	uint16_t command = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	817b      	strh	r3, [r7, #10]
	uint16_t address = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	813b      	strh	r3, [r7, #8]
	uint16_t count = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	80fb      	strh	r3, [r7, #6]
	MODBUS_REG_MAP *pmap;
	int map_count = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]

	command = (record.data[0]);
 8002fc6:	4b7b      	ldr	r3, [pc, #492]	; (80031b4 <ProcessPCCommands+0x204>)
 8002fc8:	7b1b      	ldrb	r3, [r3, #12]
 8002fca:	817b      	strh	r3, [r7, #10]
	command = ((command << 8) | record.data[1]);
 8002fcc:	897b      	ldrh	r3, [r7, #10]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	b21a      	sxth	r2, r3
 8002fd2:	4b78      	ldr	r3, [pc, #480]	; (80031b4 <ProcessPCCommands+0x204>)
 8002fd4:	7b5b      	ldrb	r3, [r3, #13]
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b21b      	sxth	r3, r3
 8002fdc:	817b      	strh	r3, [r7, #10]


	map_count = sizeof(mod_reg_map) / sizeof(mod_reg_map[0]);
 8002fde:	2357      	movs	r3, #87	; 0x57
 8002fe0:	603b      	str	r3, [r7, #0]


	switch(record.function_code) {
 8002fe2:	4b74      	ldr	r3, [pc, #464]	; (80031b4 <ProcessPCCommands+0x204>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d002      	beq.n	8002ff0 <ProcessPCCommands+0x40>
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d069      	beq.n	80030c2 <ProcessPCCommands+0x112>

			break;


		default:
			break;
 8002fee:	e0dc      	b.n	80031aa <ProcessPCCommands+0x1fa>
			address = record.read_start_address;
 8002ff0:	4b70      	ldr	r3, [pc, #448]	; (80031b4 <ProcessPCCommands+0x204>)
 8002ff2:	885b      	ldrh	r3, [r3, #2]
 8002ff4:	813b      	strh	r3, [r7, #8]
			count = record.read_registers;
 8002ff6:	4b6f      	ldr	r3, [pc, #444]	; (80031b4 <ProcessPCCommands+0x204>)
 8002ff8:	88db      	ldrh	r3, [r3, #6]
 8002ffa:	80fb      	strh	r3, [r7, #6]
			for(i=0; i<(map_count - 1); i++) {
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e00f      	b.n	8003022 <ProcessPCCommands+0x72>
				pmap = &mod_reg_map[i];
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4a6a      	ldr	r2, [pc, #424]	; (80031b8 <ProcessPCCommands+0x208>)
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
				if(pmap->address == address)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	893a      	ldrh	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d008      	beq.n	800302e <ProcessPCCommands+0x7e>
			for(i=0; i<(map_count - 1); i++) {
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3301      	adds	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	3b01      	subs	r3, #1
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	dbea      	blt.n	8003002 <ProcessPCCommands+0x52>
 800302c:	e000      	b.n	8003030 <ProcessPCCommands+0x80>
					break;
 800302e:	bf00      	nop
			if (i != map_count - 1) {
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	3b01      	subs	r3, #1
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	429a      	cmp	r2, r3
 8003038:	f000 80b4 	beq.w	80031a4 <ProcessPCCommands+0x1f4>
				for(i=0,j=0; i<count; i++) {
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e034      	b.n	80030b0 <ProcessPCCommands+0x100>
					record.data[j++] = (uint8_t) ((*pmap->data & 0xFF00) >> 8);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	b299      	uxth	r1, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	613a      	str	r2, [r7, #16]
 8003056:	b2c9      	uxtb	r1, r1
 8003058:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <ProcessPCCommands+0x204>)
 800305a:	4413      	add	r3, r2
 800305c:	460a      	mov	r2, r1
 800305e:	731a      	strb	r2, [r3, #12]
					record.data[j++] = (uint8_t)(*pmap->data & 0xFF);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	8819      	ldrh	r1, [r3, #0]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	613a      	str	r2, [r7, #16]
 800306c:	b2c9      	uxtb	r1, r1
 800306e:	4a51      	ldr	r2, [pc, #324]	; (80031b4 <ProcessPCCommands+0x204>)
 8003070:	4413      	add	r3, r2
 8003072:	460a      	mov	r2, r1
 8003074:	731a      	strb	r2, [r3, #12]
					if (pmap->callback)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <ProcessPCCommands+0xda>
						pmap->callback(pmap->data);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	6852      	ldr	r2, [r2, #4]
 8003086:	4610      	mov	r0, r2
 8003088:	4798      	blx	r3
					pmap++;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	330c      	adds	r3, #12
 800308e:	60fb      	str	r3, [r7, #12]
					if (pmap->address) {
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <ProcessPCCommands+0x10a>
						if(pmap->address != (address + (i+1)))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	893a      	ldrh	r2, [r7, #8]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3301      	adds	r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	4299      	cmp	r1, r3
 80030a8:	d109      	bne.n	80030be <ProcessPCCommands+0x10e>
				for(i=0,j=0; i<count; i++) {
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dbc6      	blt.n	8003046 <ProcessPCCommands+0x96>
		break;
 80030b8:	e074      	b.n	80031a4 <ProcessPCCommands+0x1f4>
						break;
 80030ba:	bf00      	nop
 80030bc:	e072      	b.n	80031a4 <ProcessPCCommands+0x1f4>
							break;
 80030be:	bf00      	nop
		break;
 80030c0:	e070      	b.n	80031a4 <ProcessPCCommands+0x1f4>
			address = record.write_start_address;
 80030c2:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <ProcessPCCommands+0x204>)
 80030c4:	889b      	ldrh	r3, [r3, #4]
 80030c6:	813b      	strh	r3, [r7, #8]
			count = record.write_registers;
 80030c8:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <ProcessPCCommands+0x204>)
 80030ca:	891b      	ldrh	r3, [r3, #8]
 80030cc:	80fb      	strh	r3, [r7, #6]
			for(i=0; i<map_count - 1; i++) {
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e00f      	b.n	80030f4 <ProcessPCCommands+0x144>
				pmap = &mod_reg_map[i];
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4a36      	ldr	r2, [pc, #216]	; (80031b8 <ProcessPCCommands+0x208>)
 80030e0:	4413      	add	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
				if(pmap->address == address)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	893a      	ldrh	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d008      	beq.n	8003100 <ProcessPCCommands+0x150>
			for(i=0; i<map_count - 1; i++) {
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	3301      	adds	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	dbea      	blt.n	80030d4 <ProcessPCCommands+0x124>
 80030fe:	e000      	b.n	8003102 <ProcessPCCommands+0x152>
					break;
 8003100:	bf00      	nop
			if (i != map_count - 1) {
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	3b01      	subs	r3, #1
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	429a      	cmp	r2, r3
 800310a:	d04d      	beq.n	80031a8 <ProcessPCCommands+0x1f8>
				for(i=0,j=0; i<count; i++) {
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	e03d      	b.n	8003192 <ProcessPCCommands+0x1e2>
					*pmap->data = record.data[j++];
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	613a      	str	r2, [r7, #16]
 800311c:	4a25      	ldr	r2, [pc, #148]	; (80031b4 <ProcessPCCommands+0x204>)
 800311e:	4413      	add	r3, r2
 8003120:	7b1a      	ldrb	r2, [r3, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	b292      	uxth	r2, r2
 8003128:	801a      	strh	r2, [r3, #0]
					*pmap->data <<= 8;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0212      	lsls	r2, r2, #8
 8003136:	b292      	uxth	r2, r2
 8003138:	801a      	strh	r2, [r3, #0]
					*pmap->data |= record.data[j++];
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	613a      	str	r2, [r7, #16]
 8003140:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <ProcessPCCommands+0x204>)
 8003142:	4413      	add	r3, r2
 8003144:	7b1a      	ldrb	r2, [r3, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	8819      	ldrh	r1, [r3, #0]
 800314c:	b292      	uxth	r2, r2
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	430a      	orrs	r2, r1
 8003154:	b292      	uxth	r2, r2
 8003156:	801a      	strh	r2, [r3, #0]
					if (pmap->callback)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <ProcessPCCommands+0x1bc>
						pmap->callback(pmap->data);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	6852      	ldr	r2, [r2, #4]
 8003168:	4610      	mov	r0, r2
 800316a:	4798      	blx	r3
					pmap++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	330c      	adds	r3, #12
 8003170:	60fb      	str	r3, [r7, #12]
					if (pmap->address) {
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d010      	beq.n	800319c <ProcessPCCommands+0x1ec>
						if(pmap->address != (address + (i+1)))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	4619      	mov	r1, r3
 8003180:	893a      	ldrh	r2, [r7, #8]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	4299      	cmp	r1, r3
 800318a:	d109      	bne.n	80031a0 <ProcessPCCommands+0x1f0>
				for(i=0,j=0; i<count; i++) {
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3301      	adds	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	429a      	cmp	r2, r3
 8003198:	dbbd      	blt.n	8003116 <ProcessPCCommands+0x166>
			break;
 800319a:	e005      	b.n	80031a8 <ProcessPCCommands+0x1f8>
						break;
 800319c:	bf00      	nop
 800319e:	e003      	b.n	80031a8 <ProcessPCCommands+0x1f8>
							break;
 80031a0:	bf00      	nop
			break;
 80031a2:	e001      	b.n	80031a8 <ProcessPCCommands+0x1f8>
		break;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <ProcessPCCommands+0x1fa>
			break;
 80031a8:	bf00      	nop

	}
}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	24003334 	.word	0x24003334
 80031b8:	24000020 	.word	0x24000020

080031bc <FillTransmitBuffer>:



void FillTransmitBuffer(uint8_t count, uint8_t index)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	460a      	mov	r2, r1
 80031c6:	71fb      	strb	r3, [r7, #7]
 80031c8:	4613      	mov	r3, r2
 80031ca:	71bb      	strb	r3, [r7, #6]
	int i = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
	uint16_t crc_count;
	uint16_t cal_crc;


	for(i=0; i<record.read_byte_count; i++) {
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e00d      	b.n	80031f2 <FillTransmitBuffer+0x36>

		PC_TxBuff[index++] = record.data[i];
 80031d6:	79bb      	ldrb	r3, [r7, #6]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	71ba      	strb	r2, [r7, #6]
 80031dc:	4619      	mov	r1, r3
 80031de:	4a19      	ldr	r2, [pc, #100]	; (8003244 <FillTransmitBuffer+0x88>)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	330c      	adds	r3, #12
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <FillTransmitBuffer+0x8c>)
 80031ea:	545a      	strb	r2, [r3, r1]
	for(i=0; i<record.read_byte_count; i++) {
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3301      	adds	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <FillTransmitBuffer+0x88>)
 80031f4:	7a9b      	ldrb	r3, [r3, #10]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4293      	cmp	r3, r2
 80031fc:	dbeb      	blt.n	80031d6 <FillTransmitBuffer+0x1a>
	}

	crc_count = (record.read_byte_count + 3);
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <FillTransmitBuffer+0x88>)
 8003200:	7a9b      	ldrb	r3, [r3, #10]
 8003202:	b29b      	uxth	r3, r3
 8003204:	3303      	adds	r3, #3
 8003206:	817b      	strh	r3, [r7, #10]
	cal_crc = CRC16(PC_TxBuff,crc_count);
 8003208:	897b      	ldrh	r3, [r7, #10]
 800320a:	4619      	mov	r1, r3
 800320c:	480e      	ldr	r0, [pc, #56]	; (8003248 <FillTransmitBuffer+0x8c>)
 800320e:	f000 f81f 	bl	8003250 <CRC16>
 8003212:	4603      	mov	r3, r0
 8003214:	813b      	strh	r3, [r7, #8]

	// CRC Low Byte first and then High Byte next
	PC_TxBuff[index++] = (uint8_t) (cal_crc & 0x00FF);
 8003216:	79bb      	ldrb	r3, [r7, #6]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	71ba      	strb	r2, [r7, #6]
 800321c:	461a      	mov	r2, r3
 800321e:	893b      	ldrh	r3, [r7, #8]
 8003220:	b2d9      	uxtb	r1, r3
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <FillTransmitBuffer+0x8c>)
 8003224:	5499      	strb	r1, [r3, r2]
	PC_TxBuff[index] = (uint8_t) ((cal_crc & 0xFF00) >> 8);
 8003226:	893b      	ldrh	r3, [r7, #8]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	b29a      	uxth	r2, r3
 800322c:	79bb      	ldrb	r3, [r7, #6]
 800322e:	b2d1      	uxtb	r1, r2
 8003230:	4a05      	ldr	r2, [pc, #20]	; (8003248 <FillTransmitBuffer+0x8c>)
 8003232:	54d1      	strb	r1, [r2, r3]

	pc_data_out = crc_count + 2;
 8003234:	897b      	ldrh	r3, [r7, #10]
 8003236:	3302      	adds	r3, #2
 8003238:	4a04      	ldr	r2, [pc, #16]	; (800324c <FillTransmitBuffer+0x90>)
 800323a:	6013      	str	r3, [r2, #0]

}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	24003334 	.word	0x24003334
 8003248:	24001284 	.word	0x24001284
 800324c:	2400124c 	.word	0x2400124c

08003250 <CRC16>:
/*
 * 	Calculation of CRC16 software logic
 */

uint16_t CRC16(unsigned char *puchMsg, uint16_t usDataLen)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800325c:	23ff      	movs	r3, #255	; 0xff
 800325e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8003260:	23ff      	movs	r3, #255	; 0xff
 8003262:	73bb      	strb	r3, [r7, #14]
	unsigned char uIndex ; /* will index into CRC lookup table */
	uint16_t temp;

	while (usDataLen--) /* pass through message buffer */
 8003264:	e010      	b.n	8003288 <CRC16+0x38>
	{
			uIndex = (unsigned char)(uchCRCLo ^ *puchMsg++) ; /* calculate the CRC */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	7bbb      	ldrb	r3, [r7, #14]
 8003270:	4053      	eors	r3, r2
 8003272:	72fb      	strb	r3, [r7, #11]
			uchCRCLo =(unsigned char)(uchCRCHi ^  auchCRCHi[uIndex]);
 8003274:	7afb      	ldrb	r3, [r7, #11]
 8003276:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <CRC16+0x64>)
 8003278:	5cd2      	ldrb	r2, [r2, r3]
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	4053      	eors	r3, r2
 800327e:	73bb      	strb	r3, [r7, #14]
			uchCRCHi = auchCRCLo[uIndex] ;
 8003280:	7afb      	ldrb	r3, [r7, #11]
 8003282:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <CRC16+0x68>)
 8003284:	5cd3      	ldrb	r3, [r2, r3]
 8003286:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	1e5a      	subs	r2, r3, #1
 800328c:	807a      	strh	r2, [r7, #2]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e9      	bne.n	8003266 <CRC16+0x16>
	}

	temp = uchCRCHi;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	81bb      	strh	r3, [r7, #12]
	return (uint16_t)((temp << 8) | uchCRCLo) ;
 8003296:	89bb      	ldrh	r3, [r7, #12]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	b21a      	sxth	r2, r3
 800329c:	7bbb      	ldrb	r3, [r7, #14]
 800329e:	b21b      	sxth	r3, r3
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b21b      	sxth	r3, r3
 80032a4:	b29b      	uxth	r3, r3
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	0800f9c4 	.word	0x0800f9c4
 80032b8:	0800fac4 	.word	0x0800fac4

080032bc <average_samples>:

void average_samples(uint32_t data, uint16_t channel)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
	static uint16_t avg_counts = 0;
	uint16_t i = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	81fb      	strh	r3, [r7, #14]

	temp_adc_buff[channel] += data;
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <average_samples+0x84>)
 80032d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032d4:	887b      	ldrh	r3, [r7, #2]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	440a      	add	r2, r1
 80032da:	4919      	ldr	r1, [pc, #100]	; (8003340 <average_samples+0x84>)
 80032dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(channel == 13)
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	2b0d      	cmp	r3, #13
 80032e4:	d105      	bne.n	80032f2 <average_samples+0x36>
		 avg_counts++;
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <average_samples+0x88>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <average_samples+0x88>)
 80032f0:	801a      	strh	r2, [r3, #0]

	if(avg_counts >= ADC_MAX_AVERAGE) {
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <average_samples+0x88>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	d91c      	bls.n	8003334 <average_samples+0x78>
		avg_counts = 0;
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <average_samples+0x88>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	801a      	strh	r2, [r3, #0]
		for(i=0; i<=13; i++) {
 8003300:	2300      	movs	r3, #0
 8003302:	81fb      	strh	r3, [r7, #14]
 8003304:	e010      	b.n	8003328 <average_samples+0x6c>
			adc_buff[i] = (temp_adc_buff[i] / ADC_MAX_AVERAGE);
 8003306:	89fb      	ldrh	r3, [r7, #14]
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <average_samples+0x84>)
 800330a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800330e:	89fb      	ldrh	r3, [r7, #14]
 8003310:	0912      	lsrs	r2, r2, #4
 8003312:	490d      	ldr	r1, [pc, #52]	; (8003348 <average_samples+0x8c>)
 8003314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			temp_adc_buff[i] = 0;
 8003318:	89fb      	ldrh	r3, [r7, #14]
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <average_samples+0x84>)
 800331c:	2100      	movs	r1, #0
 800331e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0; i<=13; i++) {
 8003322:	89fb      	ldrh	r3, [r7, #14]
 8003324:	3301      	adds	r3, #1
 8003326:	81fb      	strh	r3, [r7, #14]
 8003328:	89fb      	ldrh	r3, [r7, #14]
 800332a:	2b0d      	cmp	r3, #13
 800332c:	d9eb      	bls.n	8003306 <average_samples+0x4a>
		}
		calculate_adc_voltage = 1;
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <average_samples+0x90>)
 8003330:	2201      	movs	r2, #1
 8003332:	801a      	strh	r2, [r3, #0]
	}

}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	24000984 	.word	0x24000984
 8003344:	24003398 	.word	0x24003398
 8003348:	24000884 	.word	0x24000884
 800334c:	24000a04 	.word	0x24000a04

08003350 <clear_pulse_counter>:

}


void clear_pulse_counter(void *data)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	int *val;

	val = (int *)data;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	60fb      	str	r3, [r7, #12]

	if(*val != 0)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d014      	beq.n	800338e <clear_pulse_counter+0x3e>
	{
		start_time = 0;
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <clear_pulse_counter+0x48>)
 8003366:	2200      	movs	r2, #0
 8003368:	801a      	strh	r2, [r3, #0]
		pulse_frequency = 0;
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <clear_pulse_counter+0x4c>)
 800336c:	2200      	movs	r2, #0
 800336e:	801a      	strh	r2, [r3, #0]
		timer7_count = 0;
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <clear_pulse_counter+0x50>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
		HV_input_prev_state = 0;
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <clear_pulse_counter+0x54>)
 8003378:	2200      	movs	r2, #0
 800337a:	801a      	strh	r2, [r3, #0]
		HV_input_state = 0;
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <clear_pulse_counter+0x58>)
 800337e:	2200      	movs	r2, #0
 8003380:	801a      	strh	r2, [r3, #0]
		pulse_acc = 0;
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <clear_pulse_counter+0x5c>)
 8003384:	2200      	movs	r2, #0
 8003386:	801a      	strh	r2, [r3, #0]
		HAL_Delay(5);
 8003388:	2005      	movs	r0, #5
 800338a:	f001 fea5 	bl	80050d8 <HAL_Delay>
	}

}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	2400135c 	.word	0x2400135c
 800339c:	24001352 	.word	0x24001352
 80033a0:	24001354 	.word	0x24001354
 80033a4:	2400135a 	.word	0x2400135a
 80033a8:	24001358 	.word	0x24001358
 80033ac:	2400134e 	.word	0x2400134e

080033b0 <start_fall_time_test>:

void start_fall_time_test(void *data)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	int *val;

	val = (int *)data;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60fb      	str	r3, [r7, #12]

	if(*val != 0)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <start_fall_time_test+0x2c>
	{
		Measure_fall_time = 1;
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <start_fall_time_test+0x38>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	801a      	strh	r2, [r3, #0]
		falltime_counter = 0;
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <start_fall_time_test+0x3c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	801a      	strh	r2, [r3, #0]
		fall_time = 0;
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <start_fall_time_test+0x40>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	801a      	strh	r2, [r3, #0]
		start_falltime_counter = 0;
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <start_fall_time_test+0x44>)
 80033d8:	2200      	movs	r2, #0
 80033da:	801a      	strh	r2, [r3, #0]
	}

}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	24001374 	.word	0x24001374
 80033ec:	2400136a 	.word	0x2400136a
 80033f0:	24001370 	.word	0x24001370
 80033f4:	24001368 	.word	0x24001368

080033f8 <start_rise_time_test>:

void start_rise_time_test(void *data)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	int *val;

	val = (int *)data;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	60fb      	str	r3, [r7, #12]

	if(*val != 0)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <start_rise_time_test+0x2c>
	{
		Measure_rise_time = 1;
 800340c:	4b08      	ldr	r3, [pc, #32]	; (8003430 <start_rise_time_test+0x38>)
 800340e:	2201      	movs	r2, #1
 8003410:	801a      	strh	r2, [r3, #0]
		risetime_counter = 0;
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <start_rise_time_test+0x3c>)
 8003414:	2200      	movs	r2, #0
 8003416:	801a      	strh	r2, [r3, #0]
		rise_time = 0;
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <start_rise_time_test+0x40>)
 800341a:	2200      	movs	r2, #0
 800341c:	801a      	strh	r2, [r3, #0]
		start_risetime_counter = 0;
 800341e:	4b07      	ldr	r3, [pc, #28]	; (800343c <start_rise_time_test+0x44>)
 8003420:	2200      	movs	r2, #0
 8003422:	801a      	strh	r2, [r3, #0]
	}
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	24001376 	.word	0x24001376
 8003434:	2400136e 	.word	0x2400136e
 8003438:	24001372 	.word	0x24001372
 800343c:	2400136c 	.word	0x2400136c

08003440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	f6ad 7df8 	subw	sp, sp, #4088	; 0xff8
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t toggle = 0xFF;
 8003448:	23ff      	movs	r3, #255	; 0xff
 800344a:	f887 3ff7 	strb.w	r3, [r7, #4087]	; 0xff7
	uint32_t status = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
	uint32_t ch_sel = 1;
 8003454:	2301      	movs	r3, #1
 8003456:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
	uint32_t ch_seq = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
	static uint16_t i = 0;
	uint16_t j[14] = {16,17,14,15,18,19,3,7,9,5,10,11,4,8};
 8003460:	4bc8      	ldr	r3, [pc, #800]	; (8003784 <main+0x344>)
 8003462:	f507 647a 	add.w	r4, r7, #4000	; 0xfa0
 8003466:	461d      	mov	r5, r3
 8003468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800346a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800346c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint16_t k = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	f8a7 3fde 	strh.w	r3, [r7, #4062]	; 0xfde
	uint16_t count = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	f8a7 3ff4 	strh.w	r3, [r7, #4084]	; 0xff4
	double	temp = 0.0;
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	f507 617d 	add.w	r1, r7, #4048	; 0xfd0
 800348c:	e9c1 2300 	strd	r2, r3, [r1]
	double temp_current = 0.0;
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 800349c:	e9c1 2300 	strd	r2, r3, [r1]
	uint16_t supplycurrentreadings[2000];
	uint16_t current_sample = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8a7 3ff2 	strh.w	r3, [r7, #4082]	; 0xff2
	uint32_t current_acc = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80034ac:	4bb6      	ldr	r3, [pc, #728]	; (8003788 <main+0x348>)
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11b      	bne.n	80034f0 <main+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034b8:	f3bf 8f4f 	dsb	sy
}
 80034bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034be:	f3bf 8f6f 	isb	sy
}
 80034c2:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80034c4:	4bb0      	ldr	r3, [pc, #704]	; (8003788 <main+0x348>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80034cc:	f3bf 8f4f 	dsb	sy
}
 80034d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034d2:	f3bf 8f6f 	isb	sy
}
 80034d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80034d8:	4bab      	ldr	r3, [pc, #684]	; (8003788 <main+0x348>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4aaa      	ldr	r2, [pc, #680]	; (8003788 <main+0x348>)
 80034de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80034e4:	f3bf 8f4f 	dsb	sy
}
 80034e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034ea:	f3bf 8f6f 	isb	sy
}
 80034ee:	e000      	b.n	80034f2 <main+0xb2>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80034f0:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80034f2:	4ba5      	ldr	r3, [pc, #660]	; (8003788 <main+0x348>)
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d143      	bne.n	8003586 <main+0x146>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80034fe:	4ba2      	ldr	r3, [pc, #648]	; (8003788 <main+0x348>)
 8003500:	2200      	movs	r2, #0
 8003502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003506:	f3bf 8f4f 	dsb	sy
}
 800350a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800350c:	4b9e      	ldr	r3, [pc, #632]	; (8003788 <main+0x348>)
 800350e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003512:	f8c7 3fc4 	str.w	r3, [r7, #4036]	; 0xfc4

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003516:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	; 0xfc4
 800351a:	0b5b      	lsrs	r3, r3, #13
 800351c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003520:	f8c7 3fc0 	str.w	r3, [r7, #4032]	; 0xfc0
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003524:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	; 0xfc4
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800352e:	f8c7 3fbc 	str.w	r3, [r7, #4028]	; 0xfbc
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003532:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800353c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800353e:	f8d7 2fbc 	ldr.w	r2, [r7, #4028]	; 0xfbc
 8003542:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003544:	4990      	ldr	r1, [pc, #576]	; (8003788 <main+0x348>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800354c:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	f8c7 2fbc 	str.w	r2, [r7, #4028]	; 0xfbc
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1eb      	bne.n	8003532 <main+0xf2>
    } while(sets-- != 0U);
 800355a:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 800355e:	1e5a      	subs	r2, r3, #1
 8003560:	f8c7 2fc0 	str.w	r2, [r7, #4032]	; 0xfc0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1dd      	bne.n	8003524 <main+0xe4>
  __ASM volatile ("dsb 0xF":::"memory");
 8003568:	f3bf 8f4f 	dsb	sy
}
 800356c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800356e:	4b86      	ldr	r3, [pc, #536]	; (8003788 <main+0x348>)
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4a85      	ldr	r2, [pc, #532]	; (8003788 <main+0x348>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800357a:	f3bf 8f4f 	dsb	sy
}
 800357e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003580:	f3bf 8f6f 	isb	sy
}
 8003584:	e000      	b.n	8003588 <main+0x148>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003586:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003588:	f001 fd14 	bl	8004fb4 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800358c:	f001 f858 	bl	8004640 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003590:	f000 fa32 	bl	80039f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003594:	f000 faaa 	bl	8003aec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003598:	f000 fee2 	bl	8004360 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800359c:	f000 fe40 	bl	8004220 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80035a0:	f000 fe92 	bl	80042c8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80035a4:	f000 fcca 	bl	8003f3c <MX_SPI2_Init>
  MX_SPI3_Init();
 80035a8:	f000 fd20 	bl	8003fec <MX_SPI3_Init>
  MX_ADC1_Init();
 80035ac:	f000 faec 	bl	8003b88 <MX_ADC1_Init>
  MX_TIM7_Init();
 80035b0:	f000 fe00 	bl	80041b4 <MX_TIM7_Init>
  MX_ADC3_Init();
 80035b4:	f000 fc46 	bl	8003e44 <MX_ADC3_Init>
  MX_TIM6_Init();
 80035b8:	f000 fdc4 	bl	8004144 <MX_TIM6_Init>
  MX_SPI4_Init();
 80035bc:	f000 fd6c 	bl	8004098 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  	HAL_UART_Receive_IT(&huart1, &pc_data, 1);
 80035c0:	2201      	movs	r2, #1
 80035c2:	4972      	ldr	r1, [pc, #456]	; (800378c <main+0x34c>)
 80035c4:	4872      	ldr	r0, [pc, #456]	; (8003790 <main+0x350>)
 80035c6:	f009 fdb3 	bl	800d130 <HAL_UART_Receive_IT>
  	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80035ca:	2201      	movs	r2, #1
 80035cc:	4971      	ldr	r1, [pc, #452]	; (8003794 <main+0x354>)
 80035ce:	4872      	ldr	r0, [pc, #456]	; (8003798 <main+0x358>)
 80035d0:	f009 fdae 	bl	800d130 <HAL_UART_Receive_IT>
  	HAL_Delay(500);
 80035d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035d8:	f001 fd7e 	bl	80050d8 <HAL_Delay>

  	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, 2);
  	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80035dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80035e0:	2100      	movs	r1, #0
 80035e2:	486e      	ldr	r0, [pc, #440]	; (800379c <main+0x35c>)
 80035e4:	f003 f9ee 	bl	80069c4 <HAL_ADCEx_Calibration_Start>


  	//HAL_ADC_Stop(&hadc3);
  	//ADC_Disable(&hadc3);
  	HAL_Delay(500);
 80035e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035ec:	f001 fd74 	bl	80050d8 <HAL_Delay>
  //	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buff, 16);
  	//HAL_Delay(500);



  	HAL_TIM_Base_Start_IT(&htim6);	// 10mSec interrupt for capturing the AC Input
 80035f0:	486b      	ldr	r0, [pc, #428]	; (80037a0 <main+0x360>)
 80035f2:	f009 f9af 	bl	800c954 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim7);	// Timer for pulse accumulator
 80035f6:	486b      	ldr	r0, [pc, #428]	; (80037a4 <main+0x364>)
 80035f8:	f009 f9ac 	bl	800c954 <HAL_TIM_Base_Start_IT>
  	ClearOutputs();
 80035fc:	f7ff fb6e 	bl	8002cdc <ClearOutputs>
  	//HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET); // UUT Power ON
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);		// RS232 transmit mode always for Quixie board
 8003600:	2201      	movs	r2, #1
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	4868      	ldr	r0, [pc, #416]	; (80037a8 <main+0x368>)
 8003606:	f004 fbd7 	bl	8007db8 <HAL_GPIO_WritePin>
  	//  init_pcp_board();
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800360a:	2201      	movs	r2, #1
 800360c:	2104      	movs	r1, #4
 800360e:	4866      	ldr	r0, [pc, #408]	; (80037a8 <main+0x368>)
 8003610:	f004 fbd2 	bl	8007db8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive_IT(&huart1, &pc_data, 1);
 8003614:	2201      	movs	r2, #1
 8003616:	495d      	ldr	r1, [pc, #372]	; (800378c <main+0x34c>)
 8003618:	485d      	ldr	r0, [pc, #372]	; (8003790 <main+0x350>)
 800361a:	f009 fd89 	bl	800d130 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800361e:	2201      	movs	r2, #1
 8003620:	495c      	ldr	r1, [pc, #368]	; (8003794 <main+0x354>)
 8003622:	485d      	ldr	r0, [pc, #372]	; (8003798 <main+0x358>)
 8003624:	f009 fd84 	bl	800d130 <HAL_UART_Receive_IT>
	  //HAL_ADC_Start_DMA(&hadc3, (uint32_t *)dma_buff, 2);

	  		PCModbusRTU();
 8003628:	f7fc ffd4 	bl	80005d4 <PCModbusRTU>
	  		UUTModbusRTU();
 800362c:	f7fd fb24 	bl	8000c78 <UUTModbusRTU>
	  		ReadInputs();
 8003630:	f7fe f9f8 	bl	8001a24 <ReadInputs>

	  		// Toggle status led for every 1 seconds
	  		if(ticks >= 100) {
 8003634:	4b5d      	ldr	r3, [pc, #372]	; (80037ac <main+0x36c>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	2b63      	cmp	r3, #99	; 0x63
 800363a:	d90c      	bls.n	8003656 <main+0x216>
	  			ticks = 0;
 800363c:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <main+0x36c>)
 800363e:	2200      	movs	r2, #0
 8003640:	801a      	strh	r2, [r3, #0]
	  			update_led(toggle);
 8003642:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	; 0xff7
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fd0a 	bl	8002060 <update_led>
	  			toggle = ~toggle;
 800364c:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	; 0xff7
 8003650:	43db      	mvns	r3, r3
 8003652:	f887 3ff7 	strb.w	r3, [r7, #4087]	; 0xff7
	  		}


	  		HAL_ADC_Stop(&hadc1);
 8003656:	4851      	ldr	r0, [pc, #324]	; (800379c <main+0x35c>)
 8003658:	f002 fa22 	bl	8005aa0 <HAL_ADC_Stop>
	  		if(i == 0)
 800365c:	4b54      	ldr	r3, [pc, #336]	; (80037b0 <main+0x370>)
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <main+0x230>
	  		HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8003664:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003668:	2100      	movs	r1, #0
 800366a:	484c      	ldr	r0, [pc, #304]	; (800379c <main+0x35c>)
 800366c:	f003 f9aa 	bl	80069c4 <HAL_ADCEx_Calibration_Start>

	  		status = hadc1.Instance->CR;
 8003670:	4b4a      	ldr	r3, [pc, #296]	; (800379c <main+0x35c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
	  		ch_sel = 1;
 800367a:	2301      	movs	r3, #1
 800367c:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
	  		k = j[i];
 8003680:	4b4b      	ldr	r3, [pc, #300]	; (80037b0 <main+0x370>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800368a:	443b      	add	r3, r7
 800368c:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 8003690:	f8a7 3fde 	strh.w	r3, [r7, #4062]	; 0xfde

	  		if((status & 0x4) == 0) {
 8003694:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	; 0xfe8
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d13e      	bne.n	800371e <main+0x2de>
	  			ch_sel = (ch_sel << k);
 80036a0:	f8b7 3fde 	ldrh.w	r3, [r7, #4062]	; 0xfde
 80036a4:	f8d7 2fe4 	ldr.w	r2, [r7, #4068]	; 0xfe4
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
	  			hadc1.Instance->PCSEL = ch_sel;
 80036b0:	4b3a      	ldr	r3, [pc, #232]	; (800379c <main+0x35c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8d7 2fe4 	ldr.w	r2, [r7, #4068]	; 0xfe4
 80036b8:	61da      	str	r2, [r3, #28]
	  			ch_seq = (k << 6);
 80036ba:	f8b7 3fde 	ldrh.w	r3, [r7, #4062]	; 0xfde
 80036be:	019b      	lsls	r3, r3, #6
 80036c0:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
	  			hadc1.Instance->SQR1  = ch_seq;
 80036c4:	4b35      	ldr	r3, [pc, #212]	; (800379c <main+0x35c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8d7 2fe0 	ldr.w	r2, [r7, #4064]	; 0xfe0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30

	  			HAL_ADC_Start(&hadc1);
 80036ce:	4833      	ldr	r0, [pc, #204]	; (800379c <main+0x35c>)
 80036d0:	f002 f91c 	bl	800590c <HAL_ADC_Start>
	  			HAL_ADC_PollForConversion(&hadc1, 10);
 80036d4:	210a      	movs	r1, #10
 80036d6:	4831      	ldr	r0, [pc, #196]	; (800379c <main+0x35c>)
 80036d8:	f002 fa16 	bl	8005b08 <HAL_ADC_PollForConversion>
	  			raw_adc_buff[i] = HAL_ADC_GetValue(&hadc1);
 80036dc:	4b34      	ldr	r3, [pc, #208]	; (80037b0 <main+0x370>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	461c      	mov	r4, r3
 80036e2:	482e      	ldr	r0, [pc, #184]	; (800379c <main+0x35c>)
 80036e4:	f002 fb04 	bl	8005cf0 <HAL_ADC_GetValue>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <main+0x374>)
 80036ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	  			average_samples(raw_adc_buff[i], i);
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <main+0x370>)
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <main+0x374>)
 80036f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fc:	4a2c      	ldr	r2, [pc, #176]	; (80037b0 <main+0x370>)
 80036fe:	8812      	ldrh	r2, [r2, #0]
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fdda 	bl	80032bc <average_samples>

	  			if(i++ >= 13)
 8003708:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <main+0x370>)
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	b291      	uxth	r1, r2
 8003710:	4a27      	ldr	r2, [pc, #156]	; (80037b0 <main+0x370>)
 8003712:	8011      	strh	r1, [r2, #0]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d902      	bls.n	800371e <main+0x2de>
	  				i = 0;
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <main+0x370>)
 800371a:	2200      	movs	r2, #0
 800371c:	801a      	strh	r2, [r3, #0]
	  		}

	  		if(calculate_adc_voltage) {
 800371e:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <main+0x378>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80dc 	beq.w	80038e0 <main+0x4a0>

	  			calculate_adc_voltage = 0;
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <main+0x378>)
 800372a:	2200      	movs	r2, #0
 800372c:	801a      	strh	r2, [r3, #0]
	  			for(count=0; count<=13; count++) {
 800372e:	2300      	movs	r3, #0
 8003730:	f8a7 3ff4 	strh.w	r3, [r7, #4084]	; 0xff4
 8003734:	e0cd      	b.n	80038d2 <main+0x492>

	  				if((count>=0) && (count<=3)) {
 8003736:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 800373a:	2b03      	cmp	r3, #3
 800373c:	d844      	bhi.n	80037c8 <main+0x388>
	  					temp = (double)((float)adc_buff[count] * scale_factor_24V);
 800373e:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 8003742:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <main+0x37c>)
 8003744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <main+0x380>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800375e:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003762:	ed83 7b00 	vstr	d7, [r3]
	  					adc_data[count] = (uint16_t)temp;
 8003766:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 800376a:	f507 627d 	add.w	r2, r7, #4048	; 0xfd0
 800376e:	ed92 7b00 	vldr	d7, [r2]
 8003772:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003776:	ee17 2a90 	vmov	r2, s15
 800377a:	b291      	uxth	r1, r2
 800377c:	4a11      	ldr	r2, [pc, #68]	; (80037c4 <main+0x384>)
 800377e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003782:	e0a1      	b.n	80038c8 <main+0x488>
 8003784:	0800f848 	.word	0x0800f848
 8003788:	e000ed00 	.word	0xe000ed00
 800378c:	24001258 	.word	0x24001258
 8003790:	2400075c 	.word	0x2400075c
 8003794:	24001259 	.word	0x24001259
 8003798:	240007f0 	.word	0x240007f0
 800379c:	24000464 	.word	0x24000464
 80037a0:	240006c4 	.word	0x240006c4
 80037a4:	24000710 	.word	0x24000710
 80037a8:	58020c00 	.word	0x58020c00
 80037ac:	24001300 	.word	0x24001300
 80037b0:	2400339a 	.word	0x2400339a
 80037b4:	24000904 	.word	0x24000904
 80037b8:	24000a04 	.word	0x24000a04
 80037bc:	24000884 	.word	0x24000884
 80037c0:	24000004 	.word	0x24000004
 80037c4:	24000a08 	.word	0x24000a08
	  				}
	  				else if((count>=4) && (count<=5)) {
 80037c8:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d926      	bls.n	800381e <main+0x3de>
 80037d0:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d822      	bhi.n	800381e <main+0x3de>
	  					temp = (double)((float)adc_buff[count] * scale_factor_5V);
 80037d8:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 80037dc:	4a7a      	ldr	r2, [pc, #488]	; (80039c8 <main+0x588>)
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037ea:	4b78      	ldr	r3, [pc, #480]	; (80039cc <main+0x58c>)
 80037ec:	edd3 7a00 	vldr	s15, [r3]
 80037f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037f8:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 80037fc:	ed83 7b00 	vstr	d7, [r3]
	  					adc_data[count] = (uint16_t)temp;
 8003800:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 8003804:	f507 627d 	add.w	r2, r7, #4048	; 0xfd0
 8003808:	ed92 7b00 	vldr	d7, [r2]
 800380c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003810:	ee17 2a90 	vmov	r2, s15
 8003814:	b291      	uxth	r1, r2
 8003816:	4a6e      	ldr	r2, [pc, #440]	; (80039d0 <main+0x590>)
 8003818:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800381c:	e054      	b.n	80038c8 <main+0x488>
	  				}
	  				else if((count>=6) && (count<=11)) {
 800381e:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 8003822:	2b05      	cmp	r3, #5
 8003824:	d926      	bls.n	8003874 <main+0x434>
 8003826:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 800382a:	2b0b      	cmp	r3, #11
 800382c:	d822      	bhi.n	8003874 <main+0x434>
	  					temp = (double)((float)adc_buff[count] * scale_factor_3V3);
 800382e:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 8003832:	4a65      	ldr	r2, [pc, #404]	; (80039c8 <main+0x588>)
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003840:	4b64      	ldr	r3, [pc, #400]	; (80039d4 <main+0x594>)
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800384e:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8003852:	ed83 7b00 	vstr	d7, [r3]
	  					adc_data[count] = (uint16_t)temp;
 8003856:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 800385a:	f507 627d 	add.w	r2, r7, #4048	; 0xfd0
 800385e:	ed92 7b00 	vldr	d7, [r2]
 8003862:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003866:	ee17 2a90 	vmov	r2, s15
 800386a:	b291      	uxth	r1, r2
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <main+0x590>)
 800386e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003872:	e029      	b.n	80038c8 <main+0x488>
	  				}
	  				else if((count>=12) && (count<=13)) {
 8003874:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 8003878:	2b0b      	cmp	r3, #11
 800387a:	d925      	bls.n	80038c8 <main+0x488>
 800387c:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 8003880:	2b0d      	cmp	r3, #13
 8003882:	d821      	bhi.n	80038c8 <main+0x488>
	  					temp = (double)((float)adc_buff[count] * scale_factor_5V);
 8003884:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 8003888:	4a4f      	ldr	r2, [pc, #316]	; (80039c8 <main+0x588>)
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003896:	4b4d      	ldr	r3, [pc, #308]	; (80039cc <main+0x58c>)
 8003898:	edd3 7a00 	vldr	s15, [r3]
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038a4:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 80038a8:	ed83 7b00 	vstr	d7, [r3]
	  					adc_data[count] = (uint16_t)temp;
 80038ac:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 80038b0:	f507 627d 	add.w	r2, r7, #4048	; 0xfd0
 80038b4:	ed92 7b00 	vldr	d7, [r2]
 80038b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80038bc:	ee17 2a90 	vmov	r2, s15
 80038c0:	b291      	uxth	r1, r2
 80038c2:	4a43      	ldr	r2, [pc, #268]	; (80039d0 <main+0x590>)
 80038c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  			for(count=0; count<=13; count++) {
 80038c8:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 80038cc:	3301      	adds	r3, #1
 80038ce:	f8a7 3ff4 	strh.w	r3, [r7, #4084]	; 0xff4
 80038d2:	f8b7 3ff4 	ldrh.w	r3, [r7, #4084]	; 0xff4
 80038d6:	2b0d      	cmp	r3, #13
 80038d8:	f67f af2d 	bls.w	8003736 <main+0x2f6>

	  				}
	  			}

	  			calculate_board_power();
 80038dc:	f7ff fb18 	bl	8002f10 <calculate_board_power>
	  		}

	  		//calculating Supply Current measured from the Current measurement board
	  		//Using 2000 samples to find the average current consumption
	  		if(current_sample < 2000)
 80038e0:	f8b7 3ff2 	ldrh.w	r3, [r7, #4082]	; 0xff2
 80038e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80038e8:	d21d      	bcs.n	8003926 <main+0x4e6>
			{
				current_sample++;
 80038ea:	f8b7 3ff2 	ldrh.w	r3, [r7, #4082]	; 0xff2
 80038ee:	3301      	adds	r3, #1
 80038f0:	f8a7 3ff2 	strh.w	r3, [r7, #4082]	; 0xff2
				supplycurrentreadings[current_sample] = adc_data[12];
 80038f4:	f8b7 2ff2 	ldrh.w	r2, [r7, #4082]	; 0xff2
 80038f8:	4b35      	ldr	r3, [pc, #212]	; (80039d0 <main+0x590>)
 80038fa:	8b19      	ldrh	r1, [r3, #24]
 80038fc:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8003900:	f6a3 73f8 	subw	r3, r3, #4088	; 0xff8
 8003904:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				current_acc = current_acc + supplycurrentreadings[current_sample];
 8003908:	f8b7 2ff2 	ldrh.w	r2, [r7, #4082]	; 0xff2
 800390c:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8003910:	f6a3 73f8 	subw	r3, r3, #4088	; 0xff8
 8003914:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003918:	461a      	mov	r2, r3
 800391a:	f8d7 3fec 	ldr.w	r3, [r7, #4076]	; 0xfec
 800391e:	4413      	add	r3, r2
 8003920:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
 8003924:	e024      	b.n	8003970 <main+0x530>

			}
	  		else
	  		{
				current_sample = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	f8a7 3ff2 	strh.w	r3, [r7, #4082]	; 0xff2
				temp_current = ((current_acc/2000) - 2500)/0.4;	//2.5V for Zero current and above that 400mV or 0.4V per Amp.
 800392c:	f8d7 3fec 	ldr.w	r3, [r7, #4076]	; 0xfec
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <main+0x598>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	09db      	lsrs	r3, r3, #7
 8003938:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003944:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 80039c0 <main+0x580>
 8003948:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800394c:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8003950:	ed83 7b00 	vstr	d7, [r3]
				Supply_Current = (uint16_t)(temp_current);		//Current value in mA - milliamps
 8003954:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8003958:	ed93 7b00 	vldr	d7, [r3]
 800395c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003960:	ee17 3a90 	vmov	r3, s15
 8003964:	b29a      	uxth	r2, r3
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <main+0x59c>)
 8003968:	801a      	strh	r2, [r3, #0]
				current_acc = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
			}

	  		//Reading HV analog inputs for Pico Nexus (ADC3 input 0 and 1)
	  		read_analog_data1();
 8003970:	f7fe f9c6 	bl	8001d00 <read_analog_data1>

			// Counting PZD output pulses
			HV_input_prev_state = HV_input_state;
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <main+0x5a0>)
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <main+0x5a4>)
 800397a:	801a      	strh	r2, [r3, #0]
			HV_input_state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
 800397c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003980:	4819      	ldr	r0, [pc, #100]	; (80039e8 <main+0x5a8>)
 8003982:	f004 fa01 	bl	8007d88 <HAL_GPIO_ReadPin>
 8003986:	4603      	mov	r3, r0
 8003988:	b29a      	uxth	r2, r3
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <main+0x5a0>)
 800398c:	801a      	strh	r2, [r3, #0]
			if((HV_input_prev_state == 0) && (HV_input_state == 1))
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <main+0x5a4>)
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <main+0x576>
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <main+0x5a0>)
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d10b      	bne.n	80039b6 <main+0x576>
			{
				start_time++;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <main+0x5ac>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <main+0x5ac>)
 80039a8:	801a      	strh	r2, [r3, #0]
				pulse_acc++;
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <main+0x5b0>)
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	3301      	adds	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <main+0x5b0>)
 80039b4:	801a      	strh	r2, [r3, #0]
			}

	  		//Start capturing ADC data in Timer7 interrupt after reaching main.
	  		start_capture = 1;
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <main+0x5b4>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart1, &pc_data, 1);
 80039bc:	e62a      	b.n	8003614 <main+0x1d4>
 80039be:	bf00      	nop
 80039c0:	9999999a 	.word	0x9999999a
 80039c4:	3fd99999 	.word	0x3fd99999
 80039c8:	24000884 	.word	0x24000884
 80039cc:	24000008 	.word	0x24000008
 80039d0:	24000a08 	.word	0x24000a08
 80039d4:	2400000c 	.word	0x2400000c
 80039d8:	10624dd3 	.word	0x10624dd3
 80039dc:	24000a72 	.word	0x24000a72
 80039e0:	24001358 	.word	0x24001358
 80039e4:	2400135a 	.word	0x2400135a
 80039e8:	58020c00 	.word	0x58020c00
 80039ec:	2400135c 	.word	0x2400135c
 80039f0:	2400134e 	.word	0x2400134e
 80039f4:	24000a70 	.word	0x24000a70

080039f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b09c      	sub	sp, #112	; 0x70
 80039fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a02:	224c      	movs	r2, #76	; 0x4c
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f00b fee6 	bl	800f7d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	2220      	movs	r2, #32
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f00b fee0 	bl	800f7d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003a18:	2002      	movs	r0, #2
 8003a1a:	f004 f9e7 	bl	8007dec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4b30      	ldr	r3, [pc, #192]	; (8003ae4 <SystemClock_Config+0xec>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	4a2f      	ldr	r2, [pc, #188]	; (8003ae4 <SystemClock_Config+0xec>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <SystemClock_Config+0xec>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	4b2b      	ldr	r3, [pc, #172]	; (8003ae8 <SystemClock_Config+0xf0>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <SystemClock_Config+0xf0>)
 8003a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a42:	6193      	str	r3, [r2, #24]
 8003a44:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <SystemClock_Config+0xf0>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003a50:	bf00      	nop
 8003a52:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <SystemClock_Config+0xf0>)
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5e:	d1f8      	bne.n	8003a52 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003a72:	2302      	movs	r3, #2
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003a76:	2364      	movs	r3, #100	; 0x64
 8003a78:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a82:	2302      	movs	r3, #2
 8003a84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003a86:	2308      	movs	r3, #8
 8003a88:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 f9e2 	bl	8007e60 <HAL_RCC_OscConfig>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003aa2:	f000 fdf9 	bl	8004698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aa6:	233f      	movs	r3, #63	; 0x3f
 8003aa8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 fe22 	bl	8008714 <HAL_RCC_ClockConfig>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8003ad6:	f000 fddf 	bl	8004698 <Error_Handler>
  }
}
 8003ada:	bf00      	nop
 8003adc:	3770      	adds	r7, #112	; 0x70
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	58000400 	.word	0x58000400
 8003ae8:	58024800 	.word	0x58024800

08003aec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0b0      	sub	sp, #192	; 0xc0
 8003af0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003af2:	463b      	mov	r3, r7
 8003af4:	22c0      	movs	r2, #192	; 0xc0
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f00b fe6d 	bl	800f7d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8003afe:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <PeriphCommonClock_Config+0x98>)
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8003b0c:	2312      	movs	r3, #18
 8003b0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8003b10:	2301      	movs	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003b14:	2302      	movs	r3, #2
 8003b16:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003b1c:	23c0      	movs	r3, #192	; 0xc0
 8003b1e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003b20:	2320      	movs	r3, #32
 8003b22:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8003b24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 8;
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 150;
 8003b2e:	2396      	movs	r3, #150	; 0x96
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003b32:	2302      	movs	r3, #2
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003b36:	2302      	movs	r3, #2
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b46:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8003b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b50:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 8003b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b56:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8003b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b68:	463b      	mov	r3, r7
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f005 f95e 	bl	8008e2c <HAL_RCCEx_PeriphCLKConfig>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <PeriphCommonClock_Config+0x8e>
  {
    Error_Handler();
 8003b76:	f000 fd8f 	bl	8004698 <Error_Handler>
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	37c0      	adds	r7, #192	; 0xc0
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	00083003 	.word	0x00083003

08003b88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
 8003ba8:	615a      	str	r2, [r3, #20]
 8003baa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003bac:	4b95      	ldr	r3, [pc, #596]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bae:	4a96      	ldr	r2, [pc, #600]	; (8003e08 <MX_ADC1_Init+0x280>)
 8003bb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003bb2:	4b94      	ldr	r3, [pc, #592]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8003bb8:	4b92      	ldr	r3, [pc, #584]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003bbe:	4b91      	ldr	r3, [pc, #580]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bc4:	4b8f      	ldr	r3, [pc, #572]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003bca:	4b8e      	ldr	r3, [pc, #568]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003bd0:	4b8c      	ldr	r3, [pc, #560]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 8003bd6:	4b8b      	ldr	r3, [pc, #556]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bd8:	220e      	movs	r2, #14
 8003bda:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003bdc:	4b89      	ldr	r3, [pc, #548]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003be2:	4b88      	ldr	r3, [pc, #544]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003be8:	4b86      	ldr	r3, [pc, #536]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DFSDM;
 8003bee:	4b85      	ldr	r3, [pc, #532]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003bf4:	4b83      	ldr	r3, [pc, #524]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003bfa:	4b82      	ldr	r3, [pc, #520]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8003c00:	4b80      	ldr	r3, [pc, #512]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = 16;
 8003c08:	4b7e      	ldr	r3, [pc, #504]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003c0a:	2210      	movs	r2, #16
 8003c0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8003c0e:	4b7d      	ldr	r3, [pc, #500]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003c14:	4b7b      	ldr	r3, [pc, #492]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003c1a:	4b7a      	ldr	r3, [pc, #488]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c20:	4878      	ldr	r0, [pc, #480]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003c22:	f001 fcd1 	bl	80055c8 <HAL_ADC_Init>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8003c2c:	f000 fd34 	bl	8004698 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c34:	f107 031c 	add.w	r3, r7, #28
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4872      	ldr	r0, [pc, #456]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003c3c:	f002 ff26 	bl	8006a8c <HAL_ADCEx_MultiModeConfigChannel>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8003c46:	f000 fd27 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8003c4a:	4b70      	ldr	r3, [pc, #448]	; (8003e0c <MX_ADC1_Init+0x284>)
 8003c4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c4e:	2306      	movs	r3, #6
 8003c50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8003c52:	2302      	movs	r3, #2
 8003c54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c56:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003c5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c68:	463b      	mov	r3, r7
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4865      	ldr	r0, [pc, #404]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003c6e:	f002 f84d 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8003c78:	f000 fd0e 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <MX_ADC1_Init+0x288>)
 8003c7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003c80:	230c      	movs	r3, #12
 8003c82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c84:	463b      	mov	r3, r7
 8003c86:	4619      	mov	r1, r3
 8003c88:	485e      	ldr	r0, [pc, #376]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003c8a:	f002 f83f 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8003c94:	f000 fd00 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003c98:	4b5e      	ldr	r3, [pc, #376]	; (8003e14 <MX_ADC1_Init+0x28c>)
 8003c9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003c9c:	2312      	movs	r3, #18
 8003c9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4857      	ldr	r0, [pc, #348]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003ca6:	f002 f831 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8003cb0:	f000 fcf2 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003cb4:	4b58      	ldr	r3, [pc, #352]	; (8003e18 <MX_ADC1_Init+0x290>)
 8003cb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003cb8:	2318      	movs	r3, #24
 8003cba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4850      	ldr	r0, [pc, #320]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003cc2:	f002 f823 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8003ccc:	f000 fce4 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8003cd0:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <MX_ADC1_Init+0x294>)
 8003cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cd8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cda:	463b      	mov	r3, r7
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4849      	ldr	r0, [pc, #292]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003ce0:	f002 f814 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8003cea:	f000 fcd5 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8003cee:	4b4c      	ldr	r3, [pc, #304]	; (8003e20 <MX_ADC1_Init+0x298>)
 8003cf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003cf2:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003cf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4841      	ldr	r0, [pc, #260]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003cfe:	f002 f805 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_ADC1_Init+0x184>
  {
    Error_Handler();
 8003d08:	f000 fcc6 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003d0c:	4b45      	ldr	r3, [pc, #276]	; (8003e24 <MX_ADC1_Init+0x29c>)
 8003d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8003d10:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003d14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d16:	463b      	mov	r3, r7
 8003d18:	4619      	mov	r1, r3
 8003d1a:	483a      	ldr	r0, [pc, #232]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003d1c:	f001 fff6 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8003d26:	f000 fcb7 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003d2a:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <MX_ADC1_Init+0x2a0>)
 8003d2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003d2e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8003d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d34:	463b      	mov	r3, r7
 8003d36:	4619      	mov	r1, r3
 8003d38:	4832      	ldr	r0, [pc, #200]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003d3a:	f001 ffe7 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_ADC1_Init+0x1c0>
  {
    Error_Handler();
 8003d44:	f000 fca8 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003d48:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <MX_ADC1_Init+0x2a4>)
 8003d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8003d4c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8003d50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d52:	463b      	mov	r3, r7
 8003d54:	4619      	mov	r1, r3
 8003d56:	482b      	ldr	r0, [pc, #172]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003d58:	f001 ffd8 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 8003d62:	f000 fc99 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003d66:	4b32      	ldr	r3, [pc, #200]	; (8003e30 <MX_ADC1_Init+0x2a8>)
 8003d68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8003d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d70:	463b      	mov	r3, r7
 8003d72:	4619      	mov	r1, r3
 8003d74:	4823      	ldr	r0, [pc, #140]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003d76:	f001 ffc9 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8003d80:	f000 fc8a 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <MX_ADC1_Init+0x2ac>)
 8003d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8003d88:	f240 2306 	movw	r3, #518	; 0x206
 8003d8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d8e:	463b      	mov	r3, r7
 8003d90:	4619      	mov	r1, r3
 8003d92:	481c      	ldr	r0, [pc, #112]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003d94:	f001 ffba 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_ADC1_Init+0x21a>
  {
    Error_Handler();
 8003d9e:	f000 fc7b 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003da2:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <MX_ADC1_Init+0x2b0>)
 8003da4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8003da6:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8003daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dac:	463b      	mov	r3, r7
 8003dae:	4619      	mov	r1, r3
 8003db0:	4814      	ldr	r0, [pc, #80]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003db2:	f001 ffab 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <MX_ADC1_Init+0x238>
  {
    Error_Handler();
 8003dbc:	f000 fc6c 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <MX_ADC1_Init+0x2b4>)
 8003dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8003dc4:	f240 2312 	movw	r3, #530	; 0x212
 8003dc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dca:	463b      	mov	r3, r7
 8003dcc:	4619      	mov	r1, r3
 8003dce:	480d      	ldr	r0, [pc, #52]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003dd0:	f001 ff9c 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_ADC1_Init+0x256>
  {
    Error_Handler();
 8003dda:	f000 fc5d 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <MX_ADC1_Init+0x2b8>)
 8003de0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8003de2:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003de8:	463b      	mov	r3, r7
 8003dea:	4619      	mov	r1, r3
 8003dec:	4805      	ldr	r0, [pc, #20]	; (8003e04 <MX_ADC1_Init+0x27c>)
 8003dee:	f001 ff8d 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_ADC1_Init+0x274>
  {
    Error_Handler();
 8003df8:	f000 fc4e 	bl	8004698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003dfc:	bf00      	nop
 8003dfe:	3728      	adds	r7, #40	; 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	24000464 	.word	0x24000464
 8003e08:	40022000 	.word	0x40022000
 8003e0c:	43210000 	.word	0x43210000
 8003e10:	47520000 	.word	0x47520000
 8003e14:	3ac04000 	.word	0x3ac04000
 8003e18:	3ef08000 	.word	0x3ef08000
 8003e1c:	4b840000 	.word	0x4b840000
 8003e20:	4fb80000 	.word	0x4fb80000
 8003e24:	0c900008 	.word	0x0c900008
 8003e28:	1d500080 	.word	0x1d500080
 8003e2c:	25b00200 	.word	0x25b00200
 8003e30:	14f00020 	.word	0x14f00020
 8003e34:	2a000400 	.word	0x2a000400
 8003e38:	2e300800 	.word	0x2e300800
 8003e3c:	10c00010 	.word	0x10c00010
 8003e40:	21800100 	.word	0x21800100

08003e44 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
 8003e58:	615a      	str	r2, [r3, #20]
 8003e5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e5e:	4a35      	ldr	r2, [pc, #212]	; (8003f34 <MX_ADC3_Init+0xf0>)
 8003e60:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8003e62:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003e68:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e70:	2204      	movs	r2, #4
 8003e72:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003e74:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003e7a:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e82:	2202      	movs	r2, #2
 8003e84:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003e86:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e8c:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e92:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DFSDM;
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003ea4:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 8003eaa:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Oversampling.Ratio = 16;
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003eba:	2280      	movs	r2, #128	; 0x80
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003eca:	4819      	ldr	r0, [pc, #100]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003ecc:	f001 fb7c 	bl	80055c8 <HAL_ADC_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8003ed6:	f000 fbdf 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003eda:	2301      	movs	r3, #1
 8003edc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ede:	2306      	movs	r3, #6
 8003ee0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ee6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003eea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003eec:	2304      	movs	r3, #4
 8003eee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	480c      	ldr	r0, [pc, #48]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003efe:	f001 ff05 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8003f08:	f000 fbc6 	bl	8004698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <MX_ADC3_Init+0xf4>)
 8003f0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003f10:	230c      	movs	r3, #12
 8003f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4805      	ldr	r0, [pc, #20]	; (8003f30 <MX_ADC3_Init+0xec>)
 8003f1a:	f001 fef7 	bl	8005d0c <HAL_ADC_ConfigChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8003f24:	f000 fbb8 	bl	8004698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003f28:	bf00      	nop
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	240004c8 	.word	0x240004c8
 8003f34:	58026000 	.word	0x58026000
 8003f38:	04300002 	.word	0x04300002

08003f3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f40:	4b28      	ldr	r3, [pc, #160]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f42:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <MX_SPI2_Init+0xac>)
 8003f44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f46:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003f4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f4e:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f54:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f56:	2207      	movs	r2, #7
 8003f58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f60:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f6e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f72:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003f76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f78:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f7e:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f84:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f90:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f96:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003fce:	4805      	ldr	r0, [pc, #20]	; (8003fe4 <MX_SPI2_Init+0xa8>)
 8003fd0:	f007 fc2a 	bl	800b828 <HAL_SPI_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8003fda:	f000 fb5d 	bl	8004698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2400052c 	.word	0x2400052c
 8003fe8:	40003800 	.word	0x40003800

08003fec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <MX_SPI3_Init+0xa4>)
 8003ff2:	4a28      	ldr	r2, [pc, #160]	; (8004094 <MX_SPI3_Init+0xa8>)
 8003ff4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003ff6:	4b26      	ldr	r3, [pc, #152]	; (8004090 <MX_SPI3_Init+0xa4>)
 8003ff8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003ffc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003ffe:	4b24      	ldr	r3, [pc, #144]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004004:	4b22      	ldr	r3, [pc, #136]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004006:	2207      	movs	r2, #7
 8004008:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <MX_SPI3_Init+0xa4>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004010:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004012:	2200      	movs	r2, #0
 8004014:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004016:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004018:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800401c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004020:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8004024:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004026:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004028:	2200      	movs	r2, #0
 800402a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <MX_SPI3_Init+0xa4>)
 800402e:	2200      	movs	r2, #0
 8004030:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004034:	2200      	movs	r2, #0
 8004036:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <MX_SPI3_Init+0xa4>)
 800403a:	2200      	movs	r2, #0
 800403c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004040:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004044:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004048:	2200      	movs	r2, #0
 800404a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <MX_SPI3_Init+0xa4>)
 800404e:	2200      	movs	r2, #0
 8004050:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004054:	2200      	movs	r2, #0
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <MX_SPI3_Init+0xa4>)
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004060:	2200      	movs	r2, #0
 8004062:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004066:	2200      	movs	r2, #0
 8004068:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <MX_SPI3_Init+0xa4>)
 800406c:	2200      	movs	r2, #0
 800406e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004072:	2200      	movs	r2, #0
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <MX_SPI3_Init+0xa4>)
 8004078:	2200      	movs	r2, #0
 800407a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800407c:	4804      	ldr	r0, [pc, #16]	; (8004090 <MX_SPI3_Init+0xa4>)
 800407e:	f007 fbd3 	bl	800b828 <HAL_SPI_Init>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8004088:	f000 fb06 	bl	8004698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800408c:	bf00      	nop
 800408e:	bd80      	pop	{r7, pc}
 8004090:	240005b4 	.word	0x240005b4
 8004094:	40003c00 	.word	0x40003c00

08004098 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800409c:	4b27      	ldr	r3, [pc, #156]	; (800413c <MX_SPI4_Init+0xa4>)
 800409e:	4a28      	ldr	r2, [pc, #160]	; (8004140 <MX_SPI4_Init+0xa8>)
 80040a0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80040a2:	4b26      	ldr	r3, [pc, #152]	; (800413c <MX_SPI4_Init+0xa4>)
 80040a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80040a8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <MX_SPI4_Init+0xa4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80040b0:	4b22      	ldr	r3, [pc, #136]	; (800413c <MX_SPI4_Init+0xa4>)
 80040b2:	2207      	movs	r2, #7
 80040b4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b6:	4b21      	ldr	r3, [pc, #132]	; (800413c <MX_SPI4_Init+0xa4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040bc:	4b1f      	ldr	r3, [pc, #124]	; (800413c <MX_SPI4_Init+0xa4>)
 80040be:	2200      	movs	r2, #0
 80040c0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80040c2:	4b1e      	ldr	r3, [pc, #120]	; (800413c <MX_SPI4_Init+0xa4>)
 80040c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80040c8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80040ca:	4b1c      	ldr	r3, [pc, #112]	; (800413c <MX_SPI4_Init+0xa4>)
 80040cc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80040d0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040d2:	4b1a      	ldr	r3, [pc, #104]	; (800413c <MX_SPI4_Init+0xa4>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80040d8:	4b18      	ldr	r3, [pc, #96]	; (800413c <MX_SPI4_Init+0xa4>)
 80040da:	2200      	movs	r2, #0
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <MX_SPI4_Init+0xa4>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80040e4:	4b15      	ldr	r3, [pc, #84]	; (800413c <MX_SPI4_Init+0xa4>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80040ea:	4b14      	ldr	r3, [pc, #80]	; (800413c <MX_SPI4_Init+0xa4>)
 80040ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <MX_SPI4_Init+0xa4>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <MX_SPI4_Init+0xa4>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <MX_SPI4_Init+0xa4>)
 8004100:	2200      	movs	r2, #0
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004104:	4b0d      	ldr	r3, [pc, #52]	; (800413c <MX_SPI4_Init+0xa4>)
 8004106:	2200      	movs	r2, #0
 8004108:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800410a:	4b0c      	ldr	r3, [pc, #48]	; (800413c <MX_SPI4_Init+0xa4>)
 800410c:	2200      	movs	r2, #0
 800410e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <MX_SPI4_Init+0xa4>)
 8004112:	2200      	movs	r2, #0
 8004114:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <MX_SPI4_Init+0xa4>)
 8004118:	2200      	movs	r2, #0
 800411a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <MX_SPI4_Init+0xa4>)
 800411e:	2200      	movs	r2, #0
 8004120:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <MX_SPI4_Init+0xa4>)
 8004124:	2200      	movs	r2, #0
 8004126:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004128:	4804      	ldr	r0, [pc, #16]	; (800413c <MX_SPI4_Init+0xa4>)
 800412a:	f007 fb7d 	bl	800b828 <HAL_SPI_Init>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8004134:	f000 fab0 	bl	8004698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}
 800413c:	2400063c 	.word	0x2400063c
 8004140:	40013400 	.word	0x40013400

08004144 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004154:	4b15      	ldr	r3, [pc, #84]	; (80041ac <MX_TIM6_Init+0x68>)
 8004156:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <MX_TIM6_Init+0x6c>)
 8004158:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 800415a:	4b14      	ldr	r3, [pc, #80]	; (80041ac <MX_TIM6_Init+0x68>)
 800415c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004160:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <MX_TIM6_Init+0x68>)
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <MX_TIM6_Init+0x68>)
 800416a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800416e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <MX_TIM6_Init+0x68>)
 8004172:	2200      	movs	r2, #0
 8004174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004176:	480d      	ldr	r0, [pc, #52]	; (80041ac <MX_TIM6_Init+0x68>)
 8004178:	f008 fb95 	bl	800c8a6 <HAL_TIM_Base_Init>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004182:	f000 fa89 	bl	8004698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4806      	ldr	r0, [pc, #24]	; (80041ac <MX_TIM6_Init+0x68>)
 8004194:	f008 fe42 	bl	800ce1c <HAL_TIMEx_MasterConfigSynchronization>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800419e:	f000 fa7b 	bl	8004698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	240006c4 	.word	0x240006c4
 80041b0:	40001000 	.word	0x40001000

080041b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <MX_TIM7_Init+0x64>)
 80041c6:	4a15      	ldr	r2, [pc, #84]	; (800421c <MX_TIM7_Init+0x68>)
 80041c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1000;
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <MX_TIM7_Init+0x64>)
 80041cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <MX_TIM7_Init+0x64>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10;
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <MX_TIM7_Init+0x64>)
 80041da:	220a      	movs	r2, #10
 80041dc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <MX_TIM7_Init+0x64>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80041e4:	480c      	ldr	r0, [pc, #48]	; (8004218 <MX_TIM7_Init+0x64>)
 80041e6:	f008 fb5e 	bl	800c8a6 <HAL_TIM_Base_Init>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80041f0:	f000 fa52 	bl	8004698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f4:	2300      	movs	r3, #0
 80041f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4805      	ldr	r0, [pc, #20]	; (8004218 <MX_TIM7_Init+0x64>)
 8004202:	f008 fe0b 	bl	800ce1c <HAL_TIMEx_MasterConfigSynchronization>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800420c:	f000 fa44 	bl	8004698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	24000710 	.word	0x24000710
 800421c:	40001400 	.word	0x40001400

08004220 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004224:	4b26      	ldr	r3, [pc, #152]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 8004226:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <MX_USART1_UART_Init+0xa4>)
 8004228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800422a:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 800422c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004238:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 800423a:	2200      	movs	r2, #0
 800423c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004244:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 8004246:	220c      	movs	r2, #12
 8004248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 8004252:	2200      	movs	r2, #0
 8004254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 8004258:	2200      	movs	r2, #0
 800425a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800425c:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 800425e:	2200      	movs	r2, #0
 8004260:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 8004264:	2230      	movs	r2, #48	; 0x30
 8004266:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 800426a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800426e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004270:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 8004272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004276:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004278:	4811      	ldr	r0, [pc, #68]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 800427a:	f008 fe7b 	bl	800cf74 <HAL_UART_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8004284:	f000 fa08 	bl	8004698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004288:	2100      	movs	r1, #0
 800428a:	480d      	ldr	r0, [pc, #52]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 800428c:	f00b f9d9 	bl	800f642 <HAL_UARTEx_SetTxFifoThreshold>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8004296:	f000 f9ff 	bl	8004698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800429a:	2100      	movs	r1, #0
 800429c:	4808      	ldr	r0, [pc, #32]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 800429e:	f00b fa0e 	bl	800f6be <HAL_UARTEx_SetRxFifoThreshold>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042a8:	f000 f9f6 	bl	8004698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042ac:	4804      	ldr	r0, [pc, #16]	; (80042c0 <MX_USART1_UART_Init+0xa0>)
 80042ae:	f00b f98f 	bl	800f5d0 <HAL_UARTEx_DisableFifoMode>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_USART1_UART_Init+0x9c>
  {
    Error_Handler();
 80042b8:	f000 f9ee 	bl	8004698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	2400075c 	.word	0x2400075c
 80042c4:	40011000 	.word	0x40011000

080042c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042cc:	4b22      	ldr	r3, [pc, #136]	; (8004358 <MX_USART2_UART_Init+0x90>)
 80042ce:	4a23      	ldr	r2, [pc, #140]	; (800435c <MX_USART2_UART_Init+0x94>)
 80042d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80042d2:	4b21      	ldr	r3, [pc, #132]	; (8004358 <MX_USART2_UART_Init+0x90>)
 80042d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042da:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <MX_USART2_UART_Init+0x90>)
 80042dc:	2200      	movs	r2, #0
 80042de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042e0:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <MX_USART2_UART_Init+0x90>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042e6:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <MX_USART2_UART_Init+0x90>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042ec:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <MX_USART2_UART_Init+0x90>)
 80042ee:	220c      	movs	r2, #12
 80042f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <MX_USART2_UART_Init+0x90>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f8:	4b17      	ldr	r3, [pc, #92]	; (8004358 <MX_USART2_UART_Init+0x90>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042fe:	4b16      	ldr	r3, [pc, #88]	; (8004358 <MX_USART2_UART_Init+0x90>)
 8004300:	2200      	movs	r2, #0
 8004302:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <MX_USART2_UART_Init+0x90>)
 8004306:	2200      	movs	r2, #0
 8004308:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <MX_USART2_UART_Init+0x90>)
 800430c:	2200      	movs	r2, #0
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004310:	4811      	ldr	r0, [pc, #68]	; (8004358 <MX_USART2_UART_Init+0x90>)
 8004312:	f008 fe2f 	bl	800cf74 <HAL_UART_Init>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800431c:	f000 f9bc 	bl	8004698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004320:	2100      	movs	r1, #0
 8004322:	480d      	ldr	r0, [pc, #52]	; (8004358 <MX_USART2_UART_Init+0x90>)
 8004324:	f00b f98d 	bl	800f642 <HAL_UARTEx_SetTxFifoThreshold>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800432e:	f000 f9b3 	bl	8004698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004332:	2100      	movs	r1, #0
 8004334:	4808      	ldr	r0, [pc, #32]	; (8004358 <MX_USART2_UART_Init+0x90>)
 8004336:	f00b f9c2 	bl	800f6be <HAL_UARTEx_SetRxFifoThreshold>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004340:	f000 f9aa 	bl	8004698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004344:	4804      	ldr	r0, [pc, #16]	; (8004358 <MX_USART2_UART_Init+0x90>)
 8004346:	f00b f943 	bl	800f5d0 <HAL_UARTEx_DisableFifoMode>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004350:	f000 f9a2 	bl	8004698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	240007f0 	.word	0x240007f0
 800435c:	40004400 	.word	0x40004400

08004360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08e      	sub	sp, #56	; 0x38
 8004364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	609a      	str	r2, [r3, #8]
 8004372:	60da      	str	r2, [r3, #12]
 8004374:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004376:	4baa      	ldr	r3, [pc, #680]	; (8004620 <MX_GPIO_Init+0x2c0>)
 8004378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800437c:	4aa8      	ldr	r2, [pc, #672]	; (8004620 <MX_GPIO_Init+0x2c0>)
 800437e:	f043 0310 	orr.w	r3, r3, #16
 8004382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004386:	4ba6      	ldr	r3, [pc, #664]	; (8004620 <MX_GPIO_Init+0x2c0>)
 8004388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	623b      	str	r3, [r7, #32]
 8004392:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004394:	4ba2      	ldr	r3, [pc, #648]	; (8004620 <MX_GPIO_Init+0x2c0>)
 8004396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800439a:	4aa1      	ldr	r2, [pc, #644]	; (8004620 <MX_GPIO_Init+0x2c0>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043a4:	4b9e      	ldr	r3, [pc, #632]	; (8004620 <MX_GPIO_Init+0x2c0>)
 80043a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043b2:	4b9b      	ldr	r3, [pc, #620]	; (8004620 <MX_GPIO_Init+0x2c0>)
 80043b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043b8:	4a99      	ldr	r2, [pc, #612]	; (8004620 <MX_GPIO_Init+0x2c0>)
 80043ba:	f043 0320 	orr.w	r3, r3, #32
 80043be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043c2:	4b97      	ldr	r3, [pc, #604]	; (8004620 <MX_GPIO_Init+0x2c0>)
 80043c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043d0:	4b93      	ldr	r3, [pc, #588]	; (8004620 <MX_GPIO_Init+0x2c0>)
 80043d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043d6:	4a92      	ldr	r2, [pc, #584]	; (8004620 <MX_GPIO_Init+0x2c0>)
 80043d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043e0:	4b8f      	ldr	r3, [pc, #572]	; (8004620 <MX_GPIO_Init+0x2c0>)
 80043e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ee:	4b8c      	ldr	r3, [pc, #560]	; (8004620 <MX_GPIO_Init+0x2c0>)
 80043f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f4:	4a8a      	ldr	r2, [pc, #552]	; (8004620 <MX_GPIO_Init+0x2c0>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043fe:	4b88      	ldr	r3, [pc, #544]	; (8004620 <MX_GPIO_Init+0x2c0>)
 8004400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800440c:	4b84      	ldr	r3, [pc, #528]	; (8004620 <MX_GPIO_Init+0x2c0>)
 800440e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004412:	4a83      	ldr	r2, [pc, #524]	; (8004620 <MX_GPIO_Init+0x2c0>)
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800441c:	4b80      	ldr	r3, [pc, #512]	; (8004620 <MX_GPIO_Init+0x2c0>)
 800441e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800442a:	4b7d      	ldr	r3, [pc, #500]	; (8004620 <MX_GPIO_Init+0x2c0>)
 800442c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004430:	4a7b      	ldr	r2, [pc, #492]	; (8004620 <MX_GPIO_Init+0x2c0>)
 8004432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800443a:	4b79      	ldr	r3, [pc, #484]	; (8004620 <MX_GPIO_Init+0x2c0>)
 800443c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004448:	4b75      	ldr	r3, [pc, #468]	; (8004620 <MX_GPIO_Init+0x2c0>)
 800444a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800444e:	4a74      	ldr	r2, [pc, #464]	; (8004620 <MX_GPIO_Init+0x2c0>)
 8004450:	f043 0308 	orr.w	r3, r3, #8
 8004454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004458:	4b71      	ldr	r3, [pc, #452]	; (8004620 <MX_GPIO_Init+0x2c0>)
 800445a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004466:	2200      	movs	r2, #0
 8004468:	f648 71fc 	movw	r1, #36860	; 0x8ffc
 800446c:	486d      	ldr	r0, [pc, #436]	; (8004624 <MX_GPIO_Init+0x2c4>)
 800446e:	f003 fca3 	bl	8007db8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8004472:	2200      	movs	r2, #0
 8004474:	f24e 31c0 	movw	r1, #58304	; 0xe3c0
 8004478:	486b      	ldr	r0, [pc, #428]	; (8004628 <MX_GPIO_Init+0x2c8>)
 800447a:	f003 fc9d 	bl	8007db8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 800447e:	2201      	movs	r2, #1
 8004480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004484:	4869      	ldr	r0, [pc, #420]	; (800462c <MX_GPIO_Init+0x2cc>)
 8004486:	f003 fc97 	bl	8007db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800448a:	2200      	movs	r2, #0
 800448c:	f641 4104 	movw	r1, #7172	; 0x1c04
 8004490:	4867      	ldr	r0, [pc, #412]	; (8004630 <MX_GPIO_Init+0x2d0>)
 8004492:	f003 fc91 	bl	8007db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8004496:	2200      	movs	r2, #0
 8004498:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800449c:	4863      	ldr	r0, [pc, #396]	; (800462c <MX_GPIO_Init+0x2cc>)
 800449e:	f003 fc8b 	bl	8007db8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80044a2:	2200      	movs	r2, #0
 80044a4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80044a8:	4862      	ldr	r0, [pc, #392]	; (8004634 <MX_GPIO_Init+0x2d4>)
 80044aa:	f003 fc85 	bl	8007db8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 80044ae:	2200      	movs	r2, #0
 80044b0:	f24c 119c 	movw	r1, #49564	; 0xc19c
 80044b4:	4860      	ldr	r0, [pc, #384]	; (8004638 <MX_GPIO_Init+0x2d8>)
 80044b6:	f003 fc7f 	bl	8007db8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80044ba:	2200      	movs	r2, #0
 80044bc:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80044c0:	485e      	ldr	r0, [pc, #376]	; (800463c <MX_GPIO_Init+0x2dc>)
 80044c2:	f003 fc79 	bl	8007db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80044c6:	f648 73fc 	movw	r3, #36860	; 0x8ffc
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044cc:	2301      	movs	r3, #1
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d4:	2300      	movs	r3, #0
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044dc:	4619      	mov	r1, r3
 80044de:	4851      	ldr	r0, [pc, #324]	; (8004624 <MX_GPIO_Init+0x2c4>)
 80044e0:	f003 faa2 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 80044e4:	f24e 33c0 	movw	r3, #58304	; 0xe3c0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ea:	2301      	movs	r3, #1
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044fa:	4619      	mov	r1, r3
 80044fc:	484a      	ldr	r0, [pc, #296]	; (8004628 <MX_GPIO_Init+0x2c8>)
 80044fe:	f003 fa93 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004502:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004508:	2300      	movs	r3, #0
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004514:	4619      	mov	r1, r3
 8004516:	4845      	ldr	r0, [pc, #276]	; (800462c <MX_GPIO_Init+0x2cc>)
 8004518:	f003 fa86 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800451c:	f44f 4379 	mov.w	r3, #63744	; 0xf900
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004522:	2301      	movs	r3, #1
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004526:	2300      	movs	r3, #0
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452a:	2300      	movs	r3, #0
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800452e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004532:	4619      	mov	r1, r3
 8004534:	483d      	ldr	r0, [pc, #244]	; (800462c <MX_GPIO_Init+0x2cc>)
 8004536:	f003 fa77 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800453a:	f641 4304 	movw	r3, #7172	; 0x1c04
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004540:	2301      	movs	r3, #1
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004548:	2300      	movs	r3, #0
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004550:	4619      	mov	r1, r3
 8004552:	4837      	ldr	r0, [pc, #220]	; (8004630 <MX_GPIO_Init+0x2d0>)
 8004554:	f003 fa68 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004558:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800455e:	2301      	movs	r3, #1
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004566:	2300      	movs	r3, #0
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800456a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800456e:	4619      	mov	r1, r3
 8004570:	4830      	ldr	r0, [pc, #192]	; (8004634 <MX_GPIO_Init+0x2d4>)
 8004572:	f003 fa59 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 PD15 PD2
                           PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 8004576:	f24c 139c 	movw	r3, #49564	; 0xc19c
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800457c:	2301      	movs	r3, #1
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004580:	2300      	movs	r3, #0
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004584:	2300      	movs	r3, #0
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800458c:	4619      	mov	r1, r3
 800458e:	482a      	ldr	r0, [pc, #168]	; (8004638 <MX_GPIO_Init+0x2d8>)
 8004590:	f003 fa4a 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8004594:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800459a:	2300      	movs	r3, #0
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045a6:	4619      	mov	r1, r3
 80045a8:	4823      	ldr	r0, [pc, #140]	; (8004638 <MX_GPIO_Init+0x2d8>)
 80045aa:	f003 fa3d 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80045ae:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b4:	2301      	movs	r3, #1
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045bc:	2300      	movs	r3, #0
 80045be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045c4:	4619      	mov	r1, r3
 80045c6:	481d      	ldr	r0, [pc, #116]	; (800463c <MX_GPIO_Init+0x2dc>)
 80045c8:	f003 fa2e 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80045cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045d2:	2300      	movs	r3, #0
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045de:	4619      	mov	r1, r3
 80045e0:	4814      	ldr	r0, [pc, #80]	; (8004634 <MX_GPIO_Init+0x2d4>)
 80045e2:	f003 fa21 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80045e6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045ec:	2300      	movs	r3, #0
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f8:	4619      	mov	r1, r3
 80045fa:	480d      	ldr	r0, [pc, #52]	; (8004630 <MX_GPIO_Init+0x2d0>)
 80045fc:	f003 fa14 	bl	8007a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004600:	2303      	movs	r3, #3
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004604:	2300      	movs	r3, #0
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800460c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004610:	4619      	mov	r1, r3
 8004612:	4804      	ldr	r0, [pc, #16]	; (8004624 <MX_GPIO_Init+0x2c4>)
 8004614:	f003 fa08 	bl	8007a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004618:	bf00      	nop
 800461a:	3738      	adds	r7, #56	; 0x38
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	58024400 	.word	0x58024400
 8004624:	58021000 	.word	0x58021000
 8004628:	58020800 	.word	0x58020800
 800462c:	58021400 	.word	0x58021400
 8004630:	58020400 	.word	0x58020400
 8004634:	58021800 	.word	0x58021800
 8004638:	58020c00 	.word	0x58020c00
 800463c:	58020000 	.word	0x58020000

08004640 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004646:	463b      	mov	r3, r7
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8004652:	f002 fc09 	bl	8006e68 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004656:	2301      	movs	r3, #1
 8004658:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800465a:	2300      	movs	r3, #0
 800465c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004662:	231f      	movs	r3, #31
 8004664:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004666:	2387      	movs	r3, #135	; 0x87
 8004668:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800466a:	2300      	movs	r3, #0
 800466c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800466e:	2300      	movs	r3, #0
 8004670:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004672:	2301      	movs	r3, #1
 8004674:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004676:	2301      	movs	r3, #1
 8004678:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800467a:	2300      	movs	r3, #0
 800467c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004682:	463b      	mov	r3, r7
 8004684:	4618      	mov	r0, r3
 8004686:	f002 fc27 	bl	8006ed8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800468a:	2004      	movs	r0, #4
 800468c:	f002 fc04 	bl	8006e98 <HAL_MPU_Enable>

}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800469c:	b672      	cpsid	i
}
 800469e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046a0:	e7fe      	b.n	80046a0 <Error_Handler+0x8>
	...

080046a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <HAL_MspInit+0x30>)
 80046ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046b0:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <HAL_MspInit+0x30>)
 80046b2:	f043 0302 	orr.w	r3, r3, #2
 80046b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_MspInit+0x30>)
 80046bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	58024400 	.word	0x58024400

080046d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08e      	sub	sp, #56	; 0x38
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a4b      	ldr	r2, [pc, #300]	; (8004824 <HAL_ADC_MspInit+0x14c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d160      	bne.n	80047bc <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80046fa:	4b4b      	ldr	r3, [pc, #300]	; (8004828 <HAL_ADC_MspInit+0x150>)
 80046fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004700:	4a49      	ldr	r2, [pc, #292]	; (8004828 <HAL_ADC_MspInit+0x150>)
 8004702:	f043 0320 	orr.w	r3, r3, #32
 8004706:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800470a:	4b47      	ldr	r3, [pc, #284]	; (8004828 <HAL_ADC_MspInit+0x150>)
 800470c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	623b      	str	r3, [r7, #32]
 8004716:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004718:	4b43      	ldr	r3, [pc, #268]	; (8004828 <HAL_ADC_MspInit+0x150>)
 800471a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800471e:	4a42      	ldr	r2, [pc, #264]	; (8004828 <HAL_ADC_MspInit+0x150>)
 8004720:	f043 0304 	orr.w	r3, r3, #4
 8004724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004728:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <HAL_ADC_MspInit+0x150>)
 800472a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004736:	4b3c      	ldr	r3, [pc, #240]	; (8004828 <HAL_ADC_MspInit+0x150>)
 8004738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800473c:	4a3a      	ldr	r2, [pc, #232]	; (8004828 <HAL_ADC_MspInit+0x150>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_ADC_MspInit+0x150>)
 8004748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004754:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_ADC_MspInit+0x150>)
 8004756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800475a:	4a33      	ldr	r2, [pc, #204]	; (8004828 <HAL_ADC_MspInit+0x150>)
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004764:	4b30      	ldr	r3, [pc, #192]	; (8004828 <HAL_ADC_MspInit+0x150>)
 8004766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004772:	2333      	movs	r3, #51	; 0x33
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004776:	2303      	movs	r3, #3
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477a:	2300      	movs	r3, #0
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800477e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004782:	4619      	mov	r1, r3
 8004784:	4829      	ldr	r0, [pc, #164]	; (800482c <HAL_ADC_MspInit+0x154>)
 8004786:	f003 f94f 	bl	8007a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800478a:	23ff      	movs	r3, #255	; 0xff
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800478e:	2303      	movs	r3, #3
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800479a:	4619      	mov	r1, r3
 800479c:	4824      	ldr	r0, [pc, #144]	; (8004830 <HAL_ADC_MspInit+0x158>)
 800479e:	f003 f943 	bl	8007a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047a2:	2303      	movs	r3, #3
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a6:	2303      	movs	r3, #3
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b2:	4619      	mov	r1, r3
 80047b4:	481f      	ldr	r0, [pc, #124]	; (8004834 <HAL_ADC_MspInit+0x15c>)
 80047b6:	f003 f937 	bl	8007a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80047ba:	e02e      	b.n	800481a <HAL_ADC_MspInit+0x142>
  else if(hadc->Instance==ADC3)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <HAL_ADC_MspInit+0x160>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d129      	bne.n	800481a <HAL_ADC_MspInit+0x142>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80047c6:	4b18      	ldr	r3, [pc, #96]	; (8004828 <HAL_ADC_MspInit+0x150>)
 80047c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047cc:	4a16      	ldr	r2, [pc, #88]	; (8004828 <HAL_ADC_MspInit+0x150>)
 80047ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <HAL_ADC_MspInit+0x150>)
 80047d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_ADC_MspInit+0x150>)
 80047e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ea:	4a0f      	ldr	r2, [pc, #60]	; (8004828 <HAL_ADC_MspInit+0x150>)
 80047ec:	f043 0304 	orr.w	r3, r3, #4
 80047f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <HAL_ADC_MspInit+0x150>)
 80047f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8004802:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8004806:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800480a:	f000 fc95 	bl	8005138 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800480e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8004812:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8004816:	f000 fc8f 	bl	8005138 <HAL_SYSCFG_AnalogSwitchConfig>
}
 800481a:	bf00      	nop
 800481c:	3738      	adds	r7, #56	; 0x38
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40022000 	.word	0x40022000
 8004828:	58024400 	.word	0x58024400
 800482c:	58020800 	.word	0x58020800
 8004830:	58020000 	.word	0x58020000
 8004834:	58020400 	.word	0x58020400
 8004838:	58026000 	.word	0x58026000

0800483c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08e      	sub	sp, #56	; 0x38
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a53      	ldr	r2, [pc, #332]	; (80049a8 <HAL_SPI_MspInit+0x16c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d137      	bne.n	80048ce <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800485e:	4b53      	ldr	r3, [pc, #332]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004864:	4a51      	ldr	r2, [pc, #324]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800486a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800486e:	4b4f      	ldr	r3, [pc, #316]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487c:	4b4b      	ldr	r3, [pc, #300]	; (80049ac <HAL_SPI_MspInit+0x170>)
 800487e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004882:	4a4a      	ldr	r2, [pc, #296]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800488c:	4b47      	ldr	r3, [pc, #284]	; (80049ac <HAL_SPI_MspInit+0x170>)
 800488e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	61fb      	str	r3, [r7, #28]
 8004898:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800489a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	2302      	movs	r3, #2
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a8:	2300      	movs	r3, #0
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048ac:	2305      	movs	r3, #5
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048b4:	4619      	mov	r1, r3
 80048b6:	483e      	ldr	r0, [pc, #248]	; (80049b0 <HAL_SPI_MspInit+0x174>)
 80048b8:	f003 f8b6 	bl	8007a28 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80048bc:	2200      	movs	r2, #0
 80048be:	2100      	movs	r1, #0
 80048c0:	2024      	movs	r0, #36	; 0x24
 80048c2:	f002 fa9c 	bl	8006dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80048c6:	2024      	movs	r0, #36	; 0x24
 80048c8:	f002 fab3 	bl	8006e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80048cc:	e068      	b.n	80049a0 <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI3)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a38      	ldr	r2, [pc, #224]	; (80049b4 <HAL_SPI_MspInit+0x178>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d12f      	bne.n	8004938 <HAL_SPI_MspInit+0xfc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80048d8:	4b34      	ldr	r3, [pc, #208]	; (80049ac <HAL_SPI_MspInit+0x170>)
 80048da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048de:	4a33      	ldr	r2, [pc, #204]	; (80049ac <HAL_SPI_MspInit+0x170>)
 80048e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048e8:	4b30      	ldr	r3, [pc, #192]	; (80049ac <HAL_SPI_MspInit+0x170>)
 80048ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048f6:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <HAL_SPI_MspInit+0x170>)
 80048f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048fc:	4a2b      	ldr	r2, [pc, #172]	; (80049ac <HAL_SPI_MspInit+0x170>)
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004906:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004914:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491a:	2302      	movs	r3, #2
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004922:	2300      	movs	r3, #0
 8004924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004926:	2306      	movs	r3, #6
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800492a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800492e:	4619      	mov	r1, r3
 8004930:	4821      	ldr	r0, [pc, #132]	; (80049b8 <HAL_SPI_MspInit+0x17c>)
 8004932:	f003 f879 	bl	8007a28 <HAL_GPIO_Init>
}
 8004936:	e033      	b.n	80049a0 <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI4)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_SPI_MspInit+0x180>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d12e      	bne.n	80049a0 <HAL_SPI_MspInit+0x164>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004942:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004948:	4a18      	ldr	r2, [pc, #96]	; (80049ac <HAL_SPI_MspInit+0x170>)
 800494a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800494e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004952:	4b16      	ldr	r3, [pc, #88]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004966:	4a11      	ldr	r2, [pc, #68]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004968:	f043 0310 	orr.w	r3, r3, #16
 800496c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004970:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <HAL_SPI_MspInit+0x170>)
 8004972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800497e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004984:	2302      	movs	r3, #2
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	2300      	movs	r3, #0
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498c:	2300      	movs	r3, #0
 800498e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004990:	2305      	movs	r3, #5
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004998:	4619      	mov	r1, r3
 800499a:	4809      	ldr	r0, [pc, #36]	; (80049c0 <HAL_SPI_MspInit+0x184>)
 800499c:	f003 f844 	bl	8007a28 <HAL_GPIO_Init>
}
 80049a0:	bf00      	nop
 80049a2:	3738      	adds	r7, #56	; 0x38
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40003800 	.word	0x40003800
 80049ac:	58024400 	.word	0x58024400
 80049b0:	58020400 	.word	0x58020400
 80049b4:	40003c00 	.word	0x40003c00
 80049b8:	58020800 	.word	0x58020800
 80049bc:	40013400 	.word	0x40013400
 80049c0:	58021000 	.word	0x58021000

080049c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_TIM_Base_MspInit+0x84>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d117      	bne.n	8004a06 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80049d6:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <HAL_TIM_Base_MspInit+0x88>)
 80049d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_TIM_Base_MspInit+0x88>)
 80049de:	f043 0310 	orr.w	r3, r3, #16
 80049e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049e6:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <HAL_TIM_Base_MspInit+0x88>)
 80049e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80049f4:	2200      	movs	r2, #0
 80049f6:	2100      	movs	r1, #0
 80049f8:	2036      	movs	r0, #54	; 0x36
 80049fa:	f002 fa00 	bl	8006dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049fe:	2036      	movs	r0, #54	; 0x36
 8004a00:	f002 fa17 	bl	8006e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004a04:	e01b      	b.n	8004a3e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <HAL_TIM_Base_MspInit+0x8c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d116      	bne.n	8004a3e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <HAL_TIM_Base_MspInit+0x88>)
 8004a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a16:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <HAL_TIM_Base_MspInit+0x88>)
 8004a18:	f043 0320 	orr.w	r3, r3, #32
 8004a1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <HAL_TIM_Base_MspInit+0x88>)
 8004a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2100      	movs	r1, #0
 8004a32:	2037      	movs	r0, #55	; 0x37
 8004a34:	f002 f9e3 	bl	8006dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004a38:	2037      	movs	r0, #55	; 0x37
 8004a3a:	f002 f9fa 	bl	8006e32 <HAL_NVIC_EnableIRQ>
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40001000 	.word	0x40001000
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	40001400 	.word	0x40001400

08004a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	; 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5c:	f107 031c 	add.w	r3, r7, #28
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3c      	ldr	r2, [pc, #240]	; (8004b64 <HAL_UART_MspInit+0x110>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d137      	bne.n	8004ae6 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a76:	4b3c      	ldr	r3, [pc, #240]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a7c:	4a3a      	ldr	r2, [pc, #232]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004a7e:	f043 0310 	orr.w	r3, r3, #16
 8004a82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a86:	4b38      	ldr	r3, [pc, #224]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a94:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a9a:	4a33      	ldr	r2, [pc, #204]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004aa4:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ab2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ac4:	2307      	movs	r3, #7
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac8:	f107 031c 	add.w	r3, r7, #28
 8004acc:	4619      	mov	r1, r3
 8004ace:	4827      	ldr	r0, [pc, #156]	; (8004b6c <HAL_UART_MspInit+0x118>)
 8004ad0:	f002 ffaa 	bl	8007a28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	2025      	movs	r0, #37	; 0x25
 8004ada:	f002 f990 	bl	8006dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ade:	2025      	movs	r0, #37	; 0x25
 8004ae0:	f002 f9a7 	bl	8006e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004ae4:	e03a      	b.n	8004b5c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <HAL_UART_MspInit+0x11c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d135      	bne.n	8004b5c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004af0:	4b1d      	ldr	r3, [pc, #116]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004af6:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b00:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b14:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004b16:	f043 0308 	orr.w	r3, r3, #8
 8004b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <HAL_UART_MspInit+0x114>)
 8004b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004b2c:	2360      	movs	r3, #96	; 0x60
 8004b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b30:	2302      	movs	r3, #2
 8004b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b3c:	2307      	movs	r3, #7
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b40:	f107 031c 	add.w	r3, r7, #28
 8004b44:	4619      	mov	r1, r3
 8004b46:	480b      	ldr	r0, [pc, #44]	; (8004b74 <HAL_UART_MspInit+0x120>)
 8004b48:	f002 ff6e 	bl	8007a28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2100      	movs	r1, #0
 8004b50:	2026      	movs	r0, #38	; 0x26
 8004b52:	f002 f954 	bl	8006dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b56:	2026      	movs	r0, #38	; 0x26
 8004b58:	f002 f96b 	bl	8006e32 <HAL_NVIC_EnableIRQ>
}
 8004b5c:	bf00      	nop
 8004b5e:	3730      	adds	r7, #48	; 0x30
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40011000 	.word	0x40011000
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	58020000 	.word	0x58020000
 8004b70:	40004400 	.word	0x40004400
 8004b74:	58020c00 	.word	0x58020c00

08004b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b7c:	e7fe      	b.n	8004b7c <NMI_Handler+0x4>

08004b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b82:	e7fe      	b.n	8004b82 <HardFault_Handler+0x4>

08004b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b88:	e7fe      	b.n	8004b88 <MemManage_Handler+0x4>

08004b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b8e:	e7fe      	b.n	8004b8e <BusFault_Handler+0x4>

08004b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b94:	e7fe      	b.n	8004b94 <UsageFault_Handler+0x4>

08004b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b96:	b480      	push	{r7}
 8004b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bc4:	f000 fa68 	bl	8005098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004bd0:	4802      	ldr	r0, [pc, #8]	; (8004bdc <SPI2_IRQHandler+0x10>)
 8004bd2:	f007 fb65 	bl	800c2a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	2400052c 	.word	0x2400052c

08004be0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004be4:	4809      	ldr	r0, [pc, #36]	; (8004c0c <USART1_IRQHandler+0x2c>)
 8004be6:	f008 faef 	bl	800d1c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  PC_RxBuff[pc_data_in++] = pc_data;
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <USART1_IRQHandler+0x30>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	4907      	ldr	r1, [pc, #28]	; (8004c10 <USART1_IRQHandler+0x30>)
 8004bf2:	600a      	str	r2, [r1, #0]
 8004bf4:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <USART1_IRQHandler+0x34>)
 8004bf6:	7811      	ldrb	r1, [r2, #0]
 8004bf8:	4a07      	ldr	r2, [pc, #28]	; (8004c18 <USART1_IRQHandler+0x38>)
 8004bfa:	54d1      	strb	r1, [r2, r3]
  UART_Pc_byte_count++;
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <USART1_IRQHandler+0x3c>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <USART1_IRQHandler+0x3c>)
 8004c06:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 1 */
}
 8004c08:	bf00      	nop
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	2400075c 	.word	0x2400075c
 8004c10:	24001248 	.word	0x24001248
 8004c14:	24001258 	.word	0x24001258
 8004c18:	2400125c 	.word	0x2400125c
 8004c1c:	2400125a 	.word	0x2400125a

08004c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c24:	4809      	ldr	r0, [pc, #36]	; (8004c4c <USART2_IRQHandler+0x2c>)
 8004c26:	f008 facf 	bl	800d1c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_RxBuff[rx_data_in++] = rx_data;
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <USART2_IRQHandler+0x30>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	4907      	ldr	r1, [pc, #28]	; (8004c50 <USART2_IRQHandler+0x30>)
 8004c32:	600a      	str	r2, [r1, #0]
 8004c34:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <USART2_IRQHandler+0x34>)
 8004c36:	7811      	ldrb	r1, [r2, #0]
 8004c38:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <USART2_IRQHandler+0x38>)
 8004c3a:	54d1      	strb	r1, [r2, r3]
  UART_Rx_byte_count++;
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <USART2_IRQHandler+0x3c>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <USART2_IRQHandler+0x3c>)
 8004c46:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 8004c48:	bf00      	nop
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	240007f0 	.word	0x240007f0
 8004c50:	24001250 	.word	0x24001250
 8004c54:	24001259 	.word	0x24001259
 8004c58:	240012d4 	.word	0x240012d4
 8004c5c:	2400125b 	.word	0x2400125b

08004c60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//int i = 0;
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c64:	4829      	ldr	r0, [pc, #164]	; (8004d0c <TIM6_DAC_IRQHandler+0xac>)
 8004c66:	f007 feed 	bl	800ca44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  	  ticks++;
 8004c6a:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <TIM6_DAC_IRQHandler+0xb0>)
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <TIM6_DAC_IRQHandler+0xb0>)
 8004c74:	801a      	strh	r2, [r3, #0]
  	  if(start_timer)
 8004c76:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <TIM6_DAC_IRQHandler+0xb4>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d006      	beq.n	8004c8c <TIM6_DAC_IRQHandler+0x2c>
  		  timer_tick++;
 8004c7e:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <TIM6_DAC_IRQHandler+0xb8>)
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	3301      	adds	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <TIM6_DAC_IRQHandler+0xb8>)
 8004c88:	801a      	strh	r2, [r3, #0]
 8004c8a:	e002      	b.n	8004c92 <TIM6_DAC_IRQHandler+0x32>
  	  else
  		  timer_tick = 0;
 8004c8c:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <TIM6_DAC_IRQHandler+0xb8>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	801a      	strh	r2, [r3, #0]

  	  if(uut_timer)
 8004c92:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <TIM6_DAC_IRQHandler+0xbc>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <TIM6_DAC_IRQHandler+0x48>
  		  uut_timer_tick++;
 8004c9a:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <TIM6_DAC_IRQHandler+0xc0>)
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <TIM6_DAC_IRQHandler+0xc0>)
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	e002      	b.n	8004cae <TIM6_DAC_IRQHandler+0x4e>
  	  else
  		  uut_timer_tick = 0;
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <TIM6_DAC_IRQHandler+0xc0>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	801a      	strh	r2, [r3, #0]

  	ac_inputs[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8004cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cb2:	481c      	ldr	r0, [pc, #112]	; (8004d24 <TIM6_DAC_IRQHandler+0xc4>)
 8004cb4:	f003 f868 	bl	8007d88 <HAL_GPIO_ReadPin>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <TIM6_DAC_IRQHandler+0xc8>)
 8004cbe:	701a      	strb	r2, [r3, #0]
  	ac_inputs[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 8004cc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cc4:	4817      	ldr	r0, [pc, #92]	; (8004d24 <TIM6_DAC_IRQHandler+0xc4>)
 8004cc6:	f003 f85f 	bl	8007d88 <HAL_GPIO_ReadPin>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4b16      	ldr	r3, [pc, #88]	; (8004d28 <TIM6_DAC_IRQHandler+0xc8>)
 8004cd0:	705a      	strb	r2, [r3, #1]
  	ac_inputs[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8004cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cd6:	4813      	ldr	r0, [pc, #76]	; (8004d24 <TIM6_DAC_IRQHandler+0xc4>)
 8004cd8:	f003 f856 	bl	8007d88 <HAL_GPIO_ReadPin>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <TIM6_DAC_IRQHandler+0xc8>)
 8004ce2:	709a      	strb	r2, [r3, #2]
  	ac_inputs[3] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
 8004ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ce8:	480e      	ldr	r0, [pc, #56]	; (8004d24 <TIM6_DAC_IRQHandler+0xc4>)
 8004cea:	f003 f84d 	bl	8007d88 <HAL_GPIO_ReadPin>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <TIM6_DAC_IRQHandler+0xc8>)
 8004cf4:	70da      	strb	r2, [r3, #3]
  	ac_inputs[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);
 8004cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cfa:	480a      	ldr	r0, [pc, #40]	; (8004d24 <TIM6_DAC_IRQHandler+0xc4>)
 8004cfc:	f003 f844 	bl	8007d88 <HAL_GPIO_ReadPin>
 8004d00:	4603      	mov	r3, r0
 8004d02:	461a      	mov	r2, r3
 8004d04:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <TIM6_DAC_IRQHandler+0xc8>)
 8004d06:	711a      	strb	r2, [r3, #4]
  	else
  		timer_count = 0;
  */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d08:	bf00      	nop
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	240006c4 	.word	0x240006c4
 8004d10:	24001300 	.word	0x24001300
 8004d14:	24001306 	.word	0x24001306
 8004d18:	24001302 	.word	0x24001302
 8004d1c:	24001307 	.word	0x24001307
 8004d20:	24001304 	.word	0x24001304
 8004d24:	58020c00 	.word	0x58020c00
 8004d28:	24001334 	.word	0x24001334
 8004d2c:	00000000 	.word	0x00000000

08004d30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
//static uint8_t toggle1 = 0xFF;
//static uint16_t cnt = 0;
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004d34:	483a      	ldr	r0, [pc, #232]	; (8004e20 <TIM7_IRQHandler+0xf0>)
 8004d36:	f007 fe85 	bl	800ca44 <HAL_TIM_IRQHandler>

	//update_red_led(toggle1);	//LED toggle to check the timer interrupt recurrence period
	//toggle1 = ~toggle1;


	if(start_time > 2)
 8004d3a:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <TIM7_IRQHandler+0xf4>)
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d90a      	bls.n	8004d58 <TIM7_IRQHandler+0x28>
	{
		if(timer7_count++ >= 0xFFFFFFF0)
 8004d42:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <TIM7_IRQHandler+0xf8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	4937      	ldr	r1, [pc, #220]	; (8004e28 <TIM7_IRQHandler+0xf8>)
 8004d4a:	600a      	str	r2, [r1, #0]
 8004d4c:	f113 0f11 	cmn.w	r3, #17
 8004d50:	d902      	bls.n	8004d58 <TIM7_IRQHandler+0x28>
			timer7_count = 0;
 8004d52:	4b35      	ldr	r3, [pc, #212]	; (8004e28 <TIM7_IRQHandler+0xf8>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
	}

	if(start_falltime_counter)
 8004d58:	4b34      	ldr	r3, [pc, #208]	; (8004e2c <TIM7_IRQHandler+0xfc>)
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d010      	beq.n	8004d82 <TIM7_IRQHandler+0x52>
	{
		falltime_counter++;
 8004d60:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <TIM7_IRQHandler+0x100>)
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	4b31      	ldr	r3, [pc, #196]	; (8004e30 <TIM7_IRQHandler+0x100>)
 8004d6a:	801a      	strh	r2, [r3, #0]
		fall_time = falltime_counter * 110;	//Timer period is ~110uS, so fall time is 110 times counter value.
 8004d6c:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <TIM7_IRQHandler+0x100>)
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	00d2      	lsls	r2, r2, #3
 8004d74:	1ad2      	subs	r2, r2, r3
 8004d76:	00d2      	lsls	r2, r2, #3
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <TIM7_IRQHandler+0x104>)
 8004d80:	801a      	strh	r2, [r3, #0]
	}

	if(start_risetime_counter)
 8004d82:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <TIM7_IRQHandler+0x108>)
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d010      	beq.n	8004dac <TIM7_IRQHandler+0x7c>
	{
		risetime_counter++;
 8004d8a:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <TIM7_IRQHandler+0x10c>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	4b2a      	ldr	r3, [pc, #168]	; (8004e3c <TIM7_IRQHandler+0x10c>)
 8004d94:	801a      	strh	r2, [r3, #0]
		rise_time = risetime_counter * 110;	//Timer period is ~110uS, so fall time is 110 times counter value.
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <TIM7_IRQHandler+0x10c>)
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	00d2      	lsls	r2, r2, #3
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	00d2      	lsls	r2, r2, #3
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <TIM7_IRQHandler+0x110>)
 8004daa:	801a      	strh	r2, [r3, #0]
		start_time++;
		pulse_acc++;
	}
	*/

	if(pulse_acc >= 2000)
 8004dac:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <TIM7_IRQHandler+0x114>)
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004db4:	d326      	bcc.n	8004e04 <TIM7_IRQHandler+0xd4>
	{
		start_time = 0;
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <TIM7_IRQHandler+0xf4>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	801a      	strh	r2, [r3, #0]
		timetaken = ((float)(timer7_count) * 110.21)/10000.0;
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <TIM7_IRQHandler+0xf8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004dcc:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8004e08 <TIM7_IRQHandler+0xd8>
 8004dd0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004dd4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8004e10 <TIM7_IRQHandler+0xe0>
 8004dd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <TIM7_IRQHandler+0x118>)
 8004dde:	ed83 7b00 	vstr	d7, [r3]
		pulse_frequency = (uint16_t)(200000.0 / timetaken);		//Hz - Value rounded off
 8004de2:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <TIM7_IRQHandler+0x118>)
 8004de4:	ed93 6b00 	vldr	d6, [r3]
 8004de8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8004e18 <TIM7_IRQHandler+0xe8>
 8004dec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004df0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004df4:	ee17 3a90 	vmov	r3, s15
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <TIM7_IRQHandler+0x11c>)
 8004dfc:	801a      	strh	r2, [r3, #0]
		pulse_acc = 0;
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <TIM7_IRQHandler+0x114>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END TIM7_IRQn 1 */
}
 8004e04:	bf00      	nop
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	a3d70a3d 	.word	0xa3d70a3d
 8004e0c:	405b8d70 	.word	0x405b8d70
 8004e10:	00000000 	.word	0x00000000
 8004e14:	40c38800 	.word	0x40c38800
 8004e18:	00000000 	.word	0x00000000
 8004e1c:	41086a00 	.word	0x41086a00
 8004e20:	24000710 	.word	0x24000710
 8004e24:	2400135c 	.word	0x2400135c
 8004e28:	24001354 	.word	0x24001354
 8004e2c:	24001368 	.word	0x24001368
 8004e30:	2400136a 	.word	0x2400136a
 8004e34:	24001370 	.word	0x24001370
 8004e38:	2400136c 	.word	0x2400136c
 8004e3c:	2400136e 	.word	0x2400136e
 8004e40:	24001372 	.word	0x24001372
 8004e44:	2400134e 	.word	0x2400134e
 8004e48:	24001360 	.word	0x24001360
 8004e4c:	24001352 	.word	0x24001352

08004e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e54:	4b37      	ldr	r3, [pc, #220]	; (8004f34 <SystemInit+0xe4>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	4a36      	ldr	r2, [pc, #216]	; (8004f34 <SystemInit+0xe4>)
 8004e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004e64:	4b34      	ldr	r3, [pc, #208]	; (8004f38 <SystemInit+0xe8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d807      	bhi.n	8004e80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004e70:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <SystemInit+0xe8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f023 030f 	bic.w	r3, r3, #15
 8004e78:	4a2f      	ldr	r2, [pc, #188]	; (8004f38 <SystemInit+0xe8>)
 8004e7a:	f043 0307 	orr.w	r3, r3, #7
 8004e7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004e80:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <SystemInit+0xec>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2d      	ldr	r2, [pc, #180]	; (8004f3c <SystemInit+0xec>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <SystemInit+0xec>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004e92:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <SystemInit+0xec>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4929      	ldr	r1, [pc, #164]	; (8004f3c <SystemInit+0xec>)
 8004e98:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <SystemInit+0xf0>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004e9e:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <SystemInit+0xe8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004eaa:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <SystemInit+0xe8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 030f 	bic.w	r3, r3, #15
 8004eb2:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <SystemInit+0xe8>)
 8004eb4:	f043 0307 	orr.w	r3, r3, #7
 8004eb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <SystemInit+0xec>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004ec0:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <SystemInit+0xec>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <SystemInit+0xec>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <SystemInit+0xec>)
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <SystemInit+0xf4>)
 8004ed0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004ed2:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <SystemInit+0xec>)
 8004ed4:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <SystemInit+0xf8>)
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004ed8:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <SystemInit+0xec>)
 8004eda:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <SystemInit+0xfc>)
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004ede:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <SystemInit+0xec>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004ee4:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <SystemInit+0xec>)
 8004ee6:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <SystemInit+0xfc>)
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004eea:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <SystemInit+0xec>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004ef0:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <SystemInit+0xec>)
 8004ef2:	4a16      	ldr	r2, [pc, #88]	; (8004f4c <SystemInit+0xfc>)
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004ef6:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <SystemInit+0xec>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <SystemInit+0xec>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0e      	ldr	r2, [pc, #56]	; (8004f3c <SystemInit+0xec>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <SystemInit+0xec>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <SystemInit+0x100>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <SystemInit+0x104>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1a:	d202      	bcs.n	8004f22 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <SystemInit+0x108>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004f22:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <SystemInit+0x10c>)
 8004f24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004f28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	e000ed00 	.word	0xe000ed00
 8004f38:	52002000 	.word	0x52002000
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	eaf6ed7f 	.word	0xeaf6ed7f
 8004f44:	02020200 	.word	0x02020200
 8004f48:	01ff0000 	.word	0x01ff0000
 8004f4c:	01010280 	.word	0x01010280
 8004f50:	5c001000 	.word	0x5c001000
 8004f54:	ffff0000 	.word	0xffff0000
 8004f58:	51008108 	.word	0x51008108
 8004f5c:	52004000 	.word	0x52004000

08004f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004f64:	f7ff ff74 	bl	8004e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f68:	480c      	ldr	r0, [pc, #48]	; (8004f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f6a:	490d      	ldr	r1, [pc, #52]	; (8004fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f6c:	4a0d      	ldr	r2, [pc, #52]	; (8004fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f70:	e002      	b.n	8004f78 <LoopCopyDataInit>

08004f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f76:	3304      	adds	r3, #4

08004f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f7c:	d3f9      	bcc.n	8004f72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f80:	4c0a      	ldr	r4, [pc, #40]	; (8004fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f84:	e001      	b.n	8004f8a <LoopFillZerobss>

08004f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f88:	3204      	adds	r2, #4

08004f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f8c:	d3fb      	bcc.n	8004f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f8e:	f00a fc2b 	bl	800f7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f92:	f7fe fa55 	bl	8003440 <main>
  bx  lr
 8004f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f98:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004f9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004fa0:	24000444 	.word	0x24000444
  ldr r2, =_sidata
 8004fa4:	0800fc0c 	.word	0x0800fc0c
  ldr r2, =_sbss
 8004fa8:	24000448 	.word	0x24000448
  ldr r4, =_ebss
 8004fac:	240033a0 	.word	0x240033a0

08004fb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fb0:	e7fe      	b.n	8004fb0 <ADC3_IRQHandler>
	...

08004fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fba:	2003      	movs	r0, #3
 8004fbc:	f001 ff14 	bl	8006de8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fc0:	f003 fd5e 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b15      	ldr	r3, [pc, #84]	; (800501c <HAL_Init+0x68>)
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	0a1b      	lsrs	r3, r3, #8
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	4913      	ldr	r1, [pc, #76]	; (8005020 <HAL_Init+0x6c>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fde:	4b0f      	ldr	r3, [pc, #60]	; (800501c <HAL_Init+0x68>)
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	4a0e      	ldr	r2, [pc, #56]	; (8005020 <HAL_Init+0x6c>)
 8004fe8:	5cd3      	ldrb	r3, [r2, r3]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <HAL_Init+0x70>)
 8004ff6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ff8:	4a0b      	ldr	r2, [pc, #44]	; (8005028 <HAL_Init+0x74>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ffe:	200f      	movs	r0, #15
 8005000:	f000 f814 	bl	800502c <HAL_InitTick>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e002      	b.n	8005014 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800500e:	f7ff fb49 	bl	80046a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	58024400 	.word	0x58024400
 8005020:	0800fbc4 	.word	0x0800fbc4
 8005024:	24000438 	.word	0x24000438
 8005028:	24000434 	.word	0x24000434

0800502c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <HAL_InitTick+0x60>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e021      	b.n	8005084 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005040:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_InitTick+0x64>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <HAL_InitTick+0x60>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	4619      	mov	r1, r3
 800504a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800504e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	4618      	mov	r0, r3
 8005058:	f001 fef9 	bl	8006e4e <HAL_SYSTICK_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e00e      	b.n	8005084 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b0f      	cmp	r3, #15
 800506a:	d80a      	bhi.n	8005082 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800506c:	2200      	movs	r2, #0
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	f04f 30ff 	mov.w	r0, #4294967295
 8005074:	f001 fec3 	bl	8006dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005078:	4a06      	ldr	r2, [pc, #24]	; (8005094 <HAL_InitTick+0x68>)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	e000      	b.n	8005084 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	24000440 	.word	0x24000440
 8005090:	24000434 	.word	0x24000434
 8005094:	2400043c 	.word	0x2400043c

08005098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_IncTick+0x20>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <HAL_IncTick+0x24>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4413      	add	r3, r2
 80050a8:	4a04      	ldr	r2, [pc, #16]	; (80050bc <HAL_IncTick+0x24>)
 80050aa:	6013      	str	r3, [r2, #0]
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	24000440 	.word	0x24000440
 80050bc:	2400339c 	.word	0x2400339c

080050c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return uwTick;
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <HAL_GetTick+0x14>)
 80050c6:	681b      	ldr	r3, [r3, #0]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2400339c 	.word	0x2400339c

080050d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050e0:	f7ff ffee 	bl	80050c0 <HAL_GetTick>
 80050e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f0:	d005      	beq.n	80050fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <HAL_Delay+0x44>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050fe:	bf00      	nop
 8005100:	f7ff ffde 	bl	80050c0 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	429a      	cmp	r2, r3
 800510e:	d8f7      	bhi.n	8005100 <HAL_Delay+0x28>
  {
  }
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	24000440 	.word	0x24000440

08005120 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_GetREVID+0x14>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	0c1b      	lsrs	r3, r3, #16
}
 800512a:	4618      	mov	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	5c001000 	.word	0x5c001000

08005138 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	43db      	mvns	r3, r3
 800514a:	401a      	ands	r2, r3
 800514c:	4904      	ldr	r1, [pc, #16]	; (8005160 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	4313      	orrs	r3, r2
 8005152:	604b      	str	r3, [r1, #4]
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	58000400 	.word	0x58000400

08005164 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	609a      	str	r2, [r3, #8]
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3360      	adds	r3, #96	; 0x60
 80051de:	461a      	mov	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	430b      	orrs	r3, r1
 80051fa:	431a      	orrs	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	fa01 f303 	lsl.w	r3, r1, r3
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	611a      	str	r2, [r3, #16]
}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800523e:	b480      	push	{r7}
 8005240:	b087      	sub	sp, #28
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3360      	adds	r3, #96	; 0x60
 800524e:	461a      	mov	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	431a      	orrs	r2, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	601a      	str	r2, [r3, #0]
  }
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800529a:	b480      	push	{r7}
 800529c:	b087      	sub	sp, #28
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3330      	adds	r3, #48	; 0x30
 80052aa:	461a      	mov	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	4413      	add	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	211f      	movs	r1, #31
 80052c6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ca:	43db      	mvns	r3, r3
 80052cc:	401a      	ands	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0e9b      	lsrs	r3, r3, #26
 80052d2:	f003 011f 	and.w	r1, r3, #31
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	fa01 f303 	lsl.w	r3, r1, r3
 80052e0:	431a      	orrs	r2, r3
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b087      	sub	sp, #28
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3314      	adds	r3, #20
 8005302:	461a      	mov	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	0e5b      	lsrs	r3, r3, #25
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	4413      	add	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	0d1b      	lsrs	r3, r3, #20
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2107      	movs	r1, #7
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	401a      	ands	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	0d1b      	lsrs	r3, r3, #20
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	fa01 f303 	lsl.w	r3, r1, r3
 8005336:	431a      	orrs	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005360:	43db      	mvns	r3, r3
 8005362:	401a      	ands	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f003 0318 	and.w	r3, r3, #24
 800536a:	4908      	ldr	r1, [pc, #32]	; (800538c <LL_ADC_SetChannelSingleDiff+0x44>)
 800536c:	40d9      	lsrs	r1, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	400b      	ands	r3, r1
 8005372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005376:	431a      	orrs	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	000fffff 	.word	0x000fffff

08005390 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 031f 	and.w	r3, r3, #31
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6093      	str	r3, [r2, #8]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	5fffffc0 	.word	0x5fffffc0

080053ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005400:	d101      	bne.n	8005406 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <LL_ADC_EnableInternalRegulator+0x24>)
 8005422:	4013      	ands	r3, r2
 8005424:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	6fffffc0 	.word	0x6fffffc0

0800543c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005450:	d101      	bne.n	8005456 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <LL_ADC_Enable+0x24>)
 8005472:	4013      	ands	r3, r2
 8005474:	f043 0201 	orr.w	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	7fffffc0 	.word	0x7fffffc0

0800548c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <LL_ADC_Disable+0x24>)
 800549a:	4013      	ands	r3, r2
 800549c:	f043 0202 	orr.w	r2, r3, #2
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	7fffffc0 	.word	0x7fffffc0

080054b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <LL_ADC_IsEnabled+0x18>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <LL_ADC_IsEnabled+0x1a>
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d101      	bne.n	80054f2 <LL_ADC_IsDisableOngoing+0x18>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <LL_ADC_IsDisableOngoing+0x1a>
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <LL_ADC_REG_StartConversion+0x24>)
 800550e:	4013      	ands	r3, r2
 8005510:	f043 0204 	orr.w	r2, r3, #4
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	7fffffc0 	.word	0x7fffffc0

08005528 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <LL_ADC_REG_StopConversion+0x24>)
 8005536:	4013      	ands	r3, r2
 8005538:	f043 0210 	orr.w	r2, r3, #16
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	7fffffc0 	.word	0x7fffffc0

08005550 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b04      	cmp	r3, #4
 8005562:	d101      	bne.n	8005568 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <LL_ADC_INJ_StopConversion+0x24>)
 8005586:	4013      	ands	r3, r2
 8005588:	f043 0220 	orr.w	r2, r3, #32
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	7fffffc0 	.word	0x7fffffc0

080055a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d101      	bne.n	80055b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055c8:	b590      	push	{r4, r7, lr}
 80055ca:	b089      	sub	sp, #36	; 0x24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e18f      	b.n	8005902 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff f871 	bl	80046d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff feef 	bl	80053ec <LL_ADC_IsDeepPowerDownEnabled>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fed5 	bl	80053c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff0a 	bl	800543c <LL_ADC_IsInternalRegulatorEnabled>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d114      	bne.n	8005658 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff feee 	bl	8005414 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005638:	4b87      	ldr	r3, [pc, #540]	; (8005858 <HAL_ADC_Init+0x290>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	4a87      	ldr	r2, [pc, #540]	; (800585c <HAL_ADC_Init+0x294>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	099b      	lsrs	r3, r3, #6
 8005646:	3301      	adds	r3, #1
 8005648:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800564a:	e002      	b.n	8005652 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	3b01      	subs	r3, #1
 8005650:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f9      	bne.n	800564c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff feed 	bl	800543c <LL_ADC_IsInternalRegulatorEnabled>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10d      	bne.n	8005684 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566c:	f043 0210 	orr.w	r2, r3, #16
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	f043 0201 	orr.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff ff61 	bl	8005550 <LL_ADC_REG_IsConversionOngoing>
 800568e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	f040 8129 	bne.w	80058f0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 8125 	bne.w	80058f0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056ae:	f043 0202 	orr.w	r2, r3, #2
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fefa 	bl	80054b4 <LL_ADC_IsEnabled>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d136      	bne.n	8005734 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a65      	ldr	r2, [pc, #404]	; (8005860 <HAL_ADC_Init+0x298>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_ADC_Init+0x112>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a63      	ldr	r2, [pc, #396]	; (8005864 <HAL_ADC_Init+0x29c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10e      	bne.n	80056f8 <HAL_ADC_Init+0x130>
 80056da:	4861      	ldr	r0, [pc, #388]	; (8005860 <HAL_ADC_Init+0x298>)
 80056dc:	f7ff feea 	bl	80054b4 <LL_ADC_IsEnabled>
 80056e0:	4604      	mov	r4, r0
 80056e2:	4860      	ldr	r0, [pc, #384]	; (8005864 <HAL_ADC_Init+0x29c>)
 80056e4:	f7ff fee6 	bl	80054b4 <LL_ADC_IsEnabled>
 80056e8:	4603      	mov	r3, r0
 80056ea:	4323      	orrs	r3, r4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	e008      	b.n	800570a <HAL_ADC_Init+0x142>
 80056f8:	485b      	ldr	r0, [pc, #364]	; (8005868 <HAL_ADC_Init+0x2a0>)
 80056fa:	f7ff fedb 	bl	80054b4 <LL_ADC_IsEnabled>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d012      	beq.n	8005734 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a53      	ldr	r2, [pc, #332]	; (8005860 <HAL_ADC_Init+0x298>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_ADC_Init+0x15a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a51      	ldr	r2, [pc, #324]	; (8005864 <HAL_ADC_Init+0x29c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <HAL_ADC_Init+0x15e>
 8005722:	4a52      	ldr	r2, [pc, #328]	; (800586c <HAL_ADC_Init+0x2a4>)
 8005724:	e000      	b.n	8005728 <HAL_ADC_Init+0x160>
 8005726:	4a52      	ldr	r2, [pc, #328]	; (8005870 <HAL_ADC_Init+0x2a8>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7ff fd18 	bl	8005164 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005734:	f7ff fcf4 	bl	8005120 <HAL_GetREVID>
 8005738:	4603      	mov	r3, r0
 800573a:	f241 0203 	movw	r2, #4099	; 0x1003
 800573e:	4293      	cmp	r3, r2
 8005740:	d914      	bls.n	800576c <HAL_ADC_Init+0x1a4>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b10      	cmp	r3, #16
 8005748:	d110      	bne.n	800576c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	7d5b      	ldrb	r3, [r3, #21]
 800574e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005754:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800575a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	7f1b      	ldrb	r3, [r3, #28]
 8005760:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005762:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005764:	f043 030c 	orr.w	r3, r3, #12
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	e00d      	b.n	8005788 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	7d5b      	ldrb	r3, [r3, #21]
 8005770:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005776:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800577c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	7f1b      	ldrb	r3, [r3, #28]
 8005782:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005784:	4313      	orrs	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7f1b      	ldrb	r3, [r3, #28]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d106      	bne.n	800579e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	3b01      	subs	r3, #1
 8005796:	045b      	lsls	r3, r3, #17
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d009      	beq.n	80057ba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	4b2c      	ldr	r3, [pc, #176]	; (8005874 <HAL_ADC_Init+0x2ac>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	69b9      	ldr	r1, [r7, #24]
 80057ca:	430b      	orrs	r3, r1
 80057cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff febc 	bl	8005550 <LL_ADC_REG_IsConversionOngoing>
 80057d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fede 	bl	80055a0 <LL_ADC_INJ_IsConversionOngoing>
 80057e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d15f      	bne.n	80058ac <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d15c      	bne.n	80058ac <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	7d1b      	ldrb	r3, [r3, #20]
 80057f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80057fc:	4313      	orrs	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <HAL_ADC_Init+0x2b0>)
 8005808:	4013      	ands	r3, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	69b9      	ldr	r1, [r7, #24]
 8005810:	430b      	orrs	r3, r1
 8005812:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800581a:	2b01      	cmp	r3, #1
 800581c:	d130      	bne.n	8005880 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	4b14      	ldr	r3, [pc, #80]	; (800587c <HAL_ADC_Init+0x2b4>)
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005832:	3a01      	subs	r2, #1
 8005834:	0411      	lsls	r1, r2, #16
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800583a:	4311      	orrs	r1, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005846:	430a      	orrs	r2, r1
 8005848:	431a      	orrs	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	611a      	str	r2, [r3, #16]
 8005854:	e01c      	b.n	8005890 <HAL_ADC_Init+0x2c8>
 8005856:	bf00      	nop
 8005858:	24000434 	.word	0x24000434
 800585c:	053e2d63 	.word	0x053e2d63
 8005860:	40022000 	.word	0x40022000
 8005864:	40022100 	.word	0x40022100
 8005868:	58026000 	.word	0x58026000
 800586c:	40022300 	.word	0x40022300
 8005870:	58026300 	.word	0x58026300
 8005874:	fff0c003 	.word	0xfff0c003
 8005878:	ffffbffc 	.word	0xffffbffc
 800587c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 ff26 	bl	80066f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d10c      	bne.n	80058ce <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	f023 010f 	bic.w	r1, r3, #15
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	1e5a      	subs	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
 80058cc:	e007      	b.n	80058de <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 020f 	bic.w	r2, r2, #15
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	f043 0201 	orr.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	655a      	str	r2, [r3, #84]	; 0x54
 80058ee:	e007      	b.n	8005900 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f4:	f043 0210 	orr.w	r2, r3, #16
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005900:	7ffb      	ldrb	r3, [r7, #31]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3724      	adds	r7, #36	; 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd90      	pop	{r4, r7, pc}
 800590a:	bf00      	nop

0800590c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a5c      	ldr	r2, [pc, #368]	; (8005a8c <HAL_ADC_Start+0x180>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <HAL_ADC_Start+0x1c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a5b      	ldr	r2, [pc, #364]	; (8005a90 <HAL_ADC_Start+0x184>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d101      	bne.n	800592c <HAL_ADC_Start+0x20>
 8005928:	4b5a      	ldr	r3, [pc, #360]	; (8005a94 <HAL_ADC_Start+0x188>)
 800592a:	e000      	b.n	800592e <HAL_ADC_Start+0x22>
 800592c:	4b5a      	ldr	r3, [pc, #360]	; (8005a98 <HAL_ADC_Start+0x18c>)
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fd2e 	bl	8005390 <LL_ADC_GetMultimode>
 8005934:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fe08 	bl	8005550 <LL_ADC_REG_IsConversionOngoing>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 809a 	bne.w	8005a7c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_ADC_Start+0x4a>
 8005952:	2302      	movs	r3, #2
 8005954:	e095      	b.n	8005a82 <HAL_ADC_Start+0x176>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fde0 	bl	8006524 <ADC_Enable>
 8005964:	4603      	mov	r3, r0
 8005966:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 8081 	bne.w	8005a72 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005974:	4b49      	ldr	r3, [pc, #292]	; (8005a9c <HAL_ADC_Start+0x190>)
 8005976:	4013      	ands	r3, r2
 8005978:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a42      	ldr	r2, [pc, #264]	; (8005a90 <HAL_ADC_Start+0x184>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d002      	beq.n	8005990 <HAL_ADC_Start+0x84>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	e000      	b.n	8005992 <HAL_ADC_Start+0x86>
 8005990:	4b3e      	ldr	r3, [pc, #248]	; (8005a8c <HAL_ADC_Start+0x180>)
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	4293      	cmp	r3, r2
 8005998:	d002      	beq.n	80059a0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b8:	d106      	bne.n	80059c8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	f023 0206 	bic.w	r2, r3, #6
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	659a      	str	r2, [r3, #88]	; 0x58
 80059c6:	e002      	b.n	80059ce <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	221c      	movs	r2, #28
 80059d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2b      	ldr	r2, [pc, #172]	; (8005a90 <HAL_ADC_Start+0x184>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d002      	beq.n	80059ee <HAL_ADC_Start+0xe2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	e000      	b.n	80059f0 <HAL_ADC_Start+0xe4>
 80059ee:	4b27      	ldr	r3, [pc, #156]	; (8005a8c <HAL_ADC_Start+0x180>)
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d008      	beq.n	8005a0a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2b05      	cmp	r3, #5
 8005a02:	d002      	beq.n	8005a0a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b09      	cmp	r3, #9
 8005a08:	d114      	bne.n	8005a34 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fd67 	bl	8005500 <LL_ADC_REG_StartConversion>
 8005a32:	e025      	b.n	8005a80 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a12      	ldr	r2, [pc, #72]	; (8005a90 <HAL_ADC_Start+0x184>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d002      	beq.n	8005a50 <HAL_ADC_Start+0x144>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	e000      	b.n	8005a52 <HAL_ADC_Start+0x146>
 8005a50:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <HAL_ADC_Start+0x180>)
 8005a52:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00f      	beq.n	8005a80 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
 8005a70:	e006      	b.n	8005a80 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005a7a:	e001      	b.n	8005a80 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40022000 	.word	0x40022000
 8005a90:	40022100 	.word	0x40022100
 8005a94:	40022300 	.word	0x40022300
 8005a98:	58026300 	.word	0x58026300
 8005a9c:	fffff0fe 	.word	0xfffff0fe

08005aa0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_ADC_Stop+0x16>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e021      	b.n	8005afa <HAL_ADC_Stop+0x5a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005abe:	2103      	movs	r1, #3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fc73 	bl	80063ac <ADC_ConversionStop>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10f      	bne.n	8005af0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fdb1 	bl	8006638 <ADC_Disable>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d107      	bne.n	8005af0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae4:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <HAL_ADC_Stop+0x64>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	f043 0201 	orr.w	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	ffffeefe 	.word	0xffffeefe

08005b08 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a72      	ldr	r2, [pc, #456]	; (8005ce0 <HAL_ADC_PollForConversion+0x1d8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_ADC_PollForConversion+0x1e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a70      	ldr	r2, [pc, #448]	; (8005ce4 <HAL_ADC_PollForConversion+0x1dc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d101      	bne.n	8005b2a <HAL_ADC_PollForConversion+0x22>
 8005b26:	4b70      	ldr	r3, [pc, #448]	; (8005ce8 <HAL_ADC_PollForConversion+0x1e0>)
 8005b28:	e000      	b.n	8005b2c <HAL_ADC_PollForConversion+0x24>
 8005b2a:	4b70      	ldr	r3, [pc, #448]	; (8005cec <HAL_ADC_PollForConversion+0x1e4>)
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fc2f 	bl	8005390 <LL_ADC_GetMultimode>
 8005b32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d102      	bne.n	8005b42 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e037      	b.n	8005bb2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b05      	cmp	r3, #5
 8005b4c:	d002      	beq.n	8005b54 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b09      	cmp	r3, #9
 8005b52:	d111      	bne.n	8005b78 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b66:	f043 0220 	orr.w	r2, r3, #32
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e0b1      	b.n	8005cd6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005b72:	2304      	movs	r3, #4
 8005b74:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8005b76:	e01c      	b.n	8005bb2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a58      	ldr	r2, [pc, #352]	; (8005ce0 <HAL_ADC_PollForConversion+0x1d8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <HAL_ADC_PollForConversion+0x84>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a57      	ldr	r2, [pc, #348]	; (8005ce4 <HAL_ADC_PollForConversion+0x1dc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d101      	bne.n	8005b90 <HAL_ADC_PollForConversion+0x88>
 8005b8c:	4b56      	ldr	r3, [pc, #344]	; (8005ce8 <HAL_ADC_PollForConversion+0x1e0>)
 8005b8e:	e000      	b.n	8005b92 <HAL_ADC_PollForConversion+0x8a>
 8005b90:	4b56      	ldr	r3, [pc, #344]	; (8005cec <HAL_ADC_PollForConversion+0x1e4>)
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fc0a 	bl	80053ac <LL_ADC_GetMultiDMATransfer>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba2:	f043 0220 	orr.w	r2, r3, #32
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e093      	b.n	8005cd6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005bae:	2304      	movs	r3, #4
 8005bb0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005bb2:	f7ff fa85 	bl	80050c0 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005bb8:	e021      	b.n	8005bfe <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d01d      	beq.n	8005bfe <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005bc2:	f7ff fa7d 	bl	80050c0 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d302      	bcc.n	8005bd8 <HAL_ADC_PollForConversion+0xd0>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d112      	bne.n	8005bfe <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4013      	ands	r3, r2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10b      	bne.n	8005bfe <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	f043 0204 	orr.w	r2, r3, #4
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e06b      	b.n	8005cd6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0d6      	beq.n	8005bba <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fb29 	bl	8005274 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01c      	beq.n	8005c62 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	7d5b      	ldrb	r3, [r3, #21]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d118      	bne.n	8005c62 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d111      	bne.n	8005c62 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d105      	bne.n	8005c62 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5a:	f043 0201 	orr.w	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1f      	ldr	r2, [pc, #124]	; (8005ce4 <HAL_ADC_PollForConversion+0x1dc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d002      	beq.n	8005c72 <HAL_ADC_PollForConversion+0x16a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	e000      	b.n	8005c74 <HAL_ADC_PollForConversion+0x16c>
 8005c72:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <HAL_ADC_PollForConversion+0x1d8>)
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d008      	beq.n	8005c8e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b05      	cmp	r3, #5
 8005c86:	d002      	beq.n	8005c8e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	d104      	bne.n	8005c98 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e00c      	b.n	8005cb2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a11      	ldr	r2, [pc, #68]	; (8005ce4 <HAL_ADC_PollForConversion+0x1dc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d002      	beq.n	8005ca8 <HAL_ADC_PollForConversion+0x1a0>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	e000      	b.n	8005caa <HAL_ADC_PollForConversion+0x1a2>
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <HAL_ADC_PollForConversion+0x1d8>)
 8005caa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d104      	bne.n	8005cc2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e008      	b.n	8005cd4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	220c      	movs	r2, #12
 8005cd2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40022000 	.word	0x40022000
 8005ce4:	40022100 	.word	0x40022100
 8005ce8:	40022300 	.word	0x40022300
 8005cec:	58026300 	.word	0x58026300

08005cf0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	b0a1      	sub	sp, #132	; 0x84
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a9d      	ldr	r2, [pc, #628]	; (8005f9c <HAL_ADC_ConfigChannel+0x290>)
 8005d26:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_ADC_ConfigChannel+0x2a>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e321      	b.n	800637a <HAL_ADC_ConfigChannel+0x66e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fc04 	bl	8005550 <LL_ADC_REG_IsConversionOngoing>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 8306 	bne.w	800635c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d108      	bne.n	8005d6e <HAL_ADC_ConfigChannel+0x62>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	0e9b      	lsrs	r3, r3, #26
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2201      	movs	r2, #1
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	e016      	b.n	8005d9c <HAL_ADC_ConfigChannel+0x90>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d76:	fa93 f3a3 	rbit	r3, r3
 8005d7a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d7e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005d86:	2320      	movs	r3, #32
 8005d88:	e003      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d8c:	fab3 f383 	clz	r3, r3
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2201      	movs	r2, #1
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	69d1      	ldr	r1, [r2, #28]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	430b      	orrs	r3, r1
 8005da8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6859      	ldr	r1, [r3, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	f7ff fa6f 	bl	800529a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fbc5 	bl	8005550 <LL_ADC_REG_IsConversionOngoing>
 8005dc6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fbe7 	bl	80055a0 <LL_ADC_INJ_IsConversionOngoing>
 8005dd2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 80b3 	bne.w	8005f42 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 80af 	bne.w	8005f42 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6819      	ldr	r1, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	461a      	mov	r2, r3
 8005df2:	f7ff fa7e 	bl	80052f2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005df6:	4b6a      	ldr	r3, [pc, #424]	; (8005fa0 <HAL_ADC_ConfigChannel+0x294>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e02:	d10b      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x110>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	695a      	ldr	r2, [r3, #20]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	e01d      	b.n	8005e58 <HAL_ADC_ConfigChannel+0x14c>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_ADC_ConfigChannel+0x136>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	089b      	lsrs	r3, r3, #2
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	e00a      	b.n	8005e58 <HAL_ADC_ConfigChannel+0x14c>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d027      	beq.n	8005eb2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6919      	ldr	r1, [r3, #16]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e70:	f7ff f9ac 	bl	80051cc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6919      	ldr	r1, [r3, #16]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	7e5b      	ldrb	r3, [r3, #25]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <HAL_ADC_ConfigChannel+0x17e>
 8005e84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e88:	e000      	b.n	8005e8c <HAL_ADC_ConfigChannel+0x180>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f7ff f9d6 	bl	800523e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6919      	ldr	r1, [r3, #16]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	7e1b      	ldrb	r3, [r3, #24]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d102      	bne.n	8005ea8 <HAL_ADC_ConfigChannel+0x19c>
 8005ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ea6:	e000      	b.n	8005eaa <HAL_ADC_ConfigChannel+0x19e>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7ff f9ae 	bl	800520c <LL_ADC_SetDataRightShift>
 8005eb0:	e047      	b.n	8005f42 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	069b      	lsls	r3, r3, #26
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d107      	bne.n	8005ed6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ed4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005edc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	069b      	lsls	r3, r3, #26
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d107      	bne.n	8005efa <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ef8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	069b      	lsls	r3, r3, #26
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d107      	bne.n	8005f1e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f1c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	069b      	lsls	r3, r3, #26
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d107      	bne.n	8005f42 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f40:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fab4 	bl	80054b4 <LL_ADC_IsEnabled>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 820d 	bne.w	800636e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6819      	ldr	r1, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	461a      	mov	r2, r3
 8005f62:	f7ff f9f1 	bl	8005348 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	; (8005f9c <HAL_ADC_ConfigChannel+0x290>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	f040 8133 	bne.w	80061d8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d110      	bne.n	8005fa4 <HAL_ADC_ConfigChannel+0x298>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	0e9b      	lsrs	r3, r3, #26
 8005f88:	3301      	adds	r3, #1
 8005f8a:	f003 031f 	and.w	r3, r3, #31
 8005f8e:	2b09      	cmp	r3, #9
 8005f90:	bf94      	ite	ls
 8005f92:	2301      	movls	r3, #1
 8005f94:	2300      	movhi	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	e01e      	b.n	8005fd8 <HAL_ADC_ConfigChannel+0x2cc>
 8005f9a:	bf00      	nop
 8005f9c:	47ff0000 	.word	0x47ff0000
 8005fa0:	5c001000 	.word	0x5c001000
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fac:	fa93 f3a3 	rbit	r3, r3
 8005fb0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005fbc:	2320      	movs	r3, #32
 8005fbe:	e003      	b.n	8005fc8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc2:	fab3 f383 	clz	r3, r3
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2b09      	cmp	r3, #9
 8005fd0:	bf94      	ite	ls
 8005fd2:	2301      	movls	r3, #1
 8005fd4:	2300      	movhi	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d079      	beq.n	80060d0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d107      	bne.n	8005ff8 <HAL_ADC_ConfigChannel+0x2ec>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	0e9b      	lsrs	r3, r3, #26
 8005fee:	3301      	adds	r3, #1
 8005ff0:	069b      	lsls	r3, r3, #26
 8005ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ff6:	e015      	b.n	8006024 <HAL_ADC_ConfigChannel+0x318>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006000:	fa93 f3a3 	rbit	r3, r3
 8006004:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006008:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800600a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8006010:	2320      	movs	r3, #32
 8006012:	e003      	b.n	800601c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006016:	fab3 f383 	clz	r3, r3
 800601a:	b2db      	uxtb	r3, r3
 800601c:	3301      	adds	r3, #1
 800601e:	069b      	lsls	r3, r3, #26
 8006020:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800602c:	2b00      	cmp	r3, #0
 800602e:	d109      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x338>
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	0e9b      	lsrs	r3, r3, #26
 8006036:	3301      	adds	r3, #1
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2101      	movs	r1, #1
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	e017      	b.n	8006074 <HAL_ADC_ConfigChannel+0x368>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604c:	fa93 f3a3 	rbit	r3, r3
 8006050:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800605c:	2320      	movs	r3, #32
 800605e:	e003      	b.n	8006068 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8006060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006062:	fab3 f383 	clz	r3, r3
 8006066:	b2db      	uxtb	r3, r3
 8006068:	3301      	adds	r3, #1
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	2101      	movs	r1, #1
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	ea42 0103 	orr.w	r1, r2, r3
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <HAL_ADC_ConfigChannel+0x38e>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	0e9b      	lsrs	r3, r3, #26
 800608a:	3301      	adds	r3, #1
 800608c:	f003 021f 	and.w	r2, r3, #31
 8006090:	4613      	mov	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	051b      	lsls	r3, r3, #20
 8006098:	e018      	b.n	80060cc <HAL_ADC_ConfigChannel+0x3c0>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	fa93 f3a3 	rbit	r3, r3
 80060a6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80060b2:	2320      	movs	r3, #32
 80060b4:	e003      	b.n	80060be <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	fab3 f383 	clz	r3, r3
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	3301      	adds	r3, #1
 80060c0:	f003 021f 	and.w	r2, r3, #31
 80060c4:	4613      	mov	r3, r2
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4413      	add	r3, r2
 80060ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060cc:	430b      	orrs	r3, r1
 80060ce:	e07e      	b.n	80061ce <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d107      	bne.n	80060ec <HAL_ADC_ConfigChannel+0x3e0>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	0e9b      	lsrs	r3, r3, #26
 80060e2:	3301      	adds	r3, #1
 80060e4:	069b      	lsls	r3, r3, #26
 80060e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060ea:	e015      	b.n	8006118 <HAL_ADC_ConfigChannel+0x40c>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	fa93 f3a3 	rbit	r3, r3
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006104:	2320      	movs	r3, #32
 8006106:	e003      	b.n	8006110 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610a:	fab3 f383 	clz	r3, r3
 800610e:	b2db      	uxtb	r3, r3
 8006110:	3301      	adds	r3, #1
 8006112:	069b      	lsls	r3, r3, #26
 8006114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x42c>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	0e9b      	lsrs	r3, r3, #26
 800612a:	3301      	adds	r3, #1
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	2101      	movs	r1, #1
 8006132:	fa01 f303 	lsl.w	r3, r1, r3
 8006136:	e017      	b.n	8006168 <HAL_ADC_ConfigChannel+0x45c>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	fa93 f3a3 	rbit	r3, r3
 8006144:	61bb      	str	r3, [r7, #24]
  return result;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8006150:	2320      	movs	r3, #32
 8006152:	e003      	b.n	800615c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	fab3 f383 	clz	r3, r3
 800615a:	b2db      	uxtb	r3, r3
 800615c:	3301      	adds	r3, #1
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2101      	movs	r1, #1
 8006164:	fa01 f303 	lsl.w	r3, r1, r3
 8006168:	ea42 0103 	orr.w	r1, r2, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10d      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x488>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	0e9b      	lsrs	r3, r3, #26
 800617e:	3301      	adds	r3, #1
 8006180:	f003 021f 	and.w	r2, r3, #31
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	3b1e      	subs	r3, #30
 800618c:	051b      	lsls	r3, r3, #20
 800618e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006192:	e01b      	b.n	80061cc <HAL_ADC_ConfigChannel+0x4c0>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	fa93 f3a3 	rbit	r3, r3
 80061a0:	60fb      	str	r3, [r7, #12]
  return result;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80061ac:	2320      	movs	r3, #32
 80061ae:	e003      	b.n	80061b8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	3301      	adds	r3, #1
 80061ba:	f003 021f 	and.w	r2, r3, #31
 80061be:	4613      	mov	r3, r2
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	4413      	add	r3, r2
 80061c4:	3b1e      	subs	r3, #30
 80061c6:	051b      	lsls	r3, r3, #20
 80061c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061cc:	430b      	orrs	r3, r1
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	6892      	ldr	r2, [r2, #8]
 80061d2:	4619      	mov	r1, r3
 80061d4:	f7ff f88d 	bl	80052f2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f280 80c6 	bge.w	800636e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a67      	ldr	r2, [pc, #412]	; (8006384 <HAL_ADC_ConfigChannel+0x678>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_ADC_ConfigChannel+0x4ea>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a65      	ldr	r2, [pc, #404]	; (8006388 <HAL_ADC_ConfigChannel+0x67c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d101      	bne.n	80061fa <HAL_ADC_ConfigChannel+0x4ee>
 80061f6:	4b65      	ldr	r3, [pc, #404]	; (800638c <HAL_ADC_ConfigChannel+0x680>)
 80061f8:	e000      	b.n	80061fc <HAL_ADC_ConfigChannel+0x4f0>
 80061fa:	4b65      	ldr	r3, [pc, #404]	; (8006390 <HAL_ADC_ConfigChannel+0x684>)
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe ffd7 	bl	80051b0 <LL_ADC_GetCommonPathInternalCh>
 8006202:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5e      	ldr	r2, [pc, #376]	; (8006384 <HAL_ADC_ConfigChannel+0x678>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_ADC_ConfigChannel+0x50c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a5d      	ldr	r2, [pc, #372]	; (8006388 <HAL_ADC_ConfigChannel+0x67c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10e      	bne.n	8006236 <HAL_ADC_ConfigChannel+0x52a>
 8006218:	485a      	ldr	r0, [pc, #360]	; (8006384 <HAL_ADC_ConfigChannel+0x678>)
 800621a:	f7ff f94b 	bl	80054b4 <LL_ADC_IsEnabled>
 800621e:	4604      	mov	r4, r0
 8006220:	4859      	ldr	r0, [pc, #356]	; (8006388 <HAL_ADC_ConfigChannel+0x67c>)
 8006222:	f7ff f947 	bl	80054b4 <LL_ADC_IsEnabled>
 8006226:	4603      	mov	r3, r0
 8006228:	4323      	orrs	r3, r4
 800622a:	2b00      	cmp	r3, #0
 800622c:	bf0c      	ite	eq
 800622e:	2301      	moveq	r3, #1
 8006230:	2300      	movne	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	e008      	b.n	8006248 <HAL_ADC_ConfigChannel+0x53c>
 8006236:	4857      	ldr	r0, [pc, #348]	; (8006394 <HAL_ADC_ConfigChannel+0x688>)
 8006238:	f7ff f93c 	bl	80054b4 <LL_ADC_IsEnabled>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	bf0c      	ite	eq
 8006242:	2301      	moveq	r3, #1
 8006244:	2300      	movne	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d07d      	beq.n	8006348 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a51      	ldr	r2, [pc, #324]	; (8006398 <HAL_ADC_ConfigChannel+0x68c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d130      	bne.n	80062b8 <HAL_ADC_ConfigChannel+0x5ac>
 8006256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d12b      	bne.n	80062b8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a4b      	ldr	r2, [pc, #300]	; (8006394 <HAL_ADC_ConfigChannel+0x688>)
 8006266:	4293      	cmp	r3, r2
 8006268:	f040 8081 	bne.w	800636e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a44      	ldr	r2, [pc, #272]	; (8006384 <HAL_ADC_ConfigChannel+0x678>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_ADC_ConfigChannel+0x574>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a43      	ldr	r2, [pc, #268]	; (8006388 <HAL_ADC_ConfigChannel+0x67c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d101      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x578>
 8006280:	4a42      	ldr	r2, [pc, #264]	; (800638c <HAL_ADC_ConfigChannel+0x680>)
 8006282:	e000      	b.n	8006286 <HAL_ADC_ConfigChannel+0x57a>
 8006284:	4a42      	ldr	r2, [pc, #264]	; (8006390 <HAL_ADC_ConfigChannel+0x684>)
 8006286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006288:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f7fe ff7b 	bl	800518a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006294:	4b41      	ldr	r3, [pc, #260]	; (800639c <HAL_ADC_ConfigChannel+0x690>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	099b      	lsrs	r3, r3, #6
 800629a:	4a41      	ldr	r2, [pc, #260]	; (80063a0 <HAL_ADC_ConfigChannel+0x694>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	099b      	lsrs	r3, r3, #6
 80062a2:	3301      	adds	r3, #1
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80062a8:	e002      	b.n	80062b0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f9      	bne.n	80062aa <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062b6:	e05a      	b.n	800636e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a39      	ldr	r2, [pc, #228]	; (80063a4 <HAL_ADC_ConfigChannel+0x698>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d11e      	bne.n	8006300 <HAL_ADC_ConfigChannel+0x5f4>
 80062c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d119      	bne.n	8006300 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a30      	ldr	r2, [pc, #192]	; (8006394 <HAL_ADC_ConfigChannel+0x688>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d14b      	bne.n	800636e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <HAL_ADC_ConfigChannel+0x678>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_ADC_ConfigChannel+0x5de>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a28      	ldr	r2, [pc, #160]	; (8006388 <HAL_ADC_ConfigChannel+0x67c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_ADC_ConfigChannel+0x5e2>
 80062ea:	4a28      	ldr	r2, [pc, #160]	; (800638c <HAL_ADC_ConfigChannel+0x680>)
 80062ec:	e000      	b.n	80062f0 <HAL_ADC_ConfigChannel+0x5e4>
 80062ee:	4a28      	ldr	r2, [pc, #160]	; (8006390 <HAL_ADC_ConfigChannel+0x684>)
 80062f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f7fe ff46 	bl	800518a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80062fe:	e036      	b.n	800636e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a28      	ldr	r2, [pc, #160]	; (80063a8 <HAL_ADC_ConfigChannel+0x69c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d131      	bne.n	800636e <HAL_ADC_ConfigChannel+0x662>
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d12c      	bne.n	800636e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1e      	ldr	r2, [pc, #120]	; (8006394 <HAL_ADC_ConfigChannel+0x688>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d127      	bne.n	800636e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a18      	ldr	r2, [pc, #96]	; (8006384 <HAL_ADC_ConfigChannel+0x678>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d004      	beq.n	8006332 <HAL_ADC_ConfigChannel+0x626>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a16      	ldr	r2, [pc, #88]	; (8006388 <HAL_ADC_ConfigChannel+0x67c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d101      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x62a>
 8006332:	4a16      	ldr	r2, [pc, #88]	; (800638c <HAL_ADC_ConfigChannel+0x680>)
 8006334:	e000      	b.n	8006338 <HAL_ADC_ConfigChannel+0x62c>
 8006336:	4a16      	ldr	r2, [pc, #88]	; (8006390 <HAL_ADC_ConfigChannel+0x684>)
 8006338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f7fe ff22 	bl	800518a <LL_ADC_SetCommonPathInternalCh>
 8006346:	e012      	b.n	800636e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634c:	f043 0220 	orr.w	r2, r3, #32
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800635a:	e008      	b.n	800636e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	f043 0220 	orr.w	r2, r3, #32
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006376:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800637a:	4618      	mov	r0, r3
 800637c:	3784      	adds	r7, #132	; 0x84
 800637e:	46bd      	mov	sp, r7
 8006380:	bd90      	pop	{r4, r7, pc}
 8006382:	bf00      	nop
 8006384:	40022000 	.word	0x40022000
 8006388:	40022100 	.word	0x40022100
 800638c:	40022300 	.word	0x40022300
 8006390:	58026300 	.word	0x58026300
 8006394:	58026000 	.word	0x58026000
 8006398:	cb840000 	.word	0xcb840000
 800639c:	24000434 	.word	0x24000434
 80063a0:	053e2d63 	.word	0x053e2d63
 80063a4:	c7520000 	.word	0xc7520000
 80063a8:	cfb80000 	.word	0xcfb80000

080063ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff f8c4 	bl	8005550 <LL_ADC_REG_IsConversionOngoing>
 80063c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff f8e6 	bl	80055a0 <LL_ADC_INJ_IsConversionOngoing>
 80063d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d103      	bne.n	80063e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8098 	beq.w	8006514 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d02a      	beq.n	8006448 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	7d5b      	ldrb	r3, [r3, #21]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d126      	bne.n	8006448 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	7d1b      	ldrb	r3, [r3, #20]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d122      	bne.n	8006448 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006402:	2301      	movs	r3, #1
 8006404:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006406:	e014      	b.n	8006432 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4a45      	ldr	r2, [pc, #276]	; (8006520 <ADC_ConversionStop+0x174>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d90d      	bls.n	800642c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006414:	f043 0210 	orr.w	r2, r3, #16
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006420:	f043 0201 	orr.w	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e074      	b.n	8006516 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	3301      	adds	r3, #1
 8006430:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	d1e3      	bne.n	8006408 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2240      	movs	r2, #64	; 0x40
 8006446:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d014      	beq.n	8006478 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff f87c 	bl	8005550 <LL_ADC_REG_IsConversionOngoing>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00c      	beq.n	8006478 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff f839 	bl	80054da <LL_ADC_IsDisableOngoing>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff f858 	bl	8005528 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d014      	beq.n	80064a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff f88c 	bl	80055a0 <LL_ADC_INJ_IsConversionOngoing>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00c      	beq.n	80064a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff f821 	bl	80054da <LL_ADC_IsDisableOngoing>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff f868 	bl	8005578 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d005      	beq.n	80064ba <ADC_ConversionStop+0x10e>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d105      	bne.n	80064c0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80064b4:	230c      	movs	r3, #12
 80064b6:	617b      	str	r3, [r7, #20]
        break;
 80064b8:	e005      	b.n	80064c6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80064ba:	2308      	movs	r3, #8
 80064bc:	617b      	str	r3, [r7, #20]
        break;
 80064be:	e002      	b.n	80064c6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80064c0:	2304      	movs	r3, #4
 80064c2:	617b      	str	r3, [r7, #20]
        break;
 80064c4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80064c6:	f7fe fdfb 	bl	80050c0 <HAL_GetTick>
 80064ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80064cc:	e01b      	b.n	8006506 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80064ce:	f7fe fdf7 	bl	80050c0 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b05      	cmp	r3, #5
 80064da:	d914      	bls.n	8006506 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00d      	beq.n	8006506 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f043 0210 	orr.w	r2, r3, #16
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	f043 0201 	orr.w	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e007      	b.n	8006516 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1dc      	bne.n	80064ce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3720      	adds	r7, #32
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	000cdbff 	.word	0x000cdbff

08006524 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe ffbf 	bl	80054b4 <LL_ADC_IsEnabled>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d16e      	bne.n	800661a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	4b38      	ldr	r3, [pc, #224]	; (8006624 <ADC_Enable+0x100>)
 8006544:	4013      	ands	r3, r2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00d      	beq.n	8006566 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	f043 0210 	orr.w	r2, r3, #16
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655a:	f043 0201 	orr.w	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e05a      	b.n	800661c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe ff7a 	bl	8005464 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006570:	f7fe fda6 	bl	80050c0 <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a2b      	ldr	r2, [pc, #172]	; (8006628 <ADC_Enable+0x104>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <ADC_Enable+0x66>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a29      	ldr	r2, [pc, #164]	; (800662c <ADC_Enable+0x108>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d101      	bne.n	800658e <ADC_Enable+0x6a>
 800658a:	4b29      	ldr	r3, [pc, #164]	; (8006630 <ADC_Enable+0x10c>)
 800658c:	e000      	b.n	8006590 <ADC_Enable+0x6c>
 800658e:	4b29      	ldr	r3, [pc, #164]	; (8006634 <ADC_Enable+0x110>)
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fefd 	bl	8005390 <LL_ADC_GetMultimode>
 8006596:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a23      	ldr	r2, [pc, #140]	; (800662c <ADC_Enable+0x108>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d002      	beq.n	80065a8 <ADC_Enable+0x84>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	e000      	b.n	80065aa <ADC_Enable+0x86>
 80065a8:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <ADC_Enable+0x104>)
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d02c      	beq.n	800660c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d130      	bne.n	800661a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065b8:	e028      	b.n	800660c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe ff78 	bl	80054b4 <LL_ADC_IsEnabled>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe ff48 	bl	8005464 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80065d4:	f7fe fd74 	bl	80050c0 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d914      	bls.n	800660c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d00d      	beq.n	800660c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f043 0210 	orr.w	r2, r3, #16
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006600:	f043 0201 	orr.w	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e007      	b.n	800661c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b01      	cmp	r3, #1
 8006618:	d1cf      	bne.n	80065ba <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	8000003f 	.word	0x8000003f
 8006628:	40022000 	.word	0x40022000
 800662c:	40022100 	.word	0x40022100
 8006630:	40022300 	.word	0x40022300
 8006634:	58026300 	.word	0x58026300

08006638 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe ff48 	bl	80054da <LL_ADC_IsDisableOngoing>
 800664a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe ff2f 	bl	80054b4 <LL_ADC_IsEnabled>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d047      	beq.n	80066ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d144      	bne.n	80066ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 030d 	and.w	r3, r3, #13
 800666c:	2b01      	cmp	r3, #1
 800666e:	d10c      	bne.n	800668a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe ff09 	bl	800548c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2203      	movs	r2, #3
 8006680:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006682:	f7fe fd1d 	bl	80050c0 <HAL_GetTick>
 8006686:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006688:	e029      	b.n	80066de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	f043 0210 	orr.w	r2, r3, #16
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669a:	f043 0201 	orr.w	r2, r3, #1
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e023      	b.n	80066ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80066a6:	f7fe fd0b 	bl	80050c0 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d914      	bls.n	80066de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00d      	beq.n	80066de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c6:	f043 0210 	orr.w	r2, r3, #16
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	f043 0201 	orr.w	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e007      	b.n	80066ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1dc      	bne.n	80066a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a7a      	ldr	r2, [pc, #488]	; (80068f0 <ADC_ConfigureBoostMode+0x1f8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d004      	beq.n	8006714 <ADC_ConfigureBoostMode+0x1c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a79      	ldr	r2, [pc, #484]	; (80068f4 <ADC_ConfigureBoostMode+0x1fc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d109      	bne.n	8006728 <ADC_ConfigureBoostMode+0x30>
 8006714:	4b78      	ldr	r3, [pc, #480]	; (80068f8 <ADC_ConfigureBoostMode+0x200>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800671c:	2b00      	cmp	r3, #0
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	e008      	b.n	800673a <ADC_ConfigureBoostMode+0x42>
 8006728:	4b74      	ldr	r3, [pc, #464]	; (80068fc <ADC_ConfigureBoostMode+0x204>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf14      	ite	ne
 8006734:	2301      	movne	r3, #1
 8006736:	2300      	moveq	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01c      	beq.n	8006778 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800673e:	f002 fb19 	bl	8008d74 <HAL_RCC_GetHCLKFreq>
 8006742:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800674c:	d010      	beq.n	8006770 <ADC_ConfigureBoostMode+0x78>
 800674e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006752:	d873      	bhi.n	800683c <ADC_ConfigureBoostMode+0x144>
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006758:	d002      	beq.n	8006760 <ADC_ConfigureBoostMode+0x68>
 800675a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800675e:	d16d      	bne.n	800683c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	0c1b      	lsrs	r3, r3, #16
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	fbb2 f3f3 	udiv	r3, r2, r3
 800676c:	60fb      	str	r3, [r7, #12]
        break;
 800676e:	e068      	b.n	8006842 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	60fb      	str	r3, [r7, #12]
        break;
 8006776:	e064      	b.n	8006842 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006778:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800677c:	f04f 0100 	mov.w	r1, #0
 8006780:	f003 fd5e 	bl	800a240 <HAL_RCCEx_GetPeriphCLKFreq>
 8006784:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800678e:	d051      	beq.n	8006834 <ADC_ConfigureBoostMode+0x13c>
 8006790:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006794:	d854      	bhi.n	8006840 <ADC_ConfigureBoostMode+0x148>
 8006796:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800679a:	d047      	beq.n	800682c <ADC_ConfigureBoostMode+0x134>
 800679c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80067a0:	d84e      	bhi.n	8006840 <ADC_ConfigureBoostMode+0x148>
 80067a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80067a6:	d03d      	beq.n	8006824 <ADC_ConfigureBoostMode+0x12c>
 80067a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80067ac:	d848      	bhi.n	8006840 <ADC_ConfigureBoostMode+0x148>
 80067ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067b2:	d033      	beq.n	800681c <ADC_ConfigureBoostMode+0x124>
 80067b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067b8:	d842      	bhi.n	8006840 <ADC_ConfigureBoostMode+0x148>
 80067ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80067be:	d029      	beq.n	8006814 <ADC_ConfigureBoostMode+0x11c>
 80067c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80067c4:	d83c      	bhi.n	8006840 <ADC_ConfigureBoostMode+0x148>
 80067c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80067ca:	d01a      	beq.n	8006802 <ADC_ConfigureBoostMode+0x10a>
 80067cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80067d0:	d836      	bhi.n	8006840 <ADC_ConfigureBoostMode+0x148>
 80067d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80067d6:	d014      	beq.n	8006802 <ADC_ConfigureBoostMode+0x10a>
 80067d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80067dc:	d830      	bhi.n	8006840 <ADC_ConfigureBoostMode+0x148>
 80067de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e2:	d00e      	beq.n	8006802 <ADC_ConfigureBoostMode+0x10a>
 80067e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e8:	d82a      	bhi.n	8006840 <ADC_ConfigureBoostMode+0x148>
 80067ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067ee:	d008      	beq.n	8006802 <ADC_ConfigureBoostMode+0x10a>
 80067f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067f4:	d824      	bhi.n	8006840 <ADC_ConfigureBoostMode+0x148>
 80067f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067fa:	d002      	beq.n	8006802 <ADC_ConfigureBoostMode+0x10a>
 80067fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006800:	d11e      	bne.n	8006840 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	0c9b      	lsrs	r3, r3, #18
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	60fb      	str	r3, [r7, #12]
        break;
 8006812:	e016      	b.n	8006842 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	091b      	lsrs	r3, r3, #4
 8006818:	60fb      	str	r3, [r7, #12]
        break;
 800681a:	e012      	b.n	8006842 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	60fb      	str	r3, [r7, #12]
        break;
 8006822:	e00e      	b.n	8006842 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	099b      	lsrs	r3, r3, #6
 8006828:	60fb      	str	r3, [r7, #12]
        break;
 800682a:	e00a      	b.n	8006842 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	09db      	lsrs	r3, r3, #7
 8006830:	60fb      	str	r3, [r7, #12]
        break;
 8006832:	e006      	b.n	8006842 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	0a1b      	lsrs	r3, r3, #8
 8006838:	60fb      	str	r3, [r7, #12]
        break;
 800683a:	e002      	b.n	8006842 <ADC_ConfigureBoostMode+0x14a>
        break;
 800683c:	bf00      	nop
 800683e:	e000      	b.n	8006842 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006840:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006842:	f7fe fc6d 	bl	8005120 <HAL_GetREVID>
 8006846:	4603      	mov	r3, r0
 8006848:	f241 0203 	movw	r2, #4099	; 0x1003
 800684c:	4293      	cmp	r3, r2
 800684e:	d815      	bhi.n	800687c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a2b      	ldr	r2, [pc, #172]	; (8006900 <ADC_ConfigureBoostMode+0x208>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d908      	bls.n	800686a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006866:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006868:	e03e      	b.n	80068e8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006878:	609a      	str	r2, [r3, #8]
}
 800687a:	e035      	b.n	80068e8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a1f      	ldr	r2, [pc, #124]	; (8006904 <ADC_ConfigureBoostMode+0x20c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d808      	bhi.n	800689c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006898:	609a      	str	r2, [r3, #8]
}
 800689a:	e025      	b.n	80068e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4a1a      	ldr	r2, [pc, #104]	; (8006908 <ADC_ConfigureBoostMode+0x210>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d80a      	bhi.n	80068ba <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b6:	609a      	str	r2, [r3, #8]
}
 80068b8:	e016      	b.n	80068e8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4a13      	ldr	r2, [pc, #76]	; (800690c <ADC_ConfigureBoostMode+0x214>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d80a      	bhi.n	80068d8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d4:	609a      	str	r2, [r3, #8]
}
 80068d6:	e007      	b.n	80068e8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80068e6:	609a      	str	r2, [r3, #8]
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	40022000 	.word	0x40022000
 80068f4:	40022100 	.word	0x40022100
 80068f8:	40022300 	.word	0x40022300
 80068fc:	58026300 	.word	0x58026300
 8006900:	01312d00 	.word	0x01312d00
 8006904:	005f5e10 	.word	0x005f5e10
 8006908:	00bebc20 	.word	0x00bebc20
 800690c:	017d7840 	.word	0x017d7840

08006910 <LL_ADC_IsEnabled>:
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <LL_ADC_IsEnabled+0x18>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <LL_ADC_IsEnabled+0x1a>
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <LL_ADC_StartCalibration>:
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <LL_ADC_StartCalibration+0x38>)
 800694a:	4013      	ands	r3, r2
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006958:	430a      	orrs	r2, r1
 800695a:	4313      	orrs	r3, r2
 800695c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	609a      	str	r2, [r3, #8]
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	3ffeffc0 	.word	0x3ffeffc0

08006974 <LL_ADC_IsCalibrationOnGoing>:
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006988:	d101      	bne.n	800698e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <LL_ADC_REG_IsConversionOngoing>:
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d101      	bne.n	80069b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80069de:	2302      	movs	r3, #2
 80069e0:	e04c      	b.n	8006a7c <HAL_ADCEx_Calibration_Start+0xb8>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f7ff fe24 	bl	8006638 <ADC_Disable>
 80069f0:	4603      	mov	r3, r0
 80069f2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d135      	bne.n	8006a66 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069fe:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	f043 0202 	orr.w	r2, r3, #2
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff ff90 	bl	8006938 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006a18:	e014      	b.n	8006a44 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4a19      	ldr	r2, [pc, #100]	; (8006a88 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d30d      	bcc.n	8006a44 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	f023 0312 	bic.w	r3, r3, #18
 8006a30:	f043 0210 	orr.w	r2, r3, #16
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e01b      	b.n	8006a7c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff ff93 	bl	8006974 <LL_ADC_IsCalibrationOnGoing>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e2      	bne.n	8006a1a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a58:	f023 0303 	bic.w	r3, r3, #3
 8006a5c:	f043 0201 	orr.w	r2, r3, #1
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54
 8006a64:	e005      	b.n	8006a72 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	f043 0210 	orr.w	r2, r3, #16
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	ffffeefd 	.word	0xffffeefd
 8006a88:	25c3f800 	.word	0x25c3f800

08006a8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006a8c:	b590      	push	{r4, r7, lr}
 8006a8e:	b09f      	sub	sp, #124	; 0x7c
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0be      	b.n	8006c28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a5c      	ldr	r2, [pc, #368]	; (8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d102      	bne.n	8006aca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006ac4:	4b5b      	ldr	r3, [pc, #364]	; (8006c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	e001      	b.n	8006ace <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e09d      	b.n	8006c28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff ff54 	bl	800699c <LL_ADC_REG_IsConversionOngoing>
 8006af4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff ff4e 	bl	800699c <LL_ADC_REG_IsConversionOngoing>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d17f      	bne.n	8006c06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d17c      	bne.n	8006c06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a47      	ldr	r2, [pc, #284]	; (8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a46      	ldr	r2, [pc, #280]	; (8006c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d101      	bne.n	8006b24 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006b20:	4b45      	ldr	r3, [pc, #276]	; (8006c38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006b22:	e000      	b.n	8006b26 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006b24:	4b45      	ldr	r3, [pc, #276]	; (8006c3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006b26:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d039      	beq.n	8006ba4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b40:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a3a      	ldr	r2, [pc, #232]	; (8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a38      	ldr	r2, [pc, #224]	; (8006c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d10e      	bne.n	8006b74 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006b56:	4836      	ldr	r0, [pc, #216]	; (8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006b58:	f7ff feda 	bl	8006910 <LL_ADC_IsEnabled>
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	4835      	ldr	r0, [pc, #212]	; (8006c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006b60:	f7ff fed6 	bl	8006910 <LL_ADC_IsEnabled>
 8006b64:	4603      	mov	r3, r0
 8006b66:	4323      	orrs	r3, r4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bf0c      	ite	eq
 8006b6c:	2301      	moveq	r3, #1
 8006b6e:	2300      	movne	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	e008      	b.n	8006b86 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006b74:	4832      	ldr	r0, [pc, #200]	; (8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006b76:	f7ff fecb 	bl	8006910 <LL_ADC_IsEnabled>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bf0c      	ite	eq
 8006b80:	2301      	moveq	r3, #1
 8006b82:	2300      	movne	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d047      	beq.n	8006c1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	4b2d      	ldr	r3, [pc, #180]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	6811      	ldr	r1, [r2, #0]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	6892      	ldr	r2, [r2, #8]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ba2:	e03a      	b.n	8006c1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d10e      	bne.n	8006be2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006bc4:	481a      	ldr	r0, [pc, #104]	; (8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006bc6:	f7ff fea3 	bl	8006910 <LL_ADC_IsEnabled>
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4819      	ldr	r0, [pc, #100]	; (8006c34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006bce:	f7ff fe9f 	bl	8006910 <LL_ADC_IsEnabled>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4323      	orrs	r3, r4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bf0c      	ite	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	2300      	movne	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	e008      	b.n	8006bf4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006be2:	4817      	ldr	r0, [pc, #92]	; (8006c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006be4:	f7ff fe94 	bl	8006910 <LL_ADC_IsEnabled>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bf0c      	ite	eq
 8006bee:	2301      	moveq	r3, #1
 8006bf0:	2300      	movne	r3, #0
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d010      	beq.n	8006c1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c02:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c04:	e009      	b.n	8006c1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0a:	f043 0220 	orr.w	r2, r3, #32
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006c18:	e000      	b.n	8006c1c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c1a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006c24:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	377c      	adds	r7, #124	; 0x7c
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd90      	pop	{r4, r7, pc}
 8006c30:	40022000 	.word	0x40022000
 8006c34:	40022100 	.word	0x40022100
 8006c38:	40022300 	.word	0x40022300
 8006c3c:	58026300 	.word	0x58026300
 8006c40:	58026000 	.word	0x58026000
 8006c44:	fffff0e0 	.word	0xfffff0e0

08006c48 <__NVIC_SetPriorityGrouping>:
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c58:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <__NVIC_SetPriorityGrouping+0x40>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c64:	4013      	ands	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <__NVIC_SetPriorityGrouping+0x44>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c76:	4a04      	ldr	r2, [pc, #16]	; (8006c88 <__NVIC_SetPriorityGrouping+0x40>)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	60d3      	str	r3, [r2, #12]
}
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	e000ed00 	.word	0xe000ed00
 8006c8c:	05fa0000 	.word	0x05fa0000

08006c90 <__NVIC_GetPriorityGrouping>:
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c94:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	0a1b      	lsrs	r3, r3, #8
 8006c9a:	f003 0307 	and.w	r3, r3, #7
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	e000ed00 	.word	0xe000ed00

08006cac <__NVIC_EnableIRQ>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	db0b      	blt.n	8006cd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	f003 021f 	and.w	r2, r3, #31
 8006cc4:	4907      	ldr	r1, [pc, #28]	; (8006ce4 <__NVIC_EnableIRQ+0x38>)
 8006cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	2001      	movs	r0, #1
 8006cce:	fa00 f202 	lsl.w	r2, r0, r2
 8006cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	e000e100 	.word	0xe000e100

08006ce8 <__NVIC_SetPriority>:
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	6039      	str	r1, [r7, #0]
 8006cf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	db0a      	blt.n	8006d12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	490c      	ldr	r1, [pc, #48]	; (8006d34 <__NVIC_SetPriority+0x4c>)
 8006d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d06:	0112      	lsls	r2, r2, #4
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d10:	e00a      	b.n	8006d28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	4908      	ldr	r1, [pc, #32]	; (8006d38 <__NVIC_SetPriority+0x50>)
 8006d18:	88fb      	ldrh	r3, [r7, #6]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	3b04      	subs	r3, #4
 8006d20:	0112      	lsls	r2, r2, #4
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	440b      	add	r3, r1
 8006d26:	761a      	strb	r2, [r3, #24]
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	e000e100 	.word	0xe000e100
 8006d38:	e000ed00 	.word	0xe000ed00

08006d3c <NVIC_EncodePriority>:
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b089      	sub	sp, #36	; 0x24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f1c3 0307 	rsb	r3, r3, #7
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	bf28      	it	cs
 8006d5a:	2304      	movcs	r3, #4
 8006d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	3304      	adds	r3, #4
 8006d62:	2b06      	cmp	r3, #6
 8006d64:	d902      	bls.n	8006d6c <NVIC_EncodePriority+0x30>
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	3b03      	subs	r3, #3
 8006d6a:	e000      	b.n	8006d6e <NVIC_EncodePriority+0x32>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d70:	f04f 32ff 	mov.w	r2, #4294967295
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	43da      	mvns	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	401a      	ands	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d84:	f04f 31ff 	mov.w	r1, #4294967295
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	43d9      	mvns	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d94:	4313      	orrs	r3, r2
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3724      	adds	r7, #36	; 0x24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006db4:	d301      	bcc.n	8006dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006db6:	2301      	movs	r3, #1
 8006db8:	e00f      	b.n	8006dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dba:	4a0a      	ldr	r2, [pc, #40]	; (8006de4 <SysTick_Config+0x40>)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dc2:	210f      	movs	r1, #15
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	f7ff ff8e 	bl	8006ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <SysTick_Config+0x40>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dd2:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <SysTick_Config+0x40>)
 8006dd4:	2207      	movs	r2, #7
 8006dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	e000e010 	.word	0xe000e010

08006de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff ff29 	bl	8006c48 <__NVIC_SetPriorityGrouping>
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b086      	sub	sp, #24
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	4603      	mov	r3, r0
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e0c:	f7ff ff40 	bl	8006c90 <__NVIC_GetPriorityGrouping>
 8006e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	6978      	ldr	r0, [r7, #20]
 8006e18:	f7ff ff90 	bl	8006d3c <NVIC_EncodePriority>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e22:	4611      	mov	r1, r2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff ff5f 	bl	8006ce8 <__NVIC_SetPriority>
}
 8006e2a:	bf00      	nop
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	4603      	mov	r3, r0
 8006e3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff33 	bl	8006cac <__NVIC_EnableIRQ>
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff ffa4 	bl	8006da4 <SysTick_Config>
 8006e5c:	4603      	mov	r3, r0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006e6c:	f3bf 8f5f 	dmb	sy
}
 8006e70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006e72:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <HAL_MPU_Disable+0x28>)
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	4a06      	ldr	r2, [pc, #24]	; (8006e90 <HAL_MPU_Disable+0x28>)
 8006e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_MPU_Disable+0x2c>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	605a      	str	r2, [r3, #4]
}
 8006e84:	bf00      	nop
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	e000ed00 	.word	0xe000ed00
 8006e94:	e000ed90 	.word	0xe000ed90

08006e98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006ea0:	4a0b      	ldr	r2, [pc, #44]	; (8006ed0 <HAL_MPU_Enable+0x38>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <HAL_MPU_Enable+0x3c>)
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	4a09      	ldr	r2, [pc, #36]	; (8006ed4 <HAL_MPU_Enable+0x3c>)
 8006eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006eb6:	f3bf 8f4f 	dsb	sy
}
 8006eba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006ebc:	f3bf 8f6f 	isb	sy
}
 8006ec0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	e000ed90 	.word	0xe000ed90
 8006ed4:	e000ed00 	.word	0xe000ed00

08006ed8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	785a      	ldrb	r2, [r3, #1]
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <HAL_MPU_ConfigRegion+0x84>)
 8006ee6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d029      	beq.n	8006f44 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	; (8006f5c <HAL_MPU_ConfigRegion+0x84>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7b1b      	ldrb	r3, [r3, #12]
 8006efc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7adb      	ldrb	r3, [r3, #11]
 8006f02:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7a9b      	ldrb	r3, [r3, #10]
 8006f0a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006f0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	7b5b      	ldrb	r3, [r3, #13]
 8006f12:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006f14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7b9b      	ldrb	r3, [r3, #14]
 8006f1a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006f1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7bdb      	ldrb	r3, [r3, #15]
 8006f22:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006f24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	7a5b      	ldrb	r3, [r3, #9]
 8006f2a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006f2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7a1b      	ldrb	r3, [r3, #8]
 8006f32:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006f34:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	7812      	ldrb	r2, [r2, #0]
 8006f3a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f3c:	4a07      	ldr	r2, [pc, #28]	; (8006f5c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f3e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f40:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006f42:	e005      	b.n	8006f50 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8006f44:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_MPU_ConfigRegion+0x84>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006f4a:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <HAL_MPU_ConfigRegion+0x84>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	611a      	str	r2, [r3, #16]
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	e000ed90 	.word	0xe000ed90

08006f60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006f68:	f7fe f8aa 	bl	80050c0 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e2dc      	b.n	8007532 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d008      	beq.n	8006f96 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2280      	movs	r2, #128	; 0x80
 8006f88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e2cd      	b.n	8007532 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a76      	ldr	r2, [pc, #472]	; (8007174 <HAL_DMA_Abort+0x214>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d04a      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a74      	ldr	r2, [pc, #464]	; (8007178 <HAL_DMA_Abort+0x218>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d045      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a73      	ldr	r2, [pc, #460]	; (800717c <HAL_DMA_Abort+0x21c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d040      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a71      	ldr	r2, [pc, #452]	; (8007180 <HAL_DMA_Abort+0x220>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d03b      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a70      	ldr	r2, [pc, #448]	; (8007184 <HAL_DMA_Abort+0x224>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d036      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a6e      	ldr	r2, [pc, #440]	; (8007188 <HAL_DMA_Abort+0x228>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d031      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a6d      	ldr	r2, [pc, #436]	; (800718c <HAL_DMA_Abort+0x22c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d02c      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a6b      	ldr	r2, [pc, #428]	; (8007190 <HAL_DMA_Abort+0x230>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d027      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a6a      	ldr	r2, [pc, #424]	; (8007194 <HAL_DMA_Abort+0x234>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d022      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a68      	ldr	r2, [pc, #416]	; (8007198 <HAL_DMA_Abort+0x238>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d01d      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a67      	ldr	r2, [pc, #412]	; (800719c <HAL_DMA_Abort+0x23c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d018      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a65      	ldr	r2, [pc, #404]	; (80071a0 <HAL_DMA_Abort+0x240>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d013      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a64      	ldr	r2, [pc, #400]	; (80071a4 <HAL_DMA_Abort+0x244>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00e      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a62      	ldr	r2, [pc, #392]	; (80071a8 <HAL_DMA_Abort+0x248>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d009      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a61      	ldr	r2, [pc, #388]	; (80071ac <HAL_DMA_Abort+0x24c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d004      	beq.n	8007036 <HAL_DMA_Abort+0xd6>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a5f      	ldr	r2, [pc, #380]	; (80071b0 <HAL_DMA_Abort+0x250>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d101      	bne.n	800703a <HAL_DMA_Abort+0xda>
 8007036:	2301      	movs	r3, #1
 8007038:	e000      	b.n	800703c <HAL_DMA_Abort+0xdc>
 800703a:	2300      	movs	r3, #0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d013      	beq.n	8007068 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 021e 	bic.w	r2, r2, #30
 800704e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695a      	ldr	r2, [r3, #20]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800705e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	e00a      	b.n	800707e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 020e 	bic.w	r2, r2, #14
 8007076:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a3c      	ldr	r2, [pc, #240]	; (8007174 <HAL_DMA_Abort+0x214>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d072      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a3a      	ldr	r2, [pc, #232]	; (8007178 <HAL_DMA_Abort+0x218>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d06d      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a39      	ldr	r2, [pc, #228]	; (800717c <HAL_DMA_Abort+0x21c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d068      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a37      	ldr	r2, [pc, #220]	; (8007180 <HAL_DMA_Abort+0x220>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d063      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a36      	ldr	r2, [pc, #216]	; (8007184 <HAL_DMA_Abort+0x224>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d05e      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a34      	ldr	r2, [pc, #208]	; (8007188 <HAL_DMA_Abort+0x228>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d059      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a33      	ldr	r2, [pc, #204]	; (800718c <HAL_DMA_Abort+0x22c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d054      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a31      	ldr	r2, [pc, #196]	; (8007190 <HAL_DMA_Abort+0x230>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d04f      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a30      	ldr	r2, [pc, #192]	; (8007194 <HAL_DMA_Abort+0x234>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d04a      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a2e      	ldr	r2, [pc, #184]	; (8007198 <HAL_DMA_Abort+0x238>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d045      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a2d      	ldr	r2, [pc, #180]	; (800719c <HAL_DMA_Abort+0x23c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d040      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a2b      	ldr	r2, [pc, #172]	; (80071a0 <HAL_DMA_Abort+0x240>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d03b      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2a      	ldr	r2, [pc, #168]	; (80071a4 <HAL_DMA_Abort+0x244>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d036      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a28      	ldr	r2, [pc, #160]	; (80071a8 <HAL_DMA_Abort+0x248>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d031      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a27      	ldr	r2, [pc, #156]	; (80071ac <HAL_DMA_Abort+0x24c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d02c      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <HAL_DMA_Abort+0x250>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d027      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a24      	ldr	r2, [pc, #144]	; (80071b4 <HAL_DMA_Abort+0x254>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d022      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a22      	ldr	r2, [pc, #136]	; (80071b8 <HAL_DMA_Abort+0x258>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01d      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a21      	ldr	r2, [pc, #132]	; (80071bc <HAL_DMA_Abort+0x25c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d018      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <HAL_DMA_Abort+0x260>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1e      	ldr	r2, [pc, #120]	; (80071c4 <HAL_DMA_Abort+0x264>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1c      	ldr	r2, [pc, #112]	; (80071c8 <HAL_DMA_Abort+0x268>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1b      	ldr	r2, [pc, #108]	; (80071cc <HAL_DMA_Abort+0x26c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_DMA_Abort+0x20e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a19      	ldr	r2, [pc, #100]	; (80071d0 <HAL_DMA_Abort+0x270>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d132      	bne.n	80071d4 <HAL_DMA_Abort+0x274>
 800716e:	2301      	movs	r3, #1
 8007170:	e031      	b.n	80071d6 <HAL_DMA_Abort+0x276>
 8007172:	bf00      	nop
 8007174:	40020010 	.word	0x40020010
 8007178:	40020028 	.word	0x40020028
 800717c:	40020040 	.word	0x40020040
 8007180:	40020058 	.word	0x40020058
 8007184:	40020070 	.word	0x40020070
 8007188:	40020088 	.word	0x40020088
 800718c:	400200a0 	.word	0x400200a0
 8007190:	400200b8 	.word	0x400200b8
 8007194:	40020410 	.word	0x40020410
 8007198:	40020428 	.word	0x40020428
 800719c:	40020440 	.word	0x40020440
 80071a0:	40020458 	.word	0x40020458
 80071a4:	40020470 	.word	0x40020470
 80071a8:	40020488 	.word	0x40020488
 80071ac:	400204a0 	.word	0x400204a0
 80071b0:	400204b8 	.word	0x400204b8
 80071b4:	58025408 	.word	0x58025408
 80071b8:	5802541c 	.word	0x5802541c
 80071bc:	58025430 	.word	0x58025430
 80071c0:	58025444 	.word	0x58025444
 80071c4:	58025458 	.word	0x58025458
 80071c8:	5802546c 	.word	0x5802546c
 80071cc:	58025480 	.word	0x58025480
 80071d0:	58025494 	.word	0x58025494
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a6d      	ldr	r2, [pc, #436]	; (80073a4 <HAL_DMA_Abort+0x444>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d04a      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a6b      	ldr	r2, [pc, #428]	; (80073a8 <HAL_DMA_Abort+0x448>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d045      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a6a      	ldr	r2, [pc, #424]	; (80073ac <HAL_DMA_Abort+0x44c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d040      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a68      	ldr	r2, [pc, #416]	; (80073b0 <HAL_DMA_Abort+0x450>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d03b      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a67      	ldr	r2, [pc, #412]	; (80073b4 <HAL_DMA_Abort+0x454>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d036      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a65      	ldr	r2, [pc, #404]	; (80073b8 <HAL_DMA_Abort+0x458>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d031      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a64      	ldr	r2, [pc, #400]	; (80073bc <HAL_DMA_Abort+0x45c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d02c      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a62      	ldr	r2, [pc, #392]	; (80073c0 <HAL_DMA_Abort+0x460>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d027      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a61      	ldr	r2, [pc, #388]	; (80073c4 <HAL_DMA_Abort+0x464>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d022      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a5f      	ldr	r2, [pc, #380]	; (80073c8 <HAL_DMA_Abort+0x468>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d01d      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a5e      	ldr	r2, [pc, #376]	; (80073cc <HAL_DMA_Abort+0x46c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d018      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a5c      	ldr	r2, [pc, #368]	; (80073d0 <HAL_DMA_Abort+0x470>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d013      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a5b      	ldr	r2, [pc, #364]	; (80073d4 <HAL_DMA_Abort+0x474>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00e      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a59      	ldr	r2, [pc, #356]	; (80073d8 <HAL_DMA_Abort+0x478>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d009      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a58      	ldr	r2, [pc, #352]	; (80073dc <HAL_DMA_Abort+0x47c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d004      	beq.n	800728a <HAL_DMA_Abort+0x32a>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a56      	ldr	r2, [pc, #344]	; (80073e0 <HAL_DMA_Abort+0x480>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d108      	bne.n	800729c <HAL_DMA_Abort+0x33c>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	e007      	b.n	80072ac <HAL_DMA_Abort+0x34c>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80072ac:	e013      	b.n	80072d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072ae:	f7fd ff07 	bl	80050c0 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b05      	cmp	r3, #5
 80072ba:	d90c      	bls.n	80072d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2203      	movs	r2, #3
 80072c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e12d      	b.n	8007532 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e5      	bne.n	80072ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2f      	ldr	r2, [pc, #188]	; (80073a4 <HAL_DMA_Abort+0x444>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d04a      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2d      	ldr	r2, [pc, #180]	; (80073a8 <HAL_DMA_Abort+0x448>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d045      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2c      	ldr	r2, [pc, #176]	; (80073ac <HAL_DMA_Abort+0x44c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d040      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a2a      	ldr	r2, [pc, #168]	; (80073b0 <HAL_DMA_Abort+0x450>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d03b      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a29      	ldr	r2, [pc, #164]	; (80073b4 <HAL_DMA_Abort+0x454>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d036      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a27      	ldr	r2, [pc, #156]	; (80073b8 <HAL_DMA_Abort+0x458>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d031      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a26      	ldr	r2, [pc, #152]	; (80073bc <HAL_DMA_Abort+0x45c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d02c      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a24      	ldr	r2, [pc, #144]	; (80073c0 <HAL_DMA_Abort+0x460>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d027      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a23      	ldr	r2, [pc, #140]	; (80073c4 <HAL_DMA_Abort+0x464>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d022      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a21      	ldr	r2, [pc, #132]	; (80073c8 <HAL_DMA_Abort+0x468>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d01d      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a20      	ldr	r2, [pc, #128]	; (80073cc <HAL_DMA_Abort+0x46c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d018      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a1e      	ldr	r2, [pc, #120]	; (80073d0 <HAL_DMA_Abort+0x470>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <HAL_DMA_Abort+0x474>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00e      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1b      	ldr	r2, [pc, #108]	; (80073d8 <HAL_DMA_Abort+0x478>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d009      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1a      	ldr	r2, [pc, #104]	; (80073dc <HAL_DMA_Abort+0x47c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d004      	beq.n	8007382 <HAL_DMA_Abort+0x422>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a18      	ldr	r2, [pc, #96]	; (80073e0 <HAL_DMA_Abort+0x480>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d101      	bne.n	8007386 <HAL_DMA_Abort+0x426>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <HAL_DMA_Abort+0x428>
 8007386:	2300      	movs	r3, #0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d02b      	beq.n	80073e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007390:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	223f      	movs	r2, #63	; 0x3f
 800739c:	409a      	lsls	r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	609a      	str	r2, [r3, #8]
 80073a2:	e02a      	b.n	80073fa <HAL_DMA_Abort+0x49a>
 80073a4:	40020010 	.word	0x40020010
 80073a8:	40020028 	.word	0x40020028
 80073ac:	40020040 	.word	0x40020040
 80073b0:	40020058 	.word	0x40020058
 80073b4:	40020070 	.word	0x40020070
 80073b8:	40020088 	.word	0x40020088
 80073bc:	400200a0 	.word	0x400200a0
 80073c0:	400200b8 	.word	0x400200b8
 80073c4:	40020410 	.word	0x40020410
 80073c8:	40020428 	.word	0x40020428
 80073cc:	40020440 	.word	0x40020440
 80073d0:	40020458 	.word	0x40020458
 80073d4:	40020470 	.word	0x40020470
 80073d8:	40020488 	.word	0x40020488
 80073dc:	400204a0 	.word	0x400204a0
 80073e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2201      	movs	r2, #1
 80073f4:	409a      	lsls	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a4f      	ldr	r2, [pc, #316]	; (800753c <HAL_DMA_Abort+0x5dc>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d072      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a4d      	ldr	r2, [pc, #308]	; (8007540 <HAL_DMA_Abort+0x5e0>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d06d      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a4c      	ldr	r2, [pc, #304]	; (8007544 <HAL_DMA_Abort+0x5e4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d068      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a4a      	ldr	r2, [pc, #296]	; (8007548 <HAL_DMA_Abort+0x5e8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d063      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a49      	ldr	r2, [pc, #292]	; (800754c <HAL_DMA_Abort+0x5ec>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d05e      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a47      	ldr	r2, [pc, #284]	; (8007550 <HAL_DMA_Abort+0x5f0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d059      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a46      	ldr	r2, [pc, #280]	; (8007554 <HAL_DMA_Abort+0x5f4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d054      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a44      	ldr	r2, [pc, #272]	; (8007558 <HAL_DMA_Abort+0x5f8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d04f      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a43      	ldr	r2, [pc, #268]	; (800755c <HAL_DMA_Abort+0x5fc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d04a      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a41      	ldr	r2, [pc, #260]	; (8007560 <HAL_DMA_Abort+0x600>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d045      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a40      	ldr	r2, [pc, #256]	; (8007564 <HAL_DMA_Abort+0x604>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d040      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a3e      	ldr	r2, [pc, #248]	; (8007568 <HAL_DMA_Abort+0x608>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d03b      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a3d      	ldr	r2, [pc, #244]	; (800756c <HAL_DMA_Abort+0x60c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d036      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a3b      	ldr	r2, [pc, #236]	; (8007570 <HAL_DMA_Abort+0x610>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d031      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a3a      	ldr	r2, [pc, #232]	; (8007574 <HAL_DMA_Abort+0x614>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d02c      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a38      	ldr	r2, [pc, #224]	; (8007578 <HAL_DMA_Abort+0x618>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d027      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a37      	ldr	r2, [pc, #220]	; (800757c <HAL_DMA_Abort+0x61c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d022      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a35      	ldr	r2, [pc, #212]	; (8007580 <HAL_DMA_Abort+0x620>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01d      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a34      	ldr	r2, [pc, #208]	; (8007584 <HAL_DMA_Abort+0x624>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d018      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a32      	ldr	r2, [pc, #200]	; (8007588 <HAL_DMA_Abort+0x628>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d013      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a31      	ldr	r2, [pc, #196]	; (800758c <HAL_DMA_Abort+0x62c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00e      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a2f      	ldr	r2, [pc, #188]	; (8007590 <HAL_DMA_Abort+0x630>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d009      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a2e      	ldr	r2, [pc, #184]	; (8007594 <HAL_DMA_Abort+0x634>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d004      	beq.n	80074ea <HAL_DMA_Abort+0x58a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a2c      	ldr	r2, [pc, #176]	; (8007598 <HAL_DMA_Abort+0x638>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d101      	bne.n	80074ee <HAL_DMA_Abort+0x58e>
 80074ea:	2301      	movs	r3, #1
 80074ec:	e000      	b.n	80074f0 <HAL_DMA_Abort+0x590>
 80074ee:	2300      	movs	r3, #0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d015      	beq.n	8007520 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80074fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00c      	beq.n	8007520 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007514:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800751e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	40020010 	.word	0x40020010
 8007540:	40020028 	.word	0x40020028
 8007544:	40020040 	.word	0x40020040
 8007548:	40020058 	.word	0x40020058
 800754c:	40020070 	.word	0x40020070
 8007550:	40020088 	.word	0x40020088
 8007554:	400200a0 	.word	0x400200a0
 8007558:	400200b8 	.word	0x400200b8
 800755c:	40020410 	.word	0x40020410
 8007560:	40020428 	.word	0x40020428
 8007564:	40020440 	.word	0x40020440
 8007568:	40020458 	.word	0x40020458
 800756c:	40020470 	.word	0x40020470
 8007570:	40020488 	.word	0x40020488
 8007574:	400204a0 	.word	0x400204a0
 8007578:	400204b8 	.word	0x400204b8
 800757c:	58025408 	.word	0x58025408
 8007580:	5802541c 	.word	0x5802541c
 8007584:	58025430 	.word	0x58025430
 8007588:	58025444 	.word	0x58025444
 800758c:	58025458 	.word	0x58025458
 8007590:	5802546c 	.word	0x5802546c
 8007594:	58025480 	.word	0x58025480
 8007598:	58025494 	.word	0x58025494

0800759c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e237      	b.n	8007a1e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d004      	beq.n	80075c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2280      	movs	r2, #128	; 0x80
 80075be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e22c      	b.n	8007a1e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a5c      	ldr	r2, [pc, #368]	; (800773c <HAL_DMA_Abort_IT+0x1a0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d04a      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a5b      	ldr	r2, [pc, #364]	; (8007740 <HAL_DMA_Abort_IT+0x1a4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d045      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a59      	ldr	r2, [pc, #356]	; (8007744 <HAL_DMA_Abort_IT+0x1a8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d040      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a58      	ldr	r2, [pc, #352]	; (8007748 <HAL_DMA_Abort_IT+0x1ac>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d03b      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a56      	ldr	r2, [pc, #344]	; (800774c <HAL_DMA_Abort_IT+0x1b0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d036      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a55      	ldr	r2, [pc, #340]	; (8007750 <HAL_DMA_Abort_IT+0x1b4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d031      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a53      	ldr	r2, [pc, #332]	; (8007754 <HAL_DMA_Abort_IT+0x1b8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d02c      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a52      	ldr	r2, [pc, #328]	; (8007758 <HAL_DMA_Abort_IT+0x1bc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d027      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a50      	ldr	r2, [pc, #320]	; (800775c <HAL_DMA_Abort_IT+0x1c0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d022      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a4f      	ldr	r2, [pc, #316]	; (8007760 <HAL_DMA_Abort_IT+0x1c4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d01d      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a4d      	ldr	r2, [pc, #308]	; (8007764 <HAL_DMA_Abort_IT+0x1c8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d018      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a4c      	ldr	r2, [pc, #304]	; (8007768 <HAL_DMA_Abort_IT+0x1cc>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a4a      	ldr	r2, [pc, #296]	; (800776c <HAL_DMA_Abort_IT+0x1d0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00e      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a49      	ldr	r2, [pc, #292]	; (8007770 <HAL_DMA_Abort_IT+0x1d4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a47      	ldr	r2, [pc, #284]	; (8007774 <HAL_DMA_Abort_IT+0x1d8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_DMA_Abort_IT+0xc8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a46      	ldr	r2, [pc, #280]	; (8007778 <HAL_DMA_Abort_IT+0x1dc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d101      	bne.n	8007668 <HAL_DMA_Abort_IT+0xcc>
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <HAL_DMA_Abort_IT+0xce>
 8007668:	2300      	movs	r3, #0
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 8086 	beq.w	800777c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2204      	movs	r2, #4
 8007674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2f      	ldr	r2, [pc, #188]	; (800773c <HAL_DMA_Abort_IT+0x1a0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d04a      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a2e      	ldr	r2, [pc, #184]	; (8007740 <HAL_DMA_Abort_IT+0x1a4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d045      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a2c      	ldr	r2, [pc, #176]	; (8007744 <HAL_DMA_Abort_IT+0x1a8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d040      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a2b      	ldr	r2, [pc, #172]	; (8007748 <HAL_DMA_Abort_IT+0x1ac>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d03b      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a29      	ldr	r2, [pc, #164]	; (800774c <HAL_DMA_Abort_IT+0x1b0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d036      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a28      	ldr	r2, [pc, #160]	; (8007750 <HAL_DMA_Abort_IT+0x1b4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d031      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a26      	ldr	r2, [pc, #152]	; (8007754 <HAL_DMA_Abort_IT+0x1b8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d02c      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a25      	ldr	r2, [pc, #148]	; (8007758 <HAL_DMA_Abort_IT+0x1bc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d027      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a23      	ldr	r2, [pc, #140]	; (800775c <HAL_DMA_Abort_IT+0x1c0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d022      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a22      	ldr	r2, [pc, #136]	; (8007760 <HAL_DMA_Abort_IT+0x1c4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d01d      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a20      	ldr	r2, [pc, #128]	; (8007764 <HAL_DMA_Abort_IT+0x1c8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d018      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1f      	ldr	r2, [pc, #124]	; (8007768 <HAL_DMA_Abort_IT+0x1cc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d013      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1d      	ldr	r2, [pc, #116]	; (800776c <HAL_DMA_Abort_IT+0x1d0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00e      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1c      	ldr	r2, [pc, #112]	; (8007770 <HAL_DMA_Abort_IT+0x1d4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d009      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1a      	ldr	r2, [pc, #104]	; (8007774 <HAL_DMA_Abort_IT+0x1d8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d004      	beq.n	8007718 <HAL_DMA_Abort_IT+0x17c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a19      	ldr	r2, [pc, #100]	; (8007778 <HAL_DMA_Abort_IT+0x1dc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d108      	bne.n	800772a <HAL_DMA_Abort_IT+0x18e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0201 	bic.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e178      	b.n	8007a1c <HAL_DMA_Abort_IT+0x480>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0201 	bic.w	r2, r2, #1
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e16f      	b.n	8007a1c <HAL_DMA_Abort_IT+0x480>
 800773c:	40020010 	.word	0x40020010
 8007740:	40020028 	.word	0x40020028
 8007744:	40020040 	.word	0x40020040
 8007748:	40020058 	.word	0x40020058
 800774c:	40020070 	.word	0x40020070
 8007750:	40020088 	.word	0x40020088
 8007754:	400200a0 	.word	0x400200a0
 8007758:	400200b8 	.word	0x400200b8
 800775c:	40020410 	.word	0x40020410
 8007760:	40020428 	.word	0x40020428
 8007764:	40020440 	.word	0x40020440
 8007768:	40020458 	.word	0x40020458
 800776c:	40020470 	.word	0x40020470
 8007770:	40020488 	.word	0x40020488
 8007774:	400204a0 	.word	0x400204a0
 8007778:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 020e 	bic.w	r2, r2, #14
 800778a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a6c      	ldr	r2, [pc, #432]	; (8007944 <HAL_DMA_Abort_IT+0x3a8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d04a      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a6b      	ldr	r2, [pc, #428]	; (8007948 <HAL_DMA_Abort_IT+0x3ac>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d045      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a69      	ldr	r2, [pc, #420]	; (800794c <HAL_DMA_Abort_IT+0x3b0>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d040      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a68      	ldr	r2, [pc, #416]	; (8007950 <HAL_DMA_Abort_IT+0x3b4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d03b      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a66      	ldr	r2, [pc, #408]	; (8007954 <HAL_DMA_Abort_IT+0x3b8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d036      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a65      	ldr	r2, [pc, #404]	; (8007958 <HAL_DMA_Abort_IT+0x3bc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d031      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a63      	ldr	r2, [pc, #396]	; (800795c <HAL_DMA_Abort_IT+0x3c0>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d02c      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a62      	ldr	r2, [pc, #392]	; (8007960 <HAL_DMA_Abort_IT+0x3c4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d027      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a60      	ldr	r2, [pc, #384]	; (8007964 <HAL_DMA_Abort_IT+0x3c8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d022      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a5f      	ldr	r2, [pc, #380]	; (8007968 <HAL_DMA_Abort_IT+0x3cc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01d      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a5d      	ldr	r2, [pc, #372]	; (800796c <HAL_DMA_Abort_IT+0x3d0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d018      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a5c      	ldr	r2, [pc, #368]	; (8007970 <HAL_DMA_Abort_IT+0x3d4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d013      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a5a      	ldr	r2, [pc, #360]	; (8007974 <HAL_DMA_Abort_IT+0x3d8>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d00e      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a59      	ldr	r2, [pc, #356]	; (8007978 <HAL_DMA_Abort_IT+0x3dc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d009      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a57      	ldr	r2, [pc, #348]	; (800797c <HAL_DMA_Abort_IT+0x3e0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d004      	beq.n	800782c <HAL_DMA_Abort_IT+0x290>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a56      	ldr	r2, [pc, #344]	; (8007980 <HAL_DMA_Abort_IT+0x3e4>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d108      	bne.n	800783e <HAL_DMA_Abort_IT+0x2a2>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0201 	bic.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	e007      	b.n	800784e <HAL_DMA_Abort_IT+0x2b2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a3c      	ldr	r2, [pc, #240]	; (8007944 <HAL_DMA_Abort_IT+0x3a8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d072      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a3a      	ldr	r2, [pc, #232]	; (8007948 <HAL_DMA_Abort_IT+0x3ac>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d06d      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a39      	ldr	r2, [pc, #228]	; (800794c <HAL_DMA_Abort_IT+0x3b0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d068      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a37      	ldr	r2, [pc, #220]	; (8007950 <HAL_DMA_Abort_IT+0x3b4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d063      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a36      	ldr	r2, [pc, #216]	; (8007954 <HAL_DMA_Abort_IT+0x3b8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d05e      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a34      	ldr	r2, [pc, #208]	; (8007958 <HAL_DMA_Abort_IT+0x3bc>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d059      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a33      	ldr	r2, [pc, #204]	; (800795c <HAL_DMA_Abort_IT+0x3c0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d054      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a31      	ldr	r2, [pc, #196]	; (8007960 <HAL_DMA_Abort_IT+0x3c4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d04f      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a30      	ldr	r2, [pc, #192]	; (8007964 <HAL_DMA_Abort_IT+0x3c8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d04a      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a2e      	ldr	r2, [pc, #184]	; (8007968 <HAL_DMA_Abort_IT+0x3cc>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d045      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a2d      	ldr	r2, [pc, #180]	; (800796c <HAL_DMA_Abort_IT+0x3d0>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d040      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a2b      	ldr	r2, [pc, #172]	; (8007970 <HAL_DMA_Abort_IT+0x3d4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d03b      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a2a      	ldr	r2, [pc, #168]	; (8007974 <HAL_DMA_Abort_IT+0x3d8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d036      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a28      	ldr	r2, [pc, #160]	; (8007978 <HAL_DMA_Abort_IT+0x3dc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d031      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a27      	ldr	r2, [pc, #156]	; (800797c <HAL_DMA_Abort_IT+0x3e0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d02c      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a25      	ldr	r2, [pc, #148]	; (8007980 <HAL_DMA_Abort_IT+0x3e4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d027      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a24      	ldr	r2, [pc, #144]	; (8007984 <HAL_DMA_Abort_IT+0x3e8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d022      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a22      	ldr	r2, [pc, #136]	; (8007988 <HAL_DMA_Abort_IT+0x3ec>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d01d      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a21      	ldr	r2, [pc, #132]	; (800798c <HAL_DMA_Abort_IT+0x3f0>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d018      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1f      	ldr	r2, [pc, #124]	; (8007990 <HAL_DMA_Abort_IT+0x3f4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d013      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <HAL_DMA_Abort_IT+0x3f8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d00e      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1c      	ldr	r2, [pc, #112]	; (8007998 <HAL_DMA_Abort_IT+0x3fc>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d009      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a1b      	ldr	r2, [pc, #108]	; (800799c <HAL_DMA_Abort_IT+0x400>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d004      	beq.n	800793e <HAL_DMA_Abort_IT+0x3a2>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a19      	ldr	r2, [pc, #100]	; (80079a0 <HAL_DMA_Abort_IT+0x404>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d132      	bne.n	80079a4 <HAL_DMA_Abort_IT+0x408>
 800793e:	2301      	movs	r3, #1
 8007940:	e031      	b.n	80079a6 <HAL_DMA_Abort_IT+0x40a>
 8007942:	bf00      	nop
 8007944:	40020010 	.word	0x40020010
 8007948:	40020028 	.word	0x40020028
 800794c:	40020040 	.word	0x40020040
 8007950:	40020058 	.word	0x40020058
 8007954:	40020070 	.word	0x40020070
 8007958:	40020088 	.word	0x40020088
 800795c:	400200a0 	.word	0x400200a0
 8007960:	400200b8 	.word	0x400200b8
 8007964:	40020410 	.word	0x40020410
 8007968:	40020428 	.word	0x40020428
 800796c:	40020440 	.word	0x40020440
 8007970:	40020458 	.word	0x40020458
 8007974:	40020470 	.word	0x40020470
 8007978:	40020488 	.word	0x40020488
 800797c:	400204a0 	.word	0x400204a0
 8007980:	400204b8 	.word	0x400204b8
 8007984:	58025408 	.word	0x58025408
 8007988:	5802541c 	.word	0x5802541c
 800798c:	58025430 	.word	0x58025430
 8007990:	58025444 	.word	0x58025444
 8007994:	58025458 	.word	0x58025458
 8007998:	5802546c 	.word	0x5802546c
 800799c:	58025480 	.word	0x58025480
 80079a0:	58025494 	.word	0x58025494
 80079a4:	2300      	movs	r3, #0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d028      	beq.n	80079fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c4:	f003 031f 	and.w	r3, r3, #31
 80079c8:	2201      	movs	r2, #1
 80079ca:	409a      	lsls	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00c      	beq.n	80079fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop

08007a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b089      	sub	sp, #36	; 0x24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a36:	4b89      	ldr	r3, [pc, #548]	; (8007c5c <HAL_GPIO_Init+0x234>)
 8007a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a3a:	e194      	b.n	8007d66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	2101      	movs	r1, #1
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	fa01 f303 	lsl.w	r3, r1, r3
 8007a48:	4013      	ands	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8186 	beq.w	8007d60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d005      	beq.n	8007a6c <HAL_GPIO_Init+0x44>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f003 0303 	and.w	r3, r3, #3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d130      	bne.n	8007ace <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	2203      	movs	r2, #3
 8007a78:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	4013      	ands	r3, r2
 8007a82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	091b      	lsrs	r3, r3, #4
 8007ab8:	f003 0201 	and.w	r2, r3, #1
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d017      	beq.n	8007b0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	2203      	movs	r2, #3
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	43db      	mvns	r3, r3
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	4013      	ands	r3, r2
 8007af0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	fa02 f303 	lsl.w	r3, r2, r3
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d123      	bne.n	8007b5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	08da      	lsrs	r2, r3, #3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3208      	adds	r2, #8
 8007b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	220f      	movs	r2, #15
 8007b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b32:	43db      	mvns	r3, r3
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	4013      	ands	r3, r2
 8007b38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	691a      	ldr	r2, [r3, #16]
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	08da      	lsrs	r2, r3, #3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3208      	adds	r2, #8
 8007b58:	69b9      	ldr	r1, [r7, #24]
 8007b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	2203      	movs	r2, #3
 8007b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6e:	43db      	mvns	r3, r3
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	4013      	ands	r3, r2
 8007b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f003 0203 	and.w	r2, r3, #3
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	fa02 f303 	lsl.w	r3, r2, r3
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 80e0 	beq.w	8007d60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ba0:	4b2f      	ldr	r3, [pc, #188]	; (8007c60 <HAL_GPIO_Init+0x238>)
 8007ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ba6:	4a2e      	ldr	r2, [pc, #184]	; (8007c60 <HAL_GPIO_Init+0x238>)
 8007ba8:	f043 0302 	orr.w	r3, r3, #2
 8007bac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007bb0:	4b2b      	ldr	r3, [pc, #172]	; (8007c60 <HAL_GPIO_Init+0x238>)
 8007bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bbe:	4a29      	ldr	r2, [pc, #164]	; (8007c64 <HAL_GPIO_Init+0x23c>)
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	089b      	lsrs	r3, r3, #2
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	220f      	movs	r2, #15
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	43db      	mvns	r3, r3
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	4013      	ands	r3, r2
 8007be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a20      	ldr	r2, [pc, #128]	; (8007c68 <HAL_GPIO_Init+0x240>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d052      	beq.n	8007c90 <HAL_GPIO_Init+0x268>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a1f      	ldr	r2, [pc, #124]	; (8007c6c <HAL_GPIO_Init+0x244>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d031      	beq.n	8007c56 <HAL_GPIO_Init+0x22e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1e      	ldr	r2, [pc, #120]	; (8007c70 <HAL_GPIO_Init+0x248>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02b      	beq.n	8007c52 <HAL_GPIO_Init+0x22a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1d      	ldr	r2, [pc, #116]	; (8007c74 <HAL_GPIO_Init+0x24c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d025      	beq.n	8007c4e <HAL_GPIO_Init+0x226>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a1c      	ldr	r2, [pc, #112]	; (8007c78 <HAL_GPIO_Init+0x250>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d01f      	beq.n	8007c4a <HAL_GPIO_Init+0x222>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a1b      	ldr	r2, [pc, #108]	; (8007c7c <HAL_GPIO_Init+0x254>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d019      	beq.n	8007c46 <HAL_GPIO_Init+0x21e>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1a      	ldr	r2, [pc, #104]	; (8007c80 <HAL_GPIO_Init+0x258>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d013      	beq.n	8007c42 <HAL_GPIO_Init+0x21a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a19      	ldr	r2, [pc, #100]	; (8007c84 <HAL_GPIO_Init+0x25c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00d      	beq.n	8007c3e <HAL_GPIO_Init+0x216>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <HAL_GPIO_Init+0x260>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d007      	beq.n	8007c3a <HAL_GPIO_Init+0x212>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <HAL_GPIO_Init+0x264>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d101      	bne.n	8007c36 <HAL_GPIO_Init+0x20e>
 8007c32:	2309      	movs	r3, #9
 8007c34:	e02d      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c36:	230a      	movs	r3, #10
 8007c38:	e02b      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	e029      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c3e:	2307      	movs	r3, #7
 8007c40:	e027      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c42:	2306      	movs	r3, #6
 8007c44:	e025      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c46:	2305      	movs	r3, #5
 8007c48:	e023      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c4a:	2304      	movs	r3, #4
 8007c4c:	e021      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e01f      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c52:	2302      	movs	r3, #2
 8007c54:	e01d      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e01b      	b.n	8007c92 <HAL_GPIO_Init+0x26a>
 8007c5a:	bf00      	nop
 8007c5c:	58000080 	.word	0x58000080
 8007c60:	58024400 	.word	0x58024400
 8007c64:	58000400 	.word	0x58000400
 8007c68:	58020000 	.word	0x58020000
 8007c6c:	58020400 	.word	0x58020400
 8007c70:	58020800 	.word	0x58020800
 8007c74:	58020c00 	.word	0x58020c00
 8007c78:	58021000 	.word	0x58021000
 8007c7c:	58021400 	.word	0x58021400
 8007c80:	58021800 	.word	0x58021800
 8007c84:	58021c00 	.word	0x58021c00
 8007c88:	58022000 	.word	0x58022000
 8007c8c:	58022400 	.word	0x58022400
 8007c90:	2300      	movs	r3, #0
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	f002 0203 	and.w	r2, r2, #3
 8007c98:	0092      	lsls	r2, r2, #2
 8007c9a:	4093      	lsls	r3, r2
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ca2:	4938      	ldr	r1, [pc, #224]	; (8007d84 <HAL_GPIO_Init+0x35c>)
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	089b      	lsrs	r3, r3, #2
 8007ca8:	3302      	adds	r3, #2
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007cce:	69ba      	ldr	r2, [r7, #24]
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	43db      	mvns	r3, r3
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	4013      	ands	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	43db      	mvns	r3, r3
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	4013      	ands	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	3301      	adds	r3, #1
 8007d64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f47f ae63 	bne.w	8007a3c <HAL_GPIO_Init+0x14>
  }
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	3724      	adds	r7, #36	; 0x24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	58000400 	.word	0x58000400

08007d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	887b      	ldrh	r3, [r7, #2]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007da0:	2301      	movs	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
 8007da4:	e001      	b.n	8007daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	807b      	strh	r3, [r7, #2]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007dc8:	787b      	ldrb	r3, [r7, #1]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007dce:	887a      	ldrh	r2, [r7, #2]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007dd4:	e003      	b.n	8007dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007dd6:	887b      	ldrh	r3, [r7, #2]
 8007dd8:	041a      	lsls	r2, r3, #16
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	619a      	str	r2, [r3, #24]
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
	...

08007dec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007df4:	4b19      	ldr	r3, [pc, #100]	; (8007e5c <HAL_PWREx_ConfigSupply+0x70>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d00a      	beq.n	8007e16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e00:	4b16      	ldr	r3, [pc, #88]	; (8007e5c <HAL_PWREx_ConfigSupply+0x70>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d001      	beq.n	8007e12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e01f      	b.n	8007e52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e01d      	b.n	8007e52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e16:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <HAL_PWREx_ConfigSupply+0x70>)
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f023 0207 	bic.w	r2, r3, #7
 8007e1e:	490f      	ldr	r1, [pc, #60]	; (8007e5c <HAL_PWREx_ConfigSupply+0x70>)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e26:	f7fd f94b 	bl	80050c0 <HAL_GetTick>
 8007e2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e2c:	e009      	b.n	8007e42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e2e:	f7fd f947 	bl	80050c0 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e3c:	d901      	bls.n	8007e42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e007      	b.n	8007e52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e42:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <HAL_PWREx_ConfigSupply+0x70>)
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e4e:	d1ee      	bne.n	8007e2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	58024800 	.word	0x58024800

08007e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08c      	sub	sp, #48	; 0x30
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	f000 bc48 	b.w	8008704 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8088 	beq.w	8007f92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e82:	4b99      	ldr	r3, [pc, #612]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e8c:	4b96      	ldr	r3, [pc, #600]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d007      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x48>
 8007e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9a:	2b18      	cmp	r3, #24
 8007e9c:	d111      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x62>
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d10c      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ea8:	4b8f      	ldr	r3, [pc, #572]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d06d      	beq.n	8007f90 <HAL_RCC_OscConfig+0x130>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d169      	bne.n	8007f90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f000 bc21 	b.w	8008704 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eca:	d106      	bne.n	8007eda <HAL_RCC_OscConfig+0x7a>
 8007ecc:	4b86      	ldr	r3, [pc, #536]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a85      	ldr	r2, [pc, #532]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	e02e      	b.n	8007f38 <HAL_RCC_OscConfig+0xd8>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10c      	bne.n	8007efc <HAL_RCC_OscConfig+0x9c>
 8007ee2:	4b81      	ldr	r3, [pc, #516]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a80      	ldr	r2, [pc, #512]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	4b7e      	ldr	r3, [pc, #504]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a7d      	ldr	r2, [pc, #500]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	e01d      	b.n	8007f38 <HAL_RCC_OscConfig+0xd8>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f04:	d10c      	bne.n	8007f20 <HAL_RCC_OscConfig+0xc0>
 8007f06:	4b78      	ldr	r3, [pc, #480]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a77      	ldr	r2, [pc, #476]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	4b75      	ldr	r3, [pc, #468]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a74      	ldr	r2, [pc, #464]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	e00b      	b.n	8007f38 <HAL_RCC_OscConfig+0xd8>
 8007f20:	4b71      	ldr	r3, [pc, #452]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a70      	ldr	r2, [pc, #448]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	4b6e      	ldr	r3, [pc, #440]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a6d      	ldr	r2, [pc, #436]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d013      	beq.n	8007f68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f40:	f7fd f8be 	bl	80050c0 <HAL_GetTick>
 8007f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f46:	e008      	b.n	8007f5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f48:	f7fd f8ba 	bl	80050c0 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b64      	cmp	r3, #100	; 0x64
 8007f54:	d901      	bls.n	8007f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e3d4      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f5a:	4b63      	ldr	r3, [pc, #396]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0f0      	beq.n	8007f48 <HAL_RCC_OscConfig+0xe8>
 8007f66:	e014      	b.n	8007f92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f68:	f7fd f8aa 	bl	80050c0 <HAL_GetTick>
 8007f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f6e:	e008      	b.n	8007f82 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f70:	f7fd f8a6 	bl	80050c0 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b64      	cmp	r3, #100	; 0x64
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e3c0      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f82:	4b59      	ldr	r3, [pc, #356]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1f0      	bne.n	8007f70 <HAL_RCC_OscConfig+0x110>
 8007f8e:	e000      	b.n	8007f92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 80ca 	beq.w	8008134 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fa0:	4b51      	ldr	r3, [pc, #324]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fa8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007faa:	4b4f      	ldr	r3, [pc, #316]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x166>
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	2b18      	cmp	r3, #24
 8007fba:	d156      	bne.n	800806a <HAL_RCC_OscConfig+0x20a>
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f003 0303 	and.w	r3, r3, #3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d151      	bne.n	800806a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fc6:	4b48      	ldr	r3, [pc, #288]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d005      	beq.n	8007fde <HAL_RCC_OscConfig+0x17e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e392      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fde:	4b42      	ldr	r3, [pc, #264]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f023 0219 	bic.w	r2, r3, #25
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	493f      	ldr	r1, [pc, #252]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff0:	f7fd f866 	bl	80050c0 <HAL_GetTick>
 8007ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ff6:	e008      	b.n	800800a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ff8:	f7fd f862 	bl	80050c0 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b02      	cmp	r3, #2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e37c      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800800a:	4b37      	ldr	r3, [pc, #220]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0f0      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008016:	f7fd f883 	bl	8005120 <HAL_GetREVID>
 800801a:	4603      	mov	r3, r0
 800801c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008020:	4293      	cmp	r3, r2
 8008022:	d817      	bhi.n	8008054 <HAL_RCC_OscConfig+0x1f4>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	2b40      	cmp	r3, #64	; 0x40
 800802a:	d108      	bne.n	800803e <HAL_RCC_OscConfig+0x1de>
 800802c:	4b2e      	ldr	r3, [pc, #184]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008034:	4a2c      	ldr	r2, [pc, #176]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8008036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800803a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800803c:	e07a      	b.n	8008134 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800803e:	4b2a      	ldr	r3, [pc, #168]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	031b      	lsls	r3, r3, #12
 800804c:	4926      	ldr	r1, [pc, #152]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 800804e:	4313      	orrs	r3, r2
 8008050:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008052:	e06f      	b.n	8008134 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008054:	4b24      	ldr	r3, [pc, #144]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	061b      	lsls	r3, r3, #24
 8008062:	4921      	ldr	r1, [pc, #132]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8008064:	4313      	orrs	r3, r2
 8008066:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008068:	e064      	b.n	8008134 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d047      	beq.n	8008102 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008072:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f023 0219 	bic.w	r2, r3, #25
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	491a      	ldr	r1, [pc, #104]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 8008080:	4313      	orrs	r3, r2
 8008082:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008084:	f7fd f81c 	bl	80050c0 <HAL_GetTick>
 8008088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800808a:	e008      	b.n	800809e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800808c:	f7fd f818 	bl	80050c0 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d901      	bls.n	800809e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e332      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800809e:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0f0      	beq.n	800808c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080aa:	f7fd f839 	bl	8005120 <HAL_GetREVID>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d819      	bhi.n	80080ec <HAL_RCC_OscConfig+0x28c>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	2b40      	cmp	r3, #64	; 0x40
 80080be:	d108      	bne.n	80080d2 <HAL_RCC_OscConfig+0x272>
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80080c8:	4a07      	ldr	r2, [pc, #28]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 80080ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ce:	6053      	str	r3, [r2, #4]
 80080d0:	e030      	b.n	8008134 <HAL_RCC_OscConfig+0x2d4>
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	031b      	lsls	r3, r3, #12
 80080e0:	4901      	ldr	r1, [pc, #4]	; (80080e8 <HAL_RCC_OscConfig+0x288>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	604b      	str	r3, [r1, #4]
 80080e6:	e025      	b.n	8008134 <HAL_RCC_OscConfig+0x2d4>
 80080e8:	58024400 	.word	0x58024400
 80080ec:	4b9a      	ldr	r3, [pc, #616]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	061b      	lsls	r3, r3, #24
 80080fa:	4997      	ldr	r1, [pc, #604]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	604b      	str	r3, [r1, #4]
 8008100:	e018      	b.n	8008134 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008102:	4b95      	ldr	r3, [pc, #596]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a94      	ldr	r2, [pc, #592]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008108:	f023 0301 	bic.w	r3, r3, #1
 800810c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810e:	f7fc ffd7 	bl	80050c0 <HAL_GetTick>
 8008112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008116:	f7fc ffd3 	bl	80050c0 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e2ed      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008128:	4b8b      	ldr	r3, [pc, #556]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1f0      	bne.n	8008116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0310 	and.w	r3, r3, #16
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80a9 	beq.w	8008294 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008142:	4b85      	ldr	r3, [pc, #532]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800814a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800814c:	4b82      	ldr	r3, [pc, #520]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d007      	beq.n	8008168 <HAL_RCC_OscConfig+0x308>
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b18      	cmp	r3, #24
 800815c:	d13a      	bne.n	80081d4 <HAL_RCC_OscConfig+0x374>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f003 0303 	and.w	r3, r3, #3
 8008164:	2b01      	cmp	r3, #1
 8008166:	d135      	bne.n	80081d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008168:	4b7b      	ldr	r3, [pc, #492]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <HAL_RCC_OscConfig+0x320>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	2b80      	cmp	r3, #128	; 0x80
 800817a:	d001      	beq.n	8008180 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e2c1      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008180:	f7fc ffce 	bl	8005120 <HAL_GetREVID>
 8008184:	4603      	mov	r3, r0
 8008186:	f241 0203 	movw	r2, #4099	; 0x1003
 800818a:	4293      	cmp	r3, r2
 800818c:	d817      	bhi.n	80081be <HAL_RCC_OscConfig+0x35e>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	2b20      	cmp	r3, #32
 8008194:	d108      	bne.n	80081a8 <HAL_RCC_OscConfig+0x348>
 8008196:	4b70      	ldr	r3, [pc, #448]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800819e:	4a6e      	ldr	r2, [pc, #440]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80081a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081a6:	e075      	b.n	8008294 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081a8:	4b6b      	ldr	r3, [pc, #428]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	069b      	lsls	r3, r3, #26
 80081b6:	4968      	ldr	r1, [pc, #416]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081bc:	e06a      	b.n	8008294 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081be:	4b66      	ldr	r3, [pc, #408]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	061b      	lsls	r3, r3, #24
 80081cc:	4962      	ldr	r1, [pc, #392]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081d2:	e05f      	b.n	8008294 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d042      	beq.n	8008262 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80081dc:	4b5e      	ldr	r3, [pc, #376]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a5d      	ldr	r2, [pc, #372]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80081e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e8:	f7fc ff6a 	bl	80050c0 <HAL_GetTick>
 80081ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081f0:	f7fc ff66 	bl	80050c0 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e280      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008202:	4b55      	ldr	r3, [pc, #340]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800820e:	f7fc ff87 	bl	8005120 <HAL_GetREVID>
 8008212:	4603      	mov	r3, r0
 8008214:	f241 0203 	movw	r2, #4099	; 0x1003
 8008218:	4293      	cmp	r3, r2
 800821a:	d817      	bhi.n	800824c <HAL_RCC_OscConfig+0x3ec>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	2b20      	cmp	r3, #32
 8008222:	d108      	bne.n	8008236 <HAL_RCC_OscConfig+0x3d6>
 8008224:	4b4c      	ldr	r3, [pc, #304]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800822c:	4a4a      	ldr	r2, [pc, #296]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 800822e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008232:	6053      	str	r3, [r2, #4]
 8008234:	e02e      	b.n	8008294 <HAL_RCC_OscConfig+0x434>
 8008236:	4b48      	ldr	r3, [pc, #288]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	069b      	lsls	r3, r3, #26
 8008244:	4944      	ldr	r1, [pc, #272]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008246:	4313      	orrs	r3, r2
 8008248:	604b      	str	r3, [r1, #4]
 800824a:	e023      	b.n	8008294 <HAL_RCC_OscConfig+0x434>
 800824c:	4b42      	ldr	r3, [pc, #264]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	061b      	lsls	r3, r3, #24
 800825a:	493f      	ldr	r1, [pc, #252]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 800825c:	4313      	orrs	r3, r2
 800825e:	60cb      	str	r3, [r1, #12]
 8008260:	e018      	b.n	8008294 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008262:	4b3d      	ldr	r3, [pc, #244]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a3c      	ldr	r2, [pc, #240]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800826c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826e:	f7fc ff27 	bl	80050c0 <HAL_GetTick>
 8008272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008274:	e008      	b.n	8008288 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008276:	f7fc ff23 	bl	80050c0 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d901      	bls.n	8008288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e23d      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008288:	4b33      	ldr	r3, [pc, #204]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1f0      	bne.n	8008276 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0308 	and.w	r3, r3, #8
 800829c:	2b00      	cmp	r3, #0
 800829e:	d036      	beq.n	800830e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d019      	beq.n	80082dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082a8:	4b2b      	ldr	r3, [pc, #172]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80082aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ac:	4a2a      	ldr	r2, [pc, #168]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80082ae:	f043 0301 	orr.w	r3, r3, #1
 80082b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b4:	f7fc ff04 	bl	80050c0 <HAL_GetTick>
 80082b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082bc:	f7fc ff00 	bl	80050c0 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e21a      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082ce:	4b22      	ldr	r3, [pc, #136]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80082d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0f0      	beq.n	80082bc <HAL_RCC_OscConfig+0x45c>
 80082da:	e018      	b.n	800830e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082dc:	4b1e      	ldr	r3, [pc, #120]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80082de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e0:	4a1d      	ldr	r2, [pc, #116]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 80082e2:	f023 0301 	bic.w	r3, r3, #1
 80082e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e8:	f7fc feea 	bl	80050c0 <HAL_GetTick>
 80082ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082ee:	e008      	b.n	8008302 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082f0:	f7fc fee6 	bl	80050c0 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e200      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008302:	4b15      	ldr	r3, [pc, #84]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f0      	bne.n	80082f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0320 	and.w	r3, r3, #32
 8008316:	2b00      	cmp	r3, #0
 8008318:	d039      	beq.n	800838e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d01c      	beq.n	800835c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008322:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a0c      	ldr	r2, [pc, #48]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 8008328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800832c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800832e:	f7fc fec7 	bl	80050c0 <HAL_GetTick>
 8008332:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008334:	e008      	b.n	8008348 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008336:	f7fc fec3 	bl	80050c0 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e1dd      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008348:	4b03      	ldr	r3, [pc, #12]	; (8008358 <HAL_RCC_OscConfig+0x4f8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d0f0      	beq.n	8008336 <HAL_RCC_OscConfig+0x4d6>
 8008354:	e01b      	b.n	800838e <HAL_RCC_OscConfig+0x52e>
 8008356:	bf00      	nop
 8008358:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800835c:	4b9b      	ldr	r3, [pc, #620]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a9a      	ldr	r2, [pc, #616]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008366:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008368:	f7fc feaa 	bl	80050c0 <HAL_GetTick>
 800836c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800836e:	e008      	b.n	8008382 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008370:	f7fc fea6 	bl	80050c0 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b02      	cmp	r3, #2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e1c0      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008382:	4b92      	ldr	r3, [pc, #584]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f0      	bne.n	8008370 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0304 	and.w	r3, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 8081 	beq.w	800849e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800839c:	4b8c      	ldr	r3, [pc, #560]	; (80085d0 <HAL_RCC_OscConfig+0x770>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a8b      	ldr	r2, [pc, #556]	; (80085d0 <HAL_RCC_OscConfig+0x770>)
 80083a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083a8:	f7fc fe8a 	bl	80050c0 <HAL_GetTick>
 80083ac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083b0:	f7fc fe86 	bl	80050c0 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b64      	cmp	r3, #100	; 0x64
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e1a0      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083c2:	4b83      	ldr	r3, [pc, #524]	; (80085d0 <HAL_RCC_OscConfig+0x770>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0f0      	beq.n	80083b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d106      	bne.n	80083e4 <HAL_RCC_OscConfig+0x584>
 80083d6:	4b7d      	ldr	r3, [pc, #500]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80083d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083da:	4a7c      	ldr	r2, [pc, #496]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80083dc:	f043 0301 	orr.w	r3, r3, #1
 80083e0:	6713      	str	r3, [r2, #112]	; 0x70
 80083e2:	e02d      	b.n	8008440 <HAL_RCC_OscConfig+0x5e0>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10c      	bne.n	8008406 <HAL_RCC_OscConfig+0x5a6>
 80083ec:	4b77      	ldr	r3, [pc, #476]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80083ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f0:	4a76      	ldr	r2, [pc, #472]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80083f2:	f023 0301 	bic.w	r3, r3, #1
 80083f6:	6713      	str	r3, [r2, #112]	; 0x70
 80083f8:	4b74      	ldr	r3, [pc, #464]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80083fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fc:	4a73      	ldr	r2, [pc, #460]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80083fe:	f023 0304 	bic.w	r3, r3, #4
 8008402:	6713      	str	r3, [r2, #112]	; 0x70
 8008404:	e01c      	b.n	8008440 <HAL_RCC_OscConfig+0x5e0>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	2b05      	cmp	r3, #5
 800840c:	d10c      	bne.n	8008428 <HAL_RCC_OscConfig+0x5c8>
 800840e:	4b6f      	ldr	r3, [pc, #444]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008412:	4a6e      	ldr	r2, [pc, #440]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008414:	f043 0304 	orr.w	r3, r3, #4
 8008418:	6713      	str	r3, [r2, #112]	; 0x70
 800841a:	4b6c      	ldr	r3, [pc, #432]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	4a6b      	ldr	r2, [pc, #428]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	6713      	str	r3, [r2, #112]	; 0x70
 8008426:	e00b      	b.n	8008440 <HAL_RCC_OscConfig+0x5e0>
 8008428:	4b68      	ldr	r3, [pc, #416]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 800842a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842c:	4a67      	ldr	r2, [pc, #412]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 800842e:	f023 0301 	bic.w	r3, r3, #1
 8008432:	6713      	str	r3, [r2, #112]	; 0x70
 8008434:	4b65      	ldr	r3, [pc, #404]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	4a64      	ldr	r2, [pc, #400]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 800843a:	f023 0304 	bic.w	r3, r3, #4
 800843e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d015      	beq.n	8008474 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008448:	f7fc fe3a 	bl	80050c0 <HAL_GetTick>
 800844c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800844e:	e00a      	b.n	8008466 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008450:	f7fc fe36 	bl	80050c0 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	f241 3288 	movw	r2, #5000	; 0x1388
 800845e:	4293      	cmp	r3, r2
 8008460:	d901      	bls.n	8008466 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e14e      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008466:	4b59      	ldr	r3, [pc, #356]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0ee      	beq.n	8008450 <HAL_RCC_OscConfig+0x5f0>
 8008472:	e014      	b.n	800849e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008474:	f7fc fe24 	bl	80050c0 <HAL_GetTick>
 8008478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800847a:	e00a      	b.n	8008492 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800847c:	f7fc fe20 	bl	80050c0 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	f241 3288 	movw	r2, #5000	; 0x1388
 800848a:	4293      	cmp	r3, r2
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e138      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008492:	4b4e      	ldr	r3, [pc, #312]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1ee      	bne.n	800847c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 812d 	beq.w	8008702 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80084a8:	4b48      	ldr	r3, [pc, #288]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084b0:	2b18      	cmp	r3, #24
 80084b2:	f000 80bd 	beq.w	8008630 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	f040 809e 	bne.w	80085fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084c0:	4b42      	ldr	r3, [pc, #264]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a41      	ldr	r2, [pc, #260]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80084c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084cc:	f7fc fdf8 	bl	80050c0 <HAL_GetTick>
 80084d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084d2:	e008      	b.n	80084e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084d4:	f7fc fdf4 	bl	80050c0 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e10e      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084e6:	4b39      	ldr	r3, [pc, #228]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f0      	bne.n	80084d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084f2:	4b36      	ldr	r3, [pc, #216]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80084f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084f6:	4b37      	ldr	r3, [pc, #220]	; (80085d4 <HAL_RCC_OscConfig+0x774>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008502:	0112      	lsls	r2, r2, #4
 8008504:	430a      	orrs	r2, r1
 8008506:	4931      	ldr	r1, [pc, #196]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008508:	4313      	orrs	r3, r2
 800850a:	628b      	str	r3, [r1, #40]	; 0x28
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008510:	3b01      	subs	r3, #1
 8008512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851a:	3b01      	subs	r3, #1
 800851c:	025b      	lsls	r3, r3, #9
 800851e:	b29b      	uxth	r3, r3
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	3b01      	subs	r3, #1
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008534:	3b01      	subs	r3, #1
 8008536:	061b      	lsls	r3, r3, #24
 8008538:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800853c:	4923      	ldr	r1, [pc, #140]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 800853e:	4313      	orrs	r3, r2
 8008540:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008542:	4b22      	ldr	r3, [pc, #136]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	4a21      	ldr	r2, [pc, #132]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800854e:	4b1f      	ldr	r3, [pc, #124]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008552:	4b21      	ldr	r3, [pc, #132]	; (80085d8 <HAL_RCC_OscConfig+0x778>)
 8008554:	4013      	ands	r3, r2
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800855a:	00d2      	lsls	r2, r2, #3
 800855c:	491b      	ldr	r1, [pc, #108]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 800855e:	4313      	orrs	r3, r2
 8008560:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008562:	4b1a      	ldr	r3, [pc, #104]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	f023 020c 	bic.w	r2, r3, #12
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	4917      	ldr	r1, [pc, #92]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008570:	4313      	orrs	r3, r2
 8008572:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008574:	4b15      	ldr	r3, [pc, #84]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	f023 0202 	bic.w	r2, r3, #2
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008580:	4912      	ldr	r1, [pc, #72]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008582:	4313      	orrs	r3, r2
 8008584:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008586:	4b11      	ldr	r3, [pc, #68]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	4a10      	ldr	r2, [pc, #64]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 800858c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008590:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008592:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	4a0d      	ldr	r2, [pc, #52]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 8008598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800859c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800859e:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	4a0a      	ldr	r2, [pc, #40]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80085a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80085aa:	4b08      	ldr	r3, [pc, #32]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	4a07      	ldr	r2, [pc, #28]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80085b0:	f043 0301 	orr.w	r3, r3, #1
 80085b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a04      	ldr	r2, [pc, #16]	; (80085cc <HAL_RCC_OscConfig+0x76c>)
 80085bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c2:	f7fc fd7d 	bl	80050c0 <HAL_GetTick>
 80085c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085c8:	e011      	b.n	80085ee <HAL_RCC_OscConfig+0x78e>
 80085ca:	bf00      	nop
 80085cc:	58024400 	.word	0x58024400
 80085d0:	58024800 	.word	0x58024800
 80085d4:	fffffc0c 	.word	0xfffffc0c
 80085d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085dc:	f7fc fd70 	bl	80050c0 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e08a      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085ee:	4b47      	ldr	r3, [pc, #284]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0f0      	beq.n	80085dc <HAL_RCC_OscConfig+0x77c>
 80085fa:	e082      	b.n	8008702 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085fc:	4b43      	ldr	r3, [pc, #268]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a42      	ldr	r2, [pc, #264]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 8008602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008608:	f7fc fd5a 	bl	80050c0 <HAL_GetTick>
 800860c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008610:	f7fc fd56 	bl	80050c0 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e070      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008622:	4b3a      	ldr	r3, [pc, #232]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1f0      	bne.n	8008610 <HAL_RCC_OscConfig+0x7b0>
 800862e:	e068      	b.n	8008702 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008630:	4b36      	ldr	r3, [pc, #216]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008634:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008636:	4b35      	ldr	r3, [pc, #212]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	2b01      	cmp	r3, #1
 8008642:	d031      	beq.n	80086a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f003 0203 	and.w	r2, r3, #3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800864e:	429a      	cmp	r2, r3
 8008650:	d12a      	bne.n	80086a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	091b      	lsrs	r3, r3, #4
 8008656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800865e:	429a      	cmp	r2, r3
 8008660:	d122      	bne.n	80086a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800866e:	429a      	cmp	r2, r3
 8008670:	d11a      	bne.n	80086a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	0a5b      	lsrs	r3, r3, #9
 8008676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008680:	429a      	cmp	r2, r3
 8008682:	d111      	bne.n	80086a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	0c1b      	lsrs	r3, r3, #16
 8008688:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008692:	429a      	cmp	r2, r3
 8008694:	d108      	bne.n	80086a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	0e1b      	lsrs	r3, r3, #24
 800869a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d001      	beq.n	80086ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e02b      	b.n	8008704 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 80086ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b0:	08db      	lsrs	r3, r3, #3
 80086b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d01f      	beq.n	8008702 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	4a11      	ldr	r2, [pc, #68]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 80086c8:	f023 0301 	bic.w	r3, r3, #1
 80086cc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086ce:	f7fc fcf7 	bl	80050c0 <HAL_GetTick>
 80086d2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80086d4:	bf00      	nop
 80086d6:	f7fc fcf3 	bl	80050c0 <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	4293      	cmp	r3, r2
 80086e0:	d0f9      	beq.n	80086d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086e2:	4b0a      	ldr	r3, [pc, #40]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 80086e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086e6:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <HAL_RCC_OscConfig+0x8b0>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086ee:	00d2      	lsls	r2, r2, #3
 80086f0:	4906      	ldr	r1, [pc, #24]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80086f6:	4b05      	ldr	r3, [pc, #20]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 80086f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fa:	4a04      	ldr	r2, [pc, #16]	; (800870c <HAL_RCC_OscConfig+0x8ac>)
 80086fc:	f043 0301 	orr.w	r3, r3, #1
 8008700:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3730      	adds	r7, #48	; 0x30
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	58024400 	.word	0x58024400
 8008710:	ffff0007 	.word	0xffff0007

08008714 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e19c      	b.n	8008a62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008728:	4b8a      	ldr	r3, [pc, #552]	; (8008954 <HAL_RCC_ClockConfig+0x240>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d910      	bls.n	8008758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008736:	4b87      	ldr	r3, [pc, #540]	; (8008954 <HAL_RCC_ClockConfig+0x240>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f023 020f 	bic.w	r2, r3, #15
 800873e:	4985      	ldr	r1, [pc, #532]	; (8008954 <HAL_RCC_ClockConfig+0x240>)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	4313      	orrs	r3, r2
 8008744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008746:	4b83      	ldr	r3, [pc, #524]	; (8008954 <HAL_RCC_ClockConfig+0x240>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d001      	beq.n	8008758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e184      	b.n	8008a62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0304 	and.w	r3, r3, #4
 8008760:	2b00      	cmp	r3, #0
 8008762:	d010      	beq.n	8008786 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691a      	ldr	r2, [r3, #16]
 8008768:	4b7b      	ldr	r3, [pc, #492]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008770:	429a      	cmp	r2, r3
 8008772:	d908      	bls.n	8008786 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008774:	4b78      	ldr	r3, [pc, #480]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	4975      	ldr	r1, [pc, #468]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008782:	4313      	orrs	r3, r2
 8008784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0308 	and.w	r3, r3, #8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d010      	beq.n	80087b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	695a      	ldr	r2, [r3, #20]
 8008796:	4b70      	ldr	r3, [pc, #448]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800879e:	429a      	cmp	r2, r3
 80087a0:	d908      	bls.n	80087b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087a2:	4b6d      	ldr	r3, [pc, #436]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	496a      	ldr	r1, [pc, #424]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0310 	and.w	r3, r3, #16
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d010      	beq.n	80087e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	699a      	ldr	r2, [r3, #24]
 80087c4:	4b64      	ldr	r3, [pc, #400]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d908      	bls.n	80087e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087d0:	4b61      	ldr	r3, [pc, #388]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80087d2:	69db      	ldr	r3, [r3, #28]
 80087d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	495e      	ldr	r1, [pc, #376]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d010      	beq.n	8008810 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	69da      	ldr	r2, [r3, #28]
 80087f2:	4b59      	ldr	r3, [pc, #356]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d908      	bls.n	8008810 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087fe:	4b56      	ldr	r3, [pc, #344]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	4953      	ldr	r1, [pc, #332]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 800880c:	4313      	orrs	r3, r2
 800880e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b00      	cmp	r3, #0
 800881a:	d010      	beq.n	800883e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	4b4d      	ldr	r3, [pc, #308]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	f003 030f 	and.w	r3, r3, #15
 8008828:	429a      	cmp	r2, r3
 800882a:	d908      	bls.n	800883e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800882c:	4b4a      	ldr	r3, [pc, #296]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	f023 020f 	bic.w	r2, r3, #15
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	4947      	ldr	r1, [pc, #284]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 800883a:	4313      	orrs	r3, r2
 800883c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d055      	beq.n	80088f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800884a:	4b43      	ldr	r3, [pc, #268]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	4940      	ldr	r1, [pc, #256]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008858:	4313      	orrs	r3, r2
 800885a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b02      	cmp	r3, #2
 8008862:	d107      	bne.n	8008874 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008864:	4b3c      	ldr	r3, [pc, #240]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d121      	bne.n	80088b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e0f6      	b.n	8008a62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b03      	cmp	r3, #3
 800887a:	d107      	bne.n	800888c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800887c:	4b36      	ldr	r3, [pc, #216]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d115      	bne.n	80088b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e0ea      	b.n	8008a62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d107      	bne.n	80088a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008894:	4b30      	ldr	r3, [pc, #192]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889c:	2b00      	cmp	r3, #0
 800889e:	d109      	bne.n	80088b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e0de      	b.n	8008a62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088a4:	4b2c      	ldr	r3, [pc, #176]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e0d6      	b.n	8008a62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088b4:	4b28      	ldr	r3, [pc, #160]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	f023 0207 	bic.w	r2, r3, #7
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	4925      	ldr	r1, [pc, #148]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088c6:	f7fc fbfb 	bl	80050c0 <HAL_GetTick>
 80088ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088cc:	e00a      	b.n	80088e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088ce:	f7fc fbf7 	bl	80050c0 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088dc:	4293      	cmp	r3, r2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e0be      	b.n	8008a62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088e4:	4b1c      	ldr	r3, [pc, #112]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d1eb      	bne.n	80088ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d010      	beq.n	8008924 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	4b14      	ldr	r3, [pc, #80]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	429a      	cmp	r2, r3
 8008910:	d208      	bcs.n	8008924 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008912:	4b11      	ldr	r3, [pc, #68]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f023 020f 	bic.w	r2, r3, #15
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	490e      	ldr	r1, [pc, #56]	; (8008958 <HAL_RCC_ClockConfig+0x244>)
 8008920:	4313      	orrs	r3, r2
 8008922:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008924:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <HAL_RCC_ClockConfig+0x240>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 030f 	and.w	r3, r3, #15
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	429a      	cmp	r2, r3
 8008930:	d214      	bcs.n	800895c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008932:	4b08      	ldr	r3, [pc, #32]	; (8008954 <HAL_RCC_ClockConfig+0x240>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f023 020f 	bic.w	r2, r3, #15
 800893a:	4906      	ldr	r1, [pc, #24]	; (8008954 <HAL_RCC_ClockConfig+0x240>)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	4313      	orrs	r3, r2
 8008940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008942:	4b04      	ldr	r3, [pc, #16]	; (8008954 <HAL_RCC_ClockConfig+0x240>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 030f 	and.w	r3, r3, #15
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d005      	beq.n	800895c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e086      	b.n	8008a62 <HAL_RCC_ClockConfig+0x34e>
 8008954:	52002000 	.word	0x52002000
 8008958:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b00      	cmp	r3, #0
 8008966:	d010      	beq.n	800898a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	4b3f      	ldr	r3, [pc, #252]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008974:	429a      	cmp	r2, r3
 8008976:	d208      	bcs.n	800898a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008978:	4b3c      	ldr	r3, [pc, #240]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	4939      	ldr	r1, [pc, #228]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 8008986:	4313      	orrs	r3, r2
 8008988:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d010      	beq.n	80089b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	695a      	ldr	r2, [r3, #20]
 800899a:	4b34      	ldr	r3, [pc, #208]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d208      	bcs.n	80089b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089a6:	4b31      	ldr	r3, [pc, #196]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	492e      	ldr	r1, [pc, #184]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0310 	and.w	r3, r3, #16
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d010      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	699a      	ldr	r2, [r3, #24]
 80089c8:	4b28      	ldr	r3, [pc, #160]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d208      	bcs.n	80089e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089d4:	4b25      	ldr	r3, [pc, #148]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	4922      	ldr	r1, [pc, #136]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d010      	beq.n	8008a14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69da      	ldr	r2, [r3, #28]
 80089f6:	4b1d      	ldr	r3, [pc, #116]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d208      	bcs.n	8008a14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a02:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	4917      	ldr	r1, [pc, #92]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 8008a10:	4313      	orrs	r3, r2
 8008a12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a14:	f000 f834 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	4912      	ldr	r1, [pc, #72]	; (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 8008a26:	5ccb      	ldrb	r3, [r1, r3]
 8008a28:	f003 031f 	and.w	r3, r3, #31
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a32:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <HAL_RCC_ClockConfig+0x358>)
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	f003 030f 	and.w	r3, r3, #15
 8008a3a:	4a0d      	ldr	r2, [pc, #52]	; (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 8008a3c:	5cd3      	ldrb	r3, [r2, r3]
 8008a3e:	f003 031f 	and.w	r3, r3, #31
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	fa22 f303 	lsr.w	r3, r2, r3
 8008a48:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <HAL_RCC_ClockConfig+0x360>)
 8008a4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a4c:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <HAL_RCC_ClockConfig+0x364>)
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008a52:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <HAL_RCC_ClockConfig+0x368>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fc fae8 	bl	800502c <HAL_InitTick>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3718      	adds	r7, #24
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	58024400 	.word	0x58024400
 8008a70:	0800fbc4 	.word	0x0800fbc4
 8008a74:	24000438 	.word	0x24000438
 8008a78:	24000434 	.word	0x24000434
 8008a7c:	2400043c 	.word	0x2400043c

08008a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b089      	sub	sp, #36	; 0x24
 8008a84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a86:	4bb3      	ldr	r3, [pc, #716]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a8e:	2b18      	cmp	r3, #24
 8008a90:	f200 8155 	bhi.w	8008d3e <HAL_RCC_GetSysClockFreq+0x2be>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008b01 	.word	0x08008b01
 8008aa0:	08008d3f 	.word	0x08008d3f
 8008aa4:	08008d3f 	.word	0x08008d3f
 8008aa8:	08008d3f 	.word	0x08008d3f
 8008aac:	08008d3f 	.word	0x08008d3f
 8008ab0:	08008d3f 	.word	0x08008d3f
 8008ab4:	08008d3f 	.word	0x08008d3f
 8008ab8:	08008d3f 	.word	0x08008d3f
 8008abc:	08008b27 	.word	0x08008b27
 8008ac0:	08008d3f 	.word	0x08008d3f
 8008ac4:	08008d3f 	.word	0x08008d3f
 8008ac8:	08008d3f 	.word	0x08008d3f
 8008acc:	08008d3f 	.word	0x08008d3f
 8008ad0:	08008d3f 	.word	0x08008d3f
 8008ad4:	08008d3f 	.word	0x08008d3f
 8008ad8:	08008d3f 	.word	0x08008d3f
 8008adc:	08008b2d 	.word	0x08008b2d
 8008ae0:	08008d3f 	.word	0x08008d3f
 8008ae4:	08008d3f 	.word	0x08008d3f
 8008ae8:	08008d3f 	.word	0x08008d3f
 8008aec:	08008d3f 	.word	0x08008d3f
 8008af0:	08008d3f 	.word	0x08008d3f
 8008af4:	08008d3f 	.word	0x08008d3f
 8008af8:	08008d3f 	.word	0x08008d3f
 8008afc:	08008b33 	.word	0x08008b33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b00:	4b94      	ldr	r3, [pc, #592]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0320 	and.w	r3, r3, #32
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b0c:	4b91      	ldr	r3, [pc, #580]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	08db      	lsrs	r3, r3, #3
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	4a90      	ldr	r2, [pc, #576]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b18:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008b1e:	e111      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b20:	4b8d      	ldr	r3, [pc, #564]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b22:	61bb      	str	r3, [r7, #24]
      break;
 8008b24:	e10e      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008b26:	4b8d      	ldr	r3, [pc, #564]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b28:	61bb      	str	r3, [r7, #24]
      break;
 8008b2a:	e10b      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008b2c:	4b8c      	ldr	r3, [pc, #560]	; (8008d60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008b2e:	61bb      	str	r3, [r7, #24]
      break;
 8008b30:	e108      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b32:	4b88      	ldr	r3, [pc, #544]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b36:	f003 0303 	and.w	r3, r3, #3
 8008b3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008b3c:	4b85      	ldr	r3, [pc, #532]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b40:	091b      	lsrs	r3, r3, #4
 8008b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008b48:	4b82      	ldr	r3, [pc, #520]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008b52:	4b80      	ldr	r3, [pc, #512]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b56:	08db      	lsrs	r3, r3, #3
 8008b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80e1 	beq.w	8008d38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	f000 8083 	beq.w	8008c84 <HAL_RCC_GetSysClockFreq+0x204>
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	f200 80a1 	bhi.w	8008cc8 <HAL_RCC_GetSysClockFreq+0x248>
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <HAL_RCC_GetSysClockFreq+0x114>
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d056      	beq.n	8008c40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b92:	e099      	b.n	8008cc8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b94:	4b6f      	ldr	r3, [pc, #444]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0320 	and.w	r3, r3, #32
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d02d      	beq.n	8008bfc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ba0:	4b6c      	ldr	r3, [pc, #432]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	08db      	lsrs	r3, r3, #3
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	4a6b      	ldr	r2, [pc, #428]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	ee07 3a90 	vmov	s15, r3
 8008bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bca:	4b62      	ldr	r3, [pc, #392]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bde:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008bfa:	e087      	b.n	8008d0c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008d68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c0e:	4b51      	ldr	r3, [pc, #324]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c3e:	e065      	b.n	8008d0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008d6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c52:	4b40      	ldr	r3, [pc, #256]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c82:	e043      	b.n	8008d0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008d70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c96:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008caa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cc6:	e021      	b.n	8008d0c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008d6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cda:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d0a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008d0c:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d10:	0a5b      	lsrs	r3, r3, #9
 8008d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d16:	3301      	adds	r3, #1
 8008d18:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	ee07 3a90 	vmov	s15, r3
 8008d20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d30:	ee17 3a90 	vmov	r3, s15
 8008d34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008d36:	e005      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	61bb      	str	r3, [r7, #24]
      break;
 8008d3c:	e002      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008d3e:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d40:	61bb      	str	r3, [r7, #24]
      break;
 8008d42:	bf00      	nop
  }

  return sysclockfreq;
 8008d44:	69bb      	ldr	r3, [r7, #24]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3724      	adds	r7, #36	; 0x24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	58024400 	.word	0x58024400
 8008d58:	03d09000 	.word	0x03d09000
 8008d5c:	003d0900 	.word	0x003d0900
 8008d60:	007a1200 	.word	0x007a1200
 8008d64:	46000000 	.word	0x46000000
 8008d68:	4c742400 	.word	0x4c742400
 8008d6c:	4a742400 	.word	0x4a742400
 8008d70:	4af42400 	.word	0x4af42400

08008d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d7a:	f7ff fe81 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	4b10      	ldr	r3, [pc, #64]	; (8008dc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	0a1b      	lsrs	r3, r3, #8
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	490f      	ldr	r1, [pc, #60]	; (8008dc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d8c:	5ccb      	ldrb	r3, [r1, r3]
 8008d8e:	f003 031f 	and.w	r3, r3, #31
 8008d92:	fa22 f303 	lsr.w	r3, r2, r3
 8008d96:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d98:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	f003 030f 	and.w	r3, r3, #15
 8008da0:	4a09      	ldr	r2, [pc, #36]	; (8008dc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008da2:	5cd3      	ldrb	r3, [r2, r3]
 8008da4:	f003 031f 	and.w	r3, r3, #31
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	fa22 f303 	lsr.w	r3, r2, r3
 8008dae:	4a07      	ldr	r2, [pc, #28]	; (8008dcc <HAL_RCC_GetHCLKFreq+0x58>)
 8008db0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008db2:	4a07      	ldr	r2, [pc, #28]	; (8008dd0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008db8:	4b04      	ldr	r3, [pc, #16]	; (8008dcc <HAL_RCC_GetHCLKFreq+0x58>)
 8008dba:	681b      	ldr	r3, [r3, #0]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	58024400 	.word	0x58024400
 8008dc8:	0800fbc4 	.word	0x0800fbc4
 8008dcc:	24000438 	.word	0x24000438
 8008dd0:	24000434 	.word	0x24000434

08008dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008dd8:	f7ff ffcc 	bl	8008d74 <HAL_RCC_GetHCLKFreq>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	091b      	lsrs	r3, r3, #4
 8008de4:	f003 0307 	and.w	r3, r3, #7
 8008de8:	4904      	ldr	r1, [pc, #16]	; (8008dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008dea:	5ccb      	ldrb	r3, [r1, r3]
 8008dec:	f003 031f 	and.w	r3, r3, #31
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	58024400 	.word	0x58024400
 8008dfc:	0800fbc4 	.word	0x0800fbc4

08008e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e04:	f7ff ffb6 	bl	8008d74 <HAL_RCC_GetHCLKFreq>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e0c:	69db      	ldr	r3, [r3, #28]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	f003 0307 	and.w	r3, r3, #7
 8008e14:	4904      	ldr	r1, [pc, #16]	; (8008e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e16:	5ccb      	ldrb	r3, [r1, r3]
 8008e18:	f003 031f 	and.w	r3, r3, #31
 8008e1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	58024400 	.word	0x58024400
 8008e28:	0800fbc4 	.word	0x0800fbc4

08008e2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e30:	b0ca      	sub	sp, #296	; 0x128
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008e50:	2500      	movs	r5, #0
 8008e52:	ea54 0305 	orrs.w	r3, r4, r5
 8008e56:	d049      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e62:	d02f      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e68:	d828      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e6e:	d01a      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e74:	d822      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e7e:	d007      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e80:	e01c      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e82:	4bb8      	ldr	r3, [pc, #736]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	4ab7      	ldr	r2, [pc, #732]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e8e:	e01a      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e94:	3308      	adds	r3, #8
 8008e96:	2102      	movs	r1, #2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f002 fb61 	bl	800b560 <RCCEx_PLL2_Config>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ea4:	e00f      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eaa:	3328      	adds	r3, #40	; 0x28
 8008eac:	2102      	movs	r1, #2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 fc08 	bl	800b6c4 <RCCEx_PLL3_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008eba:	e004      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ec2:	e000      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ece:	4ba5      	ldr	r3, [pc, #660]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008edc:	4aa1      	ldr	r2, [pc, #644]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	6513      	str	r3, [r2, #80]	; 0x50
 8008ee2:	e003      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ee8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008ef8:	f04f 0900 	mov.w	r9, #0
 8008efc:	ea58 0309 	orrs.w	r3, r8, r9
 8008f00:	d047      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d82a      	bhi.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f0c:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f29 	.word	0x08008f29
 8008f18:	08008f37 	.word	0x08008f37
 8008f1c:	08008f4d 	.word	0x08008f4d
 8008f20:	08008f6b 	.word	0x08008f6b
 8008f24:	08008f6b 	.word	0x08008f6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f28:	4b8e      	ldr	r3, [pc, #568]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2c:	4a8d      	ldr	r2, [pc, #564]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f34:	e01a      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f002 fb0e 	bl	800b560 <RCCEx_PLL2_Config>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f4a:	e00f      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f50:	3328      	adds	r3, #40	; 0x28
 8008f52:	2100      	movs	r1, #0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f002 fbb5 	bl	800b6c4 <RCCEx_PLL3_Config>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f60:	e004      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f68:	e000      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f74:	4b7b      	ldr	r3, [pc, #492]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f78:	f023 0107 	bic.w	r1, r3, #7
 8008f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f82:	4a78      	ldr	r2, [pc, #480]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f84:	430b      	orrs	r3, r1
 8008f86:	6513      	str	r3, [r2, #80]	; 0x50
 8008f88:	e003      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008f9e:	f04f 0b00 	mov.w	fp, #0
 8008fa2:	ea5a 030b 	orrs.w	r3, sl, fp
 8008fa6:	d04c      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb2:	d030      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb8:	d829      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fba:	2bc0      	cmp	r3, #192	; 0xc0
 8008fbc:	d02d      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8008fc0:	d825      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d018      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008fc6:	2b80      	cmp	r3, #128	; 0x80
 8008fc8:	d821      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008fce:	2b40      	cmp	r3, #64	; 0x40
 8008fd0:	d007      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008fd2:	e01c      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fd4:	4b63      	ldr	r3, [pc, #396]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd8:	4a62      	ldr	r2, [pc, #392]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fe0:	e01c      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f002 fab8 	bl	800b560 <RCCEx_PLL2_Config>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ff6:	e011      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffc:	3328      	adds	r3, #40	; 0x28
 8008ffe:	2100      	movs	r1, #0
 8009000:	4618      	mov	r0, r3
 8009002:	f002 fb5f 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800900c:	e006      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009014:	e002      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009016:	bf00      	nop
 8009018:	e000      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800901a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009024:	4b4f      	ldr	r3, [pc, #316]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009028:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800902c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009032:	4a4c      	ldr	r2, [pc, #304]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009034:	430b      	orrs	r3, r1
 8009036:	6513      	str	r3, [r2, #80]	; 0x50
 8009038:	e003      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800903e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800904e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009052:	2300      	movs	r3, #0
 8009054:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009058:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800905c:	460b      	mov	r3, r1
 800905e:	4313      	orrs	r3, r2
 8009060:	d053      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009066:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800906a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800906e:	d035      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009074:	d82e      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009076:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800907a:	d031      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800907c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009080:	d828      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009086:	d01a      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800908c:	d822      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009096:	d007      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009098:	e01c      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800909a:	4b32      	ldr	r3, [pc, #200]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	4a31      	ldr	r2, [pc, #196]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090a6:	e01c      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ac:	3308      	adds	r3, #8
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f002 fa55 	bl	800b560 <RCCEx_PLL2_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80090bc:	e011      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c2:	3328      	adds	r3, #40	; 0x28
 80090c4:	2100      	movs	r1, #0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f002 fafc 	bl	800b6c4 <RCCEx_PLL3_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090d2:	e006      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090da:	e002      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80090dc:	bf00      	nop
 80090de:	e000      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80090e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090ea:	4b1e      	ldr	r3, [pc, #120]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80090f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090fa:	4a1a      	ldr	r2, [pc, #104]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090fc:	430b      	orrs	r3, r1
 80090fe:	6593      	str	r3, [r2, #88]	; 0x58
 8009100:	e003      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009106:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009116:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800911a:	2300      	movs	r3, #0
 800911c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009120:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009124:	460b      	mov	r3, r1
 8009126:	4313      	orrs	r3, r2
 8009128:	d056      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800912a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800912e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009132:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009136:	d038      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800913c:	d831      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800913e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009142:	d034      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009144:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009148:	d82b      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800914a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800914e:	d01d      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009154:	d825      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d006      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800915a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800915e:	d00a      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009160:	e01f      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009162:	bf00      	nop
 8009164:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009168:	4ba2      	ldr	r3, [pc, #648]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	4aa1      	ldr	r2, [pc, #644]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800916e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009174:	e01c      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800917a:	3308      	adds	r3, #8
 800917c:	2100      	movs	r1, #0
 800917e:	4618      	mov	r0, r3
 8009180:	f002 f9ee 	bl	800b560 <RCCEx_PLL2_Config>
 8009184:	4603      	mov	r3, r0
 8009186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800918a:	e011      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800918c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009190:	3328      	adds	r3, #40	; 0x28
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f002 fa95 	bl	800b6c4 <RCCEx_PLL3_Config>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091a0:	e006      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091a8:	e002      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091aa:	bf00      	nop
 80091ac:	e000      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10b      	bne.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80091b8:	4b8e      	ldr	r3, [pc, #568]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091bc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091c8:	4a8a      	ldr	r2, [pc, #552]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ca:	430b      	orrs	r3, r1
 80091cc:	6593      	str	r3, [r2, #88]	; 0x58
 80091ce:	e003      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80091e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091e8:	2300      	movs	r3, #0
 80091ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80091ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80091f2:	460b      	mov	r3, r1
 80091f4:	4313      	orrs	r3, r2
 80091f6:	d03a      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80091f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fe:	2b30      	cmp	r3, #48	; 0x30
 8009200:	d01f      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009202:	2b30      	cmp	r3, #48	; 0x30
 8009204:	d819      	bhi.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009206:	2b20      	cmp	r3, #32
 8009208:	d00c      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800920a:	2b20      	cmp	r3, #32
 800920c:	d815      	bhi.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d019      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009212:	2b10      	cmp	r3, #16
 8009214:	d111      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009216:	4b77      	ldr	r3, [pc, #476]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921a:	4a76      	ldr	r2, [pc, #472]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800921c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009222:	e011      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009228:	3308      	adds	r3, #8
 800922a:	2102      	movs	r1, #2
 800922c:	4618      	mov	r0, r3
 800922e:	f002 f997 	bl	800b560 <RCCEx_PLL2_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009238:	e006      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009240:	e002      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009242:	bf00      	nop
 8009244:	e000      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009250:	4b68      	ldr	r3, [pc, #416]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009254:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800925c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925e:	4a65      	ldr	r2, [pc, #404]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009260:	430b      	orrs	r3, r1
 8009262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009264:	e003      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800926a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800927a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800927e:	2300      	movs	r3, #0
 8009280:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009284:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009288:	460b      	mov	r3, r1
 800928a:	4313      	orrs	r3, r2
 800928c:	d051      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800928e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009298:	d035      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800929a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800929e:	d82e      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092a4:	d031      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80092a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092aa:	d828      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b0:	d01a      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80092b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b6:	d822      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80092bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c0:	d007      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80092c2:	e01c      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c4:	4b4b      	ldr	r3, [pc, #300]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	4a4a      	ldr	r2, [pc, #296]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092d0:	e01c      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d6:	3308      	adds	r3, #8
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f002 f940 	bl	800b560 <RCCEx_PLL2_Config>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092e6:	e011      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ec:	3328      	adds	r3, #40	; 0x28
 80092ee:	2100      	movs	r1, #0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f002 f9e7 	bl	800b6c4 <RCCEx_PLL3_Config>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092fc:	e006      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009304:	e002      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009306:	bf00      	nop
 8009308:	e000      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800930a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800930c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009314:	4b37      	ldr	r3, [pc, #220]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009318:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800931c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009322:	4a34      	ldr	r2, [pc, #208]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009324:	430b      	orrs	r3, r1
 8009326:	6513      	str	r3, [r2, #80]	; 0x50
 8009328:	e003      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800932e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800933e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009342:	2300      	movs	r3, #0
 8009344:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009348:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800934c:	460b      	mov	r3, r1
 800934e:	4313      	orrs	r3, r2
 8009350:	d056      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800935c:	d033      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800935e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009362:	d82c      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009364:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009368:	d02f      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800936a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800936e:	d826      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009370:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009374:	d02b      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009376:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800937a:	d820      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800937c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009380:	d012      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009386:	d81a      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009388:	2b00      	cmp	r3, #0
 800938a:	d022      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800938c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009390:	d115      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009396:	3308      	adds	r3, #8
 8009398:	2101      	movs	r1, #1
 800939a:	4618      	mov	r0, r3
 800939c:	f002 f8e0 	bl	800b560 <RCCEx_PLL2_Config>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093a6:	e015      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ac:	3328      	adds	r3, #40	; 0x28
 80093ae:	2101      	movs	r1, #1
 80093b0:	4618      	mov	r0, r3
 80093b2:	f002 f987 	bl	800b6c4 <RCCEx_PLL3_Config>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093bc:	e00a      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093c4:	e006      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093c6:	bf00      	nop
 80093c8:	e004      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093ca:	bf00      	nop
 80093cc:	e002      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093ce:	bf00      	nop
 80093d0:	e000      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10d      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ea:	4a02      	ldr	r2, [pc, #8]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ec:	430b      	orrs	r3, r1
 80093ee:	6513      	str	r3, [r2, #80]	; 0x50
 80093f0:	e006      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80093f2:	bf00      	nop
 80093f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800940c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009410:	2300      	movs	r3, #0
 8009412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009416:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800941a:	460b      	mov	r3, r1
 800941c:	4313      	orrs	r3, r2
 800941e:	d055      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800942c:	d033      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800942e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009432:	d82c      	bhi.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009438:	d02f      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800943a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943e:	d826      	bhi.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009440:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009444:	d02b      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800944a:	d820      	bhi.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800944c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009450:	d012      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009456:	d81a      	bhi.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d022      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800945c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009460:	d115      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009466:	3308      	adds	r3, #8
 8009468:	2101      	movs	r1, #1
 800946a:	4618      	mov	r0, r3
 800946c:	f002 f878 	bl	800b560 <RCCEx_PLL2_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009476:	e015      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800947c:	3328      	adds	r3, #40	; 0x28
 800947e:	2101      	movs	r1, #1
 8009480:	4618      	mov	r0, r3
 8009482:	f002 f91f 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800948c:	e00a      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009494:	e006      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009496:	bf00      	nop
 8009498:	e004      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800949a:	bf00      	nop
 800949c:	e002      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800949e:	bf00      	nop
 80094a0:	e000      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80094ac:	4ba3      	ldr	r3, [pc, #652]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80094b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094bc:	4a9f      	ldr	r2, [pc, #636]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094be:	430b      	orrs	r3, r1
 80094c0:	6593      	str	r3, [r2, #88]	; 0x58
 80094c2:	e003      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80094d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094dc:	2300      	movs	r3, #0
 80094de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80094e6:	460b      	mov	r3, r1
 80094e8:	4313      	orrs	r3, r2
 80094ea:	d037      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80094ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f6:	d00e      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80094f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fc:	d816      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d018      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009506:	d111      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009508:	4b8c      	ldr	r3, [pc, #560]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	4a8b      	ldr	r2, [pc, #556]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800950e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009514:	e00f      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951a:	3308      	adds	r3, #8
 800951c:	2101      	movs	r1, #1
 800951e:	4618      	mov	r0, r3
 8009520:	f002 f81e 	bl	800b560 <RCCEx_PLL2_Config>
 8009524:	4603      	mov	r3, r0
 8009526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800952a:	e004      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009532:	e000      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800953e:	4b7f      	ldr	r3, [pc, #508]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009542:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954c:	4a7b      	ldr	r2, [pc, #492]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800954e:	430b      	orrs	r3, r1
 8009550:	6513      	str	r3, [r2, #80]	; 0x50
 8009552:	e003      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009554:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009558:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800955c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800956c:	2300      	movs	r3, #0
 800956e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009572:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009576:	460b      	mov	r3, r1
 8009578:	4313      	orrs	r3, r2
 800957a:	d039      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800957c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009582:	2b03      	cmp	r3, #3
 8009584:	d81c      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009586:	a201      	add	r2, pc, #4	; (adr r2, 800958c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958c:	080095c9 	.word	0x080095c9
 8009590:	0800959d 	.word	0x0800959d
 8009594:	080095ab 	.word	0x080095ab
 8009598:	080095c9 	.word	0x080095c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800959c:	4b67      	ldr	r3, [pc, #412]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800959e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a0:	4a66      	ldr	r2, [pc, #408]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095a8:	e00f      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ae:	3308      	adds	r3, #8
 80095b0:	2102      	movs	r1, #2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 ffd4 	bl	800b560 <RCCEx_PLL2_Config>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095be:	e004      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095c6:	e000      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80095c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095d2:	4b5a      	ldr	r3, [pc, #360]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095d6:	f023 0103 	bic.w	r1, r3, #3
 80095da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e0:	4a56      	ldr	r2, [pc, #344]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e2:	430b      	orrs	r3, r1
 80095e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80095e6:	e003      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80095fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009600:	2300      	movs	r3, #0
 8009602:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009606:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800960a:	460b      	mov	r3, r1
 800960c:	4313      	orrs	r3, r2
 800960e:	f000 809f 	beq.w	8009750 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009612:	4b4b      	ldr	r3, [pc, #300]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a4a      	ldr	r2, [pc, #296]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800961c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800961e:	f7fb fd4f 	bl	80050c0 <HAL_GetTick>
 8009622:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009626:	e00b      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009628:	f7fb fd4a 	bl	80050c0 <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b64      	cmp	r3, #100	; 0x64
 8009636:	d903      	bls.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800963e:	e005      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009640:	4b3f      	ldr	r3, [pc, #252]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009648:	2b00      	cmp	r3, #0
 800964a:	d0ed      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800964c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009650:	2b00      	cmp	r3, #0
 8009652:	d179      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009654:	4b39      	ldr	r3, [pc, #228]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009660:	4053      	eors	r3, r2
 8009662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009666:	2b00      	cmp	r3, #0
 8009668:	d015      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800966a:	4b34      	ldr	r3, [pc, #208]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800966c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009672:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009676:	4b31      	ldr	r3, [pc, #196]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967a:	4a30      	ldr	r2, [pc, #192]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800967c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009680:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009682:	4b2e      	ldr	r3, [pc, #184]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009686:	4a2d      	ldr	r2, [pc, #180]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800968c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800968e:	4a2b      	ldr	r2, [pc, #172]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009694:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800969e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a2:	d118      	bne.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a4:	f7fb fd0c 	bl	80050c0 <HAL_GetTick>
 80096a8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096ac:	e00d      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096ae:	f7fb fd07 	bl	80050c0 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80096b8:	1ad2      	subs	r2, r2, r3
 80096ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80096be:	429a      	cmp	r2, r3
 80096c0:	d903      	bls.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80096c8:	e005      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096ca:	4b1c      	ldr	r3, [pc, #112]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d0eb      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80096d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d129      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096ee:	d10e      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80096f0:	4b12      	ldr	r3, [pc, #72]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009700:	091a      	lsrs	r2, r3, #4
 8009702:	4b10      	ldr	r3, [pc, #64]	; (8009744 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009704:	4013      	ands	r3, r2
 8009706:	4a0d      	ldr	r2, [pc, #52]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009708:	430b      	orrs	r3, r1
 800970a:	6113      	str	r3, [r2, #16]
 800970c:	e005      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800970e:	4b0b      	ldr	r3, [pc, #44]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	4a0a      	ldr	r2, [pc, #40]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009714:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009718:	6113      	str	r3, [r2, #16]
 800971a:	4b08      	ldr	r3, [pc, #32]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800971c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800971e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009722:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800972a:	4a04      	ldr	r2, [pc, #16]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800972c:	430b      	orrs	r3, r1
 800972e:	6713      	str	r3, [r2, #112]	; 0x70
 8009730:	e00e      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800973a:	e009      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800973c:	58024400 	.word	0x58024400
 8009740:	58024800 	.word	0x58024800
 8009744:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800974c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f002 0301 	and.w	r3, r2, #1
 800975c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009760:	2300      	movs	r3, #0
 8009762:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009766:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800976a:	460b      	mov	r3, r1
 800976c:	4313      	orrs	r3, r2
 800976e:	f000 8089 	beq.w	8009884 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009778:	2b28      	cmp	r3, #40	; 0x28
 800977a:	d86b      	bhi.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800977c:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	0800985d 	.word	0x0800985d
 8009788:	08009855 	.word	0x08009855
 800978c:	08009855 	.word	0x08009855
 8009790:	08009855 	.word	0x08009855
 8009794:	08009855 	.word	0x08009855
 8009798:	08009855 	.word	0x08009855
 800979c:	08009855 	.word	0x08009855
 80097a0:	08009855 	.word	0x08009855
 80097a4:	08009829 	.word	0x08009829
 80097a8:	08009855 	.word	0x08009855
 80097ac:	08009855 	.word	0x08009855
 80097b0:	08009855 	.word	0x08009855
 80097b4:	08009855 	.word	0x08009855
 80097b8:	08009855 	.word	0x08009855
 80097bc:	08009855 	.word	0x08009855
 80097c0:	08009855 	.word	0x08009855
 80097c4:	0800983f 	.word	0x0800983f
 80097c8:	08009855 	.word	0x08009855
 80097cc:	08009855 	.word	0x08009855
 80097d0:	08009855 	.word	0x08009855
 80097d4:	08009855 	.word	0x08009855
 80097d8:	08009855 	.word	0x08009855
 80097dc:	08009855 	.word	0x08009855
 80097e0:	08009855 	.word	0x08009855
 80097e4:	0800985d 	.word	0x0800985d
 80097e8:	08009855 	.word	0x08009855
 80097ec:	08009855 	.word	0x08009855
 80097f0:	08009855 	.word	0x08009855
 80097f4:	08009855 	.word	0x08009855
 80097f8:	08009855 	.word	0x08009855
 80097fc:	08009855 	.word	0x08009855
 8009800:	08009855 	.word	0x08009855
 8009804:	0800985d 	.word	0x0800985d
 8009808:	08009855 	.word	0x08009855
 800980c:	08009855 	.word	0x08009855
 8009810:	08009855 	.word	0x08009855
 8009814:	08009855 	.word	0x08009855
 8009818:	08009855 	.word	0x08009855
 800981c:	08009855 	.word	0x08009855
 8009820:	08009855 	.word	0x08009855
 8009824:	0800985d 	.word	0x0800985d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982c:	3308      	adds	r3, #8
 800982e:	2101      	movs	r1, #1
 8009830:	4618      	mov	r0, r3
 8009832:	f001 fe95 	bl	800b560 <RCCEx_PLL2_Config>
 8009836:	4603      	mov	r3, r0
 8009838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800983c:	e00f      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009842:	3328      	adds	r3, #40	; 0x28
 8009844:	2101      	movs	r1, #1
 8009846:	4618      	mov	r0, r3
 8009848:	f001 ff3c 	bl	800b6c4 <RCCEx_PLL3_Config>
 800984c:	4603      	mov	r3, r0
 800984e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009852:	e004      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800985a:	e000      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800985c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800985e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009866:	4bbf      	ldr	r3, [pc, #764]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800986e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009874:	4abb      	ldr	r2, [pc, #748]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009876:	430b      	orrs	r3, r1
 8009878:	6553      	str	r3, [r2, #84]	; 0x54
 800987a:	e003      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009880:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	f002 0302 	and.w	r3, r2, #2
 8009890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009894:	2300      	movs	r3, #0
 8009896:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800989a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800989e:	460b      	mov	r3, r1
 80098a0:	4313      	orrs	r3, r2
 80098a2:	d041      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	d824      	bhi.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80098ae:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	08009901 	.word	0x08009901
 80098b8:	080098cd 	.word	0x080098cd
 80098bc:	080098e3 	.word	0x080098e3
 80098c0:	08009901 	.word	0x08009901
 80098c4:	08009901 	.word	0x08009901
 80098c8:	08009901 	.word	0x08009901
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d0:	3308      	adds	r3, #8
 80098d2:	2101      	movs	r1, #1
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 fe43 	bl	800b560 <RCCEx_PLL2_Config>
 80098da:	4603      	mov	r3, r0
 80098dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098e0:	e00f      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e6:	3328      	adds	r3, #40	; 0x28
 80098e8:	2101      	movs	r1, #1
 80098ea:	4618      	mov	r0, r3
 80098ec:	f001 feea 	bl	800b6c4 <RCCEx_PLL3_Config>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098f6:	e004      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098fe:	e000      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10a      	bne.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800990a:	4b96      	ldr	r3, [pc, #600]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800990c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990e:	f023 0107 	bic.w	r1, r3, #7
 8009912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009918:	4a92      	ldr	r2, [pc, #584]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800991a:	430b      	orrs	r3, r1
 800991c:	6553      	str	r3, [r2, #84]	; 0x54
 800991e:	e003      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009924:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f002 0304 	and.w	r3, r2, #4
 8009934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009938:	2300      	movs	r3, #0
 800993a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800993e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009942:	460b      	mov	r3, r1
 8009944:	4313      	orrs	r3, r2
 8009946:	d044      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009950:	2b05      	cmp	r3, #5
 8009952:	d825      	bhi.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009954:	a201      	add	r2, pc, #4	; (adr r2, 800995c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995a:	bf00      	nop
 800995c:	080099a9 	.word	0x080099a9
 8009960:	08009975 	.word	0x08009975
 8009964:	0800998b 	.word	0x0800998b
 8009968:	080099a9 	.word	0x080099a9
 800996c:	080099a9 	.word	0x080099a9
 8009970:	080099a9 	.word	0x080099a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009978:	3308      	adds	r3, #8
 800997a:	2101      	movs	r1, #1
 800997c:	4618      	mov	r0, r3
 800997e:	f001 fdef 	bl	800b560 <RCCEx_PLL2_Config>
 8009982:	4603      	mov	r3, r0
 8009984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009988:	e00f      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998e:	3328      	adds	r3, #40	; 0x28
 8009990:	2101      	movs	r1, #1
 8009992:	4618      	mov	r0, r3
 8009994:	f001 fe96 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009998:	4603      	mov	r3, r0
 800999a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800999e:	e004      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099a6:	e000      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80099a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099b2:	4b6c      	ldr	r3, [pc, #432]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b6:	f023 0107 	bic.w	r1, r3, #7
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099c2:	4a68      	ldr	r2, [pc, #416]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099c4:	430b      	orrs	r3, r1
 80099c6:	6593      	str	r3, [r2, #88]	; 0x58
 80099c8:	e003      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	f002 0320 	and.w	r3, r2, #32
 80099de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80099e2:	2300      	movs	r3, #0
 80099e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80099ec:	460b      	mov	r3, r1
 80099ee:	4313      	orrs	r3, r2
 80099f0:	d055      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80099f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099fe:	d033      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a04:	d82c      	bhi.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0a:	d02f      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a10:	d826      	bhi.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a16:	d02b      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009a18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a1c:	d820      	bhi.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a22:	d012      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a28:	d81a      	bhi.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d022      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a32:	d115      	bne.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a38:	3308      	adds	r3, #8
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 fd8f 	bl	800b560 <RCCEx_PLL2_Config>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a48:	e015      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4e:	3328      	adds	r3, #40	; 0x28
 8009a50:	2102      	movs	r1, #2
 8009a52:	4618      	mov	r0, r3
 8009a54:	f001 fe36 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a5e:	e00a      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a66:	e006      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a68:	bf00      	nop
 8009a6a:	e004      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a6c:	bf00      	nop
 8009a6e:	e002      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a70:	bf00      	nop
 8009a72:	e000      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10b      	bne.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a7e:	4b39      	ldr	r3, [pc, #228]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a82:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a8e:	4a35      	ldr	r2, [pc, #212]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a90:	430b      	orrs	r3, r1
 8009a92:	6553      	str	r3, [r2, #84]	; 0x54
 8009a94:	e003      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ab4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4313      	orrs	r3, r2
 8009abc:	d058      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ac6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009aca:	d033      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009acc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ad0:	d82c      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ad6:	d02f      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009adc:	d826      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ade:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ae2:	d02b      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009ae4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ae8:	d820      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aee:	d012      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009af4:	d81a      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d022      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009afe:	d115      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b04:	3308      	adds	r3, #8
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 fd29 	bl	800b560 <RCCEx_PLL2_Config>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b14:	e015      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1a:	3328      	adds	r3, #40	; 0x28
 8009b1c:	2102      	movs	r1, #2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f001 fdd0 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009b24:	4603      	mov	r3, r0
 8009b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b2a:	e00a      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b32:	e006      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b34:	bf00      	nop
 8009b36:	e004      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b38:	bf00      	nop
 8009b3a:	e002      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b3c:	bf00      	nop
 8009b3e:	e000      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10e      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b4a:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b4e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b5a:	4a02      	ldr	r2, [pc, #8]	; (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8009b60:	e006      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009b62:	bf00      	nop
 8009b64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	d055      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009b9c:	d033      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009b9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009ba2:	d82c      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba8:	d02f      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bae:	d826      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bb0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009bb4:	d02b      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009bb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009bba:	d820      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bc0:	d012      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bc6:	d81a      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d022      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bd0:	d115      	bne.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	2100      	movs	r1, #0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 fcc0 	bl	800b560 <RCCEx_PLL2_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009be6:	e015      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bec:	3328      	adds	r3, #40	; 0x28
 8009bee:	2102      	movs	r1, #2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f001 fd67 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009bfc:	e00a      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c04:	e006      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c06:	bf00      	nop
 8009c08:	e004      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c0a:	bf00      	nop
 8009c0c:	e002      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c0e:	bf00      	nop
 8009c10:	e000      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c1c:	4ba1      	ldr	r3, [pc, #644]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c20:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c2c:	4a9d      	ldr	r2, [pc, #628]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	6593      	str	r3, [r2, #88]	; 0x58
 8009c32:	e003      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f002 0308 	and.w	r3, r2, #8
 8009c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009c56:	460b      	mov	r3, r1
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	d01e      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c68:	d10c      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6e:	3328      	adds	r3, #40	; 0x28
 8009c70:	2102      	movs	r1, #2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f001 fd26 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009c84:	4b87      	ldr	r3, [pc, #540]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c94:	4a83      	ldr	r2, [pc, #524]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c96:	430b      	orrs	r3, r1
 8009c98:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f002 0310 	and.w	r3, r2, #16
 8009ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009caa:	2300      	movs	r3, #0
 8009cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009cb0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	d01e      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc6:	d10c      	bne.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ccc:	3328      	adds	r3, #40	; 0x28
 8009cce:	2102      	movs	r1, #2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 fcf7 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ce2:	4b70      	ldr	r3, [pc, #448]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cf2:	4a6c      	ldr	r2, [pc, #432]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009d12:	460b      	mov	r3, r1
 8009d14:	4313      	orrs	r3, r2
 8009d16:	d03e      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d24:	d022      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d2a:	d81b      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d34:	d00b      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009d36:	e015      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	2100      	movs	r1, #0
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 fc0d 	bl	800b560 <RCCEx_PLL2_Config>
 8009d46:	4603      	mov	r3, r0
 8009d48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d4c:	e00f      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d52:	3328      	adds	r3, #40	; 0x28
 8009d54:	2102      	movs	r1, #2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fcb4 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d62:	e004      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d6a:	e000      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10b      	bne.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d76:	4b4b      	ldr	r3, [pc, #300]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d7a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d86:	4a47      	ldr	r2, [pc, #284]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8009d8c:	e003      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009da2:	67bb      	str	r3, [r7, #120]	; 0x78
 8009da4:	2300      	movs	r3, #0
 8009da6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009da8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009dac:	460b      	mov	r3, r1
 8009dae:	4313      	orrs	r3, r2
 8009db0:	d03b      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009dbe:	d01f      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009dc4:	d818      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dca:	d003      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dd0:	d007      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009dd2:	e011      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd4:	4b33      	ldr	r3, [pc, #204]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	4a32      	ldr	r2, [pc, #200]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009de0:	e00f      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de6:	3328      	adds	r3, #40	; 0x28
 8009de8:	2101      	movs	r1, #1
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fc6a 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009df6:	e004      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dfe:	e000      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e0a:	4b26      	ldr	r3, [pc, #152]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1a:	4a22      	ldr	r2, [pc, #136]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	6553      	str	r3, [r2, #84]	; 0x54
 8009e20:	e003      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009e36:	673b      	str	r3, [r7, #112]	; 0x70
 8009e38:	2300      	movs	r3, #0
 8009e3a:	677b      	str	r3, [r7, #116]	; 0x74
 8009e3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009e40:	460b      	mov	r3, r1
 8009e42:	4313      	orrs	r3, r2
 8009e44:	d034      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e54:	d007      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009e56:	e011      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e58:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	4a11      	ldr	r2, [pc, #68]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e64:	e00e      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 fb76 	bl	800b560 <RCCEx_PLL2_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e7a:	e003      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10d      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e8c:	4b05      	ldr	r3, [pc, #20]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9a:	4a02      	ldr	r2, [pc, #8]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ea0:	e006      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009ea2:	bf00      	nop
 8009ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ec2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	d00c      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed0:	3328      	adds	r3, #40	; 0x28
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fbf5 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	667b      	str	r3, [r7, #100]	; 0x64
 8009ef8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009efc:	460b      	mov	r3, r1
 8009efe:	4313      	orrs	r3, r2
 8009f00:	d038      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f0e:	d018      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f14:	d811      	bhi.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f1a:	d014      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f20:	d80b      	bhi.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d011      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f2a:	d106      	bne.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f2c:	4bc3      	ldr	r3, [pc, #780]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f30:	4ac2      	ldr	r2, [pc, #776]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009f38:	e008      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f40:	e004      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f42:	bf00      	nop
 8009f44:	e002      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f46:	bf00      	nop
 8009f48:	e000      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10b      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f54:	4bb9      	ldr	r3, [pc, #740]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f64:	4ab5      	ldr	r2, [pc, #724]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f66:	430b      	orrs	r3, r1
 8009f68:	6553      	str	r3, [r2, #84]	; 0x54
 8009f6a:	e003      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009f80:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f82:	2300      	movs	r3, #0
 8009f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	d009      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f90:	4baa      	ldr	r3, [pc, #680]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f9e:	4aa7      	ldr	r2, [pc, #668]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fa0:	430b      	orrs	r3, r1
 8009fa2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	657b      	str	r3, [r7, #84]	; 0x54
 8009fb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	d00a      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009fc0:	4b9e      	ldr	r3, [pc, #632]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009fd0:	4a9a      	ldr	r2, [pc, #616]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fd2:	430b      	orrs	r3, r1
 8009fd4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fe8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009fec:	460b      	mov	r3, r1
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	d009      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ff2:	4b92      	ldr	r3, [pc, #584]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a000:	4a8e      	ldr	r2, [pc, #568]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a002:	430b      	orrs	r3, r1
 800a004:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a012:	643b      	str	r3, [r7, #64]	; 0x40
 800a014:	2300      	movs	r3, #0
 800a016:	647b      	str	r3, [r7, #68]	; 0x44
 800a018:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a01c:	460b      	mov	r3, r1
 800a01e:	4313      	orrs	r3, r2
 800a020:	d00e      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a022:	4b86      	ldr	r3, [pc, #536]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	4a85      	ldr	r2, [pc, #532]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a028:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a02c:	6113      	str	r3, [r2, #16]
 800a02e:	4b83      	ldr	r3, [pc, #524]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a030:	6919      	ldr	r1, [r3, #16]
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a036:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a03a:	4a80      	ldr	r2, [pc, #512]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a03c:	430b      	orrs	r3, r1
 800a03e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a04c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a04e:	2300      	movs	r3, #0
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a052:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a056:	460b      	mov	r3, r1
 800a058:	4313      	orrs	r3, r2
 800a05a:	d009      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a05c:	4b77      	ldr	r3, [pc, #476]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a060:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a06a:	4a74      	ldr	r2, [pc, #464]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a06c:	430b      	orrs	r3, r1
 800a06e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a07c:	633b      	str	r3, [r7, #48]	; 0x30
 800a07e:	2300      	movs	r3, #0
 800a080:	637b      	str	r3, [r7, #52]	; 0x34
 800a082:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a086:	460b      	mov	r3, r1
 800a088:	4313      	orrs	r3, r2
 800a08a:	d00a      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a08c:	4b6b      	ldr	r3, [pc, #428]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a090:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a09c:	4a67      	ldr	r2, [pc, #412]	; (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a09e:	430b      	orrs	r3, r1
 800a0a0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	62b9      	str	r1, [r7, #40]	; 0x28
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	d011      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 fa4a 	bl	800b560 <RCCEx_PLL2_Config>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	6239      	str	r1, [r7, #32]
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	d011      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a102:	3308      	adds	r3, #8
 800a104:	2101      	movs	r1, #1
 800a106:	4618      	mov	r0, r3
 800a108:	f001 fa2a 	bl	800b560 <RCCEx_PLL2_Config>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a11a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a11e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	2100      	movs	r1, #0
 800a12c:	61b9      	str	r1, [r7, #24]
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	61fb      	str	r3, [r7, #28]
 800a134:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a138:	460b      	mov	r3, r1
 800a13a:	4313      	orrs	r3, r2
 800a13c:	d011      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a142:	3308      	adds	r3, #8
 800a144:	2102      	movs	r1, #2
 800a146:	4618      	mov	r0, r3
 800a148:	f001 fa0a 	bl	800b560 <RCCEx_PLL2_Config>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a15e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	2100      	movs	r1, #0
 800a16c:	6139      	str	r1, [r7, #16]
 800a16e:	f003 0308 	and.w	r3, r3, #8
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a178:	460b      	mov	r3, r1
 800a17a:	4313      	orrs	r3, r2
 800a17c:	d011      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a182:	3328      	adds	r3, #40	; 0x28
 800a184:	2100      	movs	r1, #0
 800a186:	4618      	mov	r0, r3
 800a188:	f001 fa9c 	bl	800b6c4 <RCCEx_PLL3_Config>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a19a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a19e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	f003 0310 	and.w	r3, r3, #16
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	d011      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c2:	3328      	adds	r3, #40	; 0x28
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f001 fa7c 	bl	800b6c4 <RCCEx_PLL3_Config>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	6039      	str	r1, [r7, #0]
 800a1ee:	f003 0320 	and.w	r3, r3, #32
 800a1f2:	607b      	str	r3, [r7, #4]
 800a1f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	d011      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a202:	3328      	adds	r3, #40	; 0x28
 800a204:	2102      	movs	r1, #2
 800a206:	4618      	mov	r0, r3
 800a208:	f001 fa5c 	bl	800b6c4 <RCCEx_PLL3_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a21e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a222:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e000      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
}
 800a230:	4618      	mov	r0, r3
 800a232:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a236:	46bd      	mov	sp, r7
 800a238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a23c:	58024400 	.word	0x58024400

0800a240 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b090      	sub	sp, #64	; 0x40
 800a244:	af00      	add	r7, sp, #0
 800a246:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a24e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a252:	430b      	orrs	r3, r1
 800a254:	f040 8094 	bne.w	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a258:	4b9e      	ldr	r3, [pc, #632]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a25a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	2b04      	cmp	r3, #4
 800a266:	f200 8087 	bhi.w	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a26a:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a270:	0800a285 	.word	0x0800a285
 800a274:	0800a2ad 	.word	0x0800a2ad
 800a278:	0800a2d5 	.word	0x0800a2d5
 800a27c:	0800a371 	.word	0x0800a371
 800a280:	0800a2fd 	.word	0x0800a2fd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a284:	4b93      	ldr	r3, [pc, #588]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a28c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a290:	d108      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a296:	4618      	mov	r0, r3
 800a298:	f001 f810 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2a0:	f000 bd45 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a8:	f000 bd41 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ac:	4b89      	ldr	r3, [pc, #548]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2b8:	d108      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ba:	f107 0318 	add.w	r3, r7, #24
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 fd54 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2c8:	f000 bd31 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d0:	f000 bd2d 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2d4:	4b7f      	ldr	r3, [pc, #508]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2e0:	d108      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2e2:	f107 030c 	add.w	r3, r7, #12
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 fe94 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2f0:	f000 bd1d 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2f8:	f000 bd19 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2fc:	4b75      	ldr	r3, [pc, #468]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a304:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a306:	4b73      	ldr	r3, [pc, #460]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0304 	and.w	r3, r3, #4
 800a30e:	2b04      	cmp	r3, #4
 800a310:	d10c      	bne.n	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a314:	2b00      	cmp	r3, #0
 800a316:	d109      	bne.n	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a318:	4b6e      	ldr	r3, [pc, #440]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	08db      	lsrs	r3, r3, #3
 800a31e:	f003 0303 	and.w	r3, r3, #3
 800a322:	4a6d      	ldr	r2, [pc, #436]	; (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a324:	fa22 f303 	lsr.w	r3, r2, r3
 800a328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a32a:	e01f      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a32c:	4b69      	ldr	r3, [pc, #420]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a338:	d106      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a33c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a340:	d102      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a342:	4b66      	ldr	r3, [pc, #408]	; (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a344:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a346:	e011      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a348:	4b62      	ldr	r3, [pc, #392]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a354:	d106      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a35c:	d102      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a35e:	4b60      	ldr	r3, [pc, #384]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a362:	e003      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a368:	f000 bce1 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a36c:	f000 bcdf 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a370:	4b5c      	ldr	r3, [pc, #368]	; (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a374:	f000 bcdb 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a378:	2300      	movs	r3, #0
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a37c:	f000 bcd7 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a384:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a388:	430b      	orrs	r3, r1
 800a38a:	f040 80ad 	bne.w	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a38e:	4b51      	ldr	r3, [pc, #324]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a392:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a396:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39e:	d056      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3a6:	f200 8090 	bhi.w	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	2bc0      	cmp	r3, #192	; 0xc0
 800a3ae:	f000 8088 	beq.w	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	2bc0      	cmp	r3, #192	; 0xc0
 800a3b6:	f200 8088 	bhi.w	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	2b80      	cmp	r3, #128	; 0x80
 800a3be:	d032      	beq.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	2b80      	cmp	r3, #128	; 0x80
 800a3c4:	f200 8081 	bhi.w	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	2b40      	cmp	r3, #64	; 0x40
 800a3d2:	d014      	beq.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a3d4:	e079      	b.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3d6:	4b3f      	ldr	r3, [pc, #252]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3e2:	d108      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 ff67 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f2:	f000 bc9c 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3fa:	f000 bc98 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3fe:	4b35      	ldr	r3, [pc, #212]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a40a:	d108      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40c:	f107 0318 	add.w	r3, r7, #24
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fcab 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a41a:	f000 bc88 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a422:	f000 bc84 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a426:	4b2b      	ldr	r3, [pc, #172]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a432:	d108      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a434:	f107 030c 	add.w	r3, r7, #12
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fdeb 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a442:	f000 bc74 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a44a:	f000 bc70 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a44e:	4b21      	ldr	r3, [pc, #132]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a456:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a458:	4b1e      	ldr	r3, [pc, #120]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b04      	cmp	r3, #4
 800a462:	d10c      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a466:	2b00      	cmp	r3, #0
 800a468:	d109      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a46a:	4b1a      	ldr	r3, [pc, #104]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	08db      	lsrs	r3, r3, #3
 800a470:	f003 0303 	and.w	r3, r3, #3
 800a474:	4a18      	ldr	r2, [pc, #96]	; (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a476:	fa22 f303 	lsr.w	r3, r2, r3
 800a47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a47c:	e01f      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a47e:	4b15      	ldr	r3, [pc, #84]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48a:	d106      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a492:	d102      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a494:	4b11      	ldr	r3, [pc, #68]	; (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a498:	e011      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a49a:	4b0e      	ldr	r3, [pc, #56]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4a6:	d106      	bne.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ae:	d102      	bne.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4b4:	e003      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a4ba:	f000 bc38 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4be:	f000 bc36 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4c2:	4b08      	ldr	r3, [pc, #32]	; (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4c6:	f000 bc32 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ce:	f000 bc2e 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4d2:	bf00      	nop
 800a4d4:	58024400 	.word	0x58024400
 800a4d8:	03d09000 	.word	0x03d09000
 800a4dc:	003d0900 	.word	0x003d0900
 800a4e0:	007a1200 	.word	0x007a1200
 800a4e4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	f040 809c 	bne.w	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a4f6:	4b9e      	ldr	r3, [pc, #632]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a4fe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a506:	d054      	beq.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a50e:	f200 808b 	bhi.w	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a518:	f000 8083 	beq.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a522:	f200 8081 	bhi.w	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a52c:	d02f      	beq.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a534:	d878      	bhi.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d004      	beq.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a542:	d012      	beq.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a544:	e070      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a546:	4b8a      	ldr	r3, [pc, #552]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a54e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a552:	d107      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 feaf 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a562:	e3e4      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a568:	e3e1      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a56a:	4b81      	ldr	r3, [pc, #516]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a576:	d107      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a578:	f107 0318 	add.w	r3, r7, #24
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 fbf5 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a586:	e3d2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a58c:	e3cf      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a58e:	4b78      	ldr	r3, [pc, #480]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a59a:	d107      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a59c:	f107 030c 	add.w	r3, r7, #12
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 fd37 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5aa:	e3c0      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5b0:	e3bd      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5b2:	4b6f      	ldr	r3, [pc, #444]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5ba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5bc:	4b6c      	ldr	r3, [pc, #432]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d10c      	bne.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d109      	bne.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5ce:	4b68      	ldr	r3, [pc, #416]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	08db      	lsrs	r3, r3, #3
 800a5d4:	f003 0303 	and.w	r3, r3, #3
 800a5d8:	4a66      	ldr	r2, [pc, #408]	; (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a5da:	fa22 f303 	lsr.w	r3, r2, r3
 800a5de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e0:	e01e      	b.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5e2:	4b63      	ldr	r3, [pc, #396]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ee:	d106      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5f6:	d102      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5f8:	4b5f      	ldr	r3, [pc, #380]	; (800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5fc:	e010      	b.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5fe:	4b5c      	ldr	r3, [pc, #368]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a60a:	d106      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a60e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a612:	d102      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a614:	4b59      	ldr	r3, [pc, #356]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a618:	e002      	b.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a61e:	e386      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a620:	e385      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a622:	4b57      	ldr	r3, [pc, #348]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a626:	e382      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a62c:	e37f      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a62e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a632:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a636:	430b      	orrs	r3, r1
 800a638:	f040 80a7 	bne.w	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a63c:	4b4c      	ldr	r3, [pc, #304]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a640:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a644:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a64c:	d055      	beq.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a654:	f200 8096 	bhi.w	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a65e:	f000 8084 	beq.w	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a668:	f200 808c 	bhi.w	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a672:	d030      	beq.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a67a:	f200 8083 	bhi.w	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	2b00      	cmp	r3, #0
 800a682:	d004      	beq.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a68a:	d012      	beq.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a68c:	e07a      	b.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a68e:	4b38      	ldr	r3, [pc, #224]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a69a:	d107      	bne.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a69c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 fe0b 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6aa:	e340      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6b0:	e33d      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6b2:	4b2f      	ldr	r3, [pc, #188]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6be:	d107      	bne.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6c0:	f107 0318 	add.w	r3, r7, #24
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 fb51 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ce:	e32e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d4:	e32b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6d6:	4b26      	ldr	r3, [pc, #152]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6e2:	d107      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6e4:	f107 030c 	add.w	r3, r7, #12
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 fc93 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f2:	e31c      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6f8:	e319      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6fa:	4b1d      	ldr	r3, [pc, #116]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a702:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a704:	4b1a      	ldr	r3, [pc, #104]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d10c      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a712:	2b00      	cmp	r3, #0
 800a714:	d109      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a716:	4b16      	ldr	r3, [pc, #88]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	08db      	lsrs	r3, r3, #3
 800a71c:	f003 0303 	and.w	r3, r3, #3
 800a720:	4a14      	ldr	r2, [pc, #80]	; (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a722:	fa22 f303 	lsr.w	r3, r2, r3
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a728:	e01e      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a72a:	4b11      	ldr	r3, [pc, #68]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a736:	d106      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a73e:	d102      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a740:	4b0d      	ldr	r3, [pc, #52]	; (800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a744:	e010      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a746:	4b0a      	ldr	r3, [pc, #40]	; (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a74e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a752:	d106      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a75a:	d102      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a75c:	4b07      	ldr	r3, [pc, #28]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a760:	e002      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a766:	e2e2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a768:	e2e1      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a76a:	4b05      	ldr	r3, [pc, #20]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a76e:	e2de      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a770:	58024400 	.word	0x58024400
 800a774:	03d09000 	.word	0x03d09000
 800a778:	003d0900 	.word	0x003d0900
 800a77c:	007a1200 	.word	0x007a1200
 800a780:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a788:	e2d1      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a78a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a78e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a792:	430b      	orrs	r3, r1
 800a794:	f040 809c 	bne.w	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a798:	4b93      	ldr	r3, [pc, #588]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a7a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7a8:	d054      	beq.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7b0:	f200 808b 	bhi.w	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7ba:	f000 8083 	beq.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7c4:	f200 8081 	bhi.w	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7ce:	d02f      	beq.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7d6:	d878      	bhi.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d004      	beq.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7e4:	d012      	beq.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a7e6:	e070      	b.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7e8:	4b7f      	ldr	r3, [pc, #508]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7f4:	d107      	bne.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fd5e 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a804:	e293      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a80a:	e290      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a80c:	4b76      	ldr	r3, [pc, #472]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a818:	d107      	bne.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a81a:	f107 0318 	add.w	r3, r7, #24
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 faa4 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a828:	e281      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a82e:	e27e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a830:	4b6d      	ldr	r3, [pc, #436]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a83c:	d107      	bne.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a83e:	f107 030c 	add.w	r3, r7, #12
 800a842:	4618      	mov	r0, r3
 800a844:	f000 fbe6 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a84c:	e26f      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a852:	e26c      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a854:	4b64      	ldr	r3, [pc, #400]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a85c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a85e:	4b62      	ldr	r3, [pc, #392]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0304 	and.w	r3, r3, #4
 800a866:	2b04      	cmp	r3, #4
 800a868:	d10c      	bne.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d109      	bne.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a870:	4b5d      	ldr	r3, [pc, #372]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	08db      	lsrs	r3, r3, #3
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	4a5c      	ldr	r2, [pc, #368]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a87c:	fa22 f303 	lsr.w	r3, r2, r3
 800a880:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a882:	e01e      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a884:	4b58      	ldr	r3, [pc, #352]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a890:	d106      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a898:	d102      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a89a:	4b55      	ldr	r3, [pc, #340]	; (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a89c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a89e:	e010      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8a0:	4b51      	ldr	r3, [pc, #324]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8ac:	d106      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8b4:	d102      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8b6:	4b4f      	ldr	r3, [pc, #316]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ba:	e002      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a8c0:	e235      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8c2:	e234      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8c4:	4b4c      	ldr	r3, [pc, #304]	; (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8c8:	e231      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ce:	e22e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	f040 808f 	bne.w	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a8de:	4b42      	ldr	r3, [pc, #264]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a8e6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8ee:	d06b      	beq.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8f6:	d874      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8fe:	d056      	beq.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a906:	d86c      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a90e:	d03b      	beq.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a916:	d864      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a91e:	d021      	beq.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a926:	d85c      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a934:	d004      	beq.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a936:	e054      	b.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a938:	f7fe fa4c 	bl	8008dd4 <HAL_RCC_GetPCLK1Freq>
 800a93c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a93e:	e1f6      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a940:	4b29      	ldr	r3, [pc, #164]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a94c:	d107      	bne.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a94e:	f107 0318 	add.w	r3, r7, #24
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fa0a 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a95c:	e1e7      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a962:	e1e4      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a964:	4b20      	ldr	r3, [pc, #128]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a96c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a970:	d107      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a972:	f107 030c 	add.w	r3, r7, #12
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fb4c 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a980:	e1d5      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a986:	e1d2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a988:	4b17      	ldr	r3, [pc, #92]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b04      	cmp	r3, #4
 800a992:	d109      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a994:	4b14      	ldr	r3, [pc, #80]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	08db      	lsrs	r3, r3, #3
 800a99a:	f003 0303 	and.w	r3, r3, #3
 800a99e:	4a13      	ldr	r2, [pc, #76]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a9a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a6:	e1c2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ac:	e1bf      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a9ae:	4b0e      	ldr	r3, [pc, #56]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ba:	d102      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a9bc:	4b0c      	ldr	r3, [pc, #48]	; (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c0:	e1b5      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9c6:	e1b2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a9c8:	4b07      	ldr	r3, [pc, #28]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9d4:	d102      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a9d6:	4b07      	ldr	r3, [pc, #28]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9da:	e1a8      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9e0:	e1a5      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9e6:	e1a2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9e8:	58024400 	.word	0x58024400
 800a9ec:	03d09000 	.word	0x03d09000
 800a9f0:	003d0900 	.word	0x003d0900
 800a9f4:	007a1200 	.word	0x007a1200
 800a9f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a9fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa00:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800aa04:	430b      	orrs	r3, r1
 800aa06:	d173      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aa08:	4b9c      	ldr	r3, [pc, #624]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa18:	d02f      	beq.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa20:	d863      	bhi.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa2e:	d012      	beq.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aa30:	e05b      	b.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa32:	4b92      	ldr	r3, [pc, #584]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa3e:	d107      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa40:	f107 0318 	add.w	r3, r7, #24
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 f991 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4e:	e16e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa54:	e16b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa56:	4b89      	ldr	r3, [pc, #548]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa62:	d107      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa64:	f107 030c 	add.w	r3, r7, #12
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fad3 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa72:	e15c      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa78:	e159      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa7a:	4b80      	ldr	r3, [pc, #512]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa84:	4b7d      	ldr	r3, [pc, #500]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d10c      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aa90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d109      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa96:	4b79      	ldr	r3, [pc, #484]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	08db      	lsrs	r3, r3, #3
 800aa9c:	f003 0303 	and.w	r3, r3, #3
 800aaa0:	4a77      	ldr	r2, [pc, #476]	; (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aaa2:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaa8:	e01e      	b.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aaaa:	4b74      	ldr	r3, [pc, #464]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aab6:	d106      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800aab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aabe:	d102      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aac0:	4b70      	ldr	r3, [pc, #448]	; (800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aac4:	e010      	b.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aac6:	4b6d      	ldr	r3, [pc, #436]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aad2:	d106      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800aad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aada:	d102      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aadc:	4b6a      	ldr	r3, [pc, #424]	; (800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae0:	e002      	b.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aae6:	e122      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aae8:	e121      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaee:	e11e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aaf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaf4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	d133      	bne.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aafc:	4b5f      	ldr	r3, [pc, #380]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aafe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab04:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ab06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d004      	beq.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab12:	d012      	beq.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ab14:	e023      	b.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab16:	4b59      	ldr	r3, [pc, #356]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab22:	d107      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fbc7 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab32:	e0fc      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab38:	e0f9      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab3a:	4b50      	ldr	r3, [pc, #320]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab46:	d107      	bne.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab48:	f107 0318 	add.w	r3, r7, #24
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 f90d 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab56:	e0ea      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5c:	e0e7      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab62:	e0e4      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ab64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab68:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	f040 808d 	bne.w	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ab72:	4b42      	ldr	r3, [pc, #264]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab76:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ab7a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab82:	d06b      	beq.n	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ab84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab8a:	d874      	bhi.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab92:	d056      	beq.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ab94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab9a:	d86c      	bhi.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aba2:	d03b      	beq.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abaa:	d864      	bhi.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abb2:	d021      	beq.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800abb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abba:	d85c      	bhi.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d004      	beq.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800abc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abc8:	d004      	beq.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800abca:	e054      	b.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800abcc:	f000 f8b8 	bl	800ad40 <HAL_RCCEx_GetD3PCLK1Freq>
 800abd0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abd2:	e0ac      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abd4:	4b29      	ldr	r3, [pc, #164]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abe0:	d107      	bne.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abe2:	f107 0318 	add.w	r3, r7, #24
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 f8c0 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf0:	e09d      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf6:	e09a      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abf8:	4b20      	ldr	r3, [pc, #128]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac04:	d107      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac06:	f107 030c 	add.w	r3, r7, #12
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 fa02 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac14:	e08b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac1a:	e088      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac1c:	4b17      	ldr	r3, [pc, #92]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0304 	and.w	r3, r3, #4
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d109      	bne.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac28:	4b14      	ldr	r3, [pc, #80]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	08db      	lsrs	r3, r3, #3
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	4a13      	ldr	r2, [pc, #76]	; (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac34:	fa22 f303 	lsr.w	r3, r2, r3
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac3a:	e078      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac40:	e075      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac42:	4b0e      	ldr	r3, [pc, #56]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4e:	d102      	bne.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ac50:	4b0c      	ldr	r3, [pc, #48]	; (800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ac52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac54:	e06b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac5a:	e068      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac5c:	4b07      	ldr	r3, [pc, #28]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac68:	d102      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ac6a:	4b07      	ldr	r3, [pc, #28]	; (800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6e:	e05e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac74:	e05b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac7a:	e058      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac7c:	58024400 	.word	0x58024400
 800ac80:	03d09000 	.word	0x03d09000
 800ac84:	003d0900 	.word	0x003d0900
 800ac88:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ac8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac90:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ac94:	430b      	orrs	r3, r1
 800ac96:	d148      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ac98:	4b27      	ldr	r3, [pc, #156]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aca0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aca8:	d02a      	beq.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800acaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acb0:	d838      	bhi.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800acb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acbe:	d00d      	beq.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800acc0:	e030      	b.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acc2:	4b1d      	ldr	r3, [pc, #116]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acce:	d102      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800acd0:	4b1a      	ldr	r3, [pc, #104]	; (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd4:	e02b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acda:	e028      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acdc:	4b16      	ldr	r3, [pc, #88]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ace8:	d107      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fae4 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf8:	e019      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfe:	e016      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad00:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad0c:	d107      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad0e:	f107 0318 	add.w	r3, r7, #24
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 f82a 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad1c:	e007      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad22:	e004      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad28:	e001      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ad2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3740      	adds	r7, #64	; 0x40
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	58024400 	.word	0x58024400
 800ad3c:	007a1200 	.word	0x007a1200

0800ad40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad44:	f7fe f816 	bl	8008d74 <HAL_RCC_GetHCLKFreq>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	091b      	lsrs	r3, r3, #4
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	4904      	ldr	r1, [pc, #16]	; (800ad68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ad56:	5ccb      	ldrb	r3, [r1, r3]
 800ad58:	f003 031f 	and.w	r3, r3, #31
 800ad5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	58024400 	.word	0x58024400
 800ad68:	0800fbc4 	.word	0x0800fbc4

0800ad6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b089      	sub	sp, #36	; 0x24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad74:	4ba1      	ldr	r3, [pc, #644]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad78:	f003 0303 	and.w	r3, r3, #3
 800ad7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ad7e:	4b9f      	ldr	r3, [pc, #636]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad82:	0b1b      	lsrs	r3, r3, #12
 800ad84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad8a:	4b9c      	ldr	r3, [pc, #624]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8e:	091b      	lsrs	r3, r3, #4
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ad96:	4b99      	ldr	r3, [pc, #612]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9a:	08db      	lsrs	r3, r3, #3
 800ad9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	fb02 f303 	mul.w	r3, r2, r3
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 8111 	beq.w	800afdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	f000 8083 	beq.w	800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	f200 80a1 	bhi.w	800af0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d056      	beq.n	800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800add6:	e099      	b.n	800af0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800add8:	4b88      	ldr	r3, [pc, #544]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d02d      	beq.n	800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ade4:	4b85      	ldr	r3, [pc, #532]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	08db      	lsrs	r3, r3, #3
 800adea:	f003 0303 	and.w	r3, r3, #3
 800adee:	4a84      	ldr	r2, [pc, #528]	; (800b000 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800adf0:	fa22 f303 	lsr.w	r3, r2, r3
 800adf4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	ee07 3a90 	vmov	s15, r3
 800adfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0e:	4b7b      	ldr	r3, [pc, #492]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae22:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae3e:	e087      	b.n	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b008 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ae4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae52:	4b6a      	ldr	r3, [pc, #424]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5a:	ee07 3a90 	vmov	s15, r3
 800ae5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae66:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae82:	e065      	b.n	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae96:	4b59      	ldr	r3, [pc, #356]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9e:	ee07 3a90 	vmov	s15, r3
 800aea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aec6:	e043      	b.n	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeda:	4b48      	ldr	r3, [pc, #288]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeea:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aefa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aefe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af0a:	e021      	b.n	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	ee07 3a90 	vmov	s15, r3
 800af12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1e:	4b37      	ldr	r3, [pc, #220]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af32:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800af50:	4b2a      	ldr	r3, [pc, #168]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af54:	0a5b      	lsrs	r3, r3, #9
 800af56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800af6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af76:	ee17 2a90 	vmov	r2, s15
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800af7e:	4b1f      	ldr	r3, [pc, #124]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af82:	0c1b      	lsrs	r3, r3, #16
 800af84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af88:	ee07 3a90 	vmov	s15, r3
 800af8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af98:	edd7 6a07 	vldr	s13, [r7, #28]
 800af9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afa4:	ee17 2a90 	vmov	r2, s15
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800afac:	4b13      	ldr	r3, [pc, #76]	; (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb0:	0e1b      	lsrs	r3, r3, #24
 800afb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afb6:	ee07 3a90 	vmov	s15, r3
 800afba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd2:	ee17 2a90 	vmov	r2, s15
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800afda:	e008      	b.n	800afee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	609a      	str	r2, [r3, #8]
}
 800afee:	bf00      	nop
 800aff0:	3724      	adds	r7, #36	; 0x24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	58024400 	.word	0x58024400
 800b000:	03d09000 	.word	0x03d09000
 800b004:	46000000 	.word	0x46000000
 800b008:	4c742400 	.word	0x4c742400
 800b00c:	4a742400 	.word	0x4a742400
 800b010:	4af42400 	.word	0x4af42400

0800b014 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b014:	b480      	push	{r7}
 800b016:	b089      	sub	sp, #36	; 0x24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b01c:	4ba1      	ldr	r3, [pc, #644]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b020:	f003 0303 	and.w	r3, r3, #3
 800b024:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b026:	4b9f      	ldr	r3, [pc, #636]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b02a:	0d1b      	lsrs	r3, r3, #20
 800b02c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b030:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b032:	4b9c      	ldr	r3, [pc, #624]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b036:	0a1b      	lsrs	r3, r3, #8
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b03e:	4b99      	ldr	r3, [pc, #612]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b042:	08db      	lsrs	r3, r3, #3
 800b044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	fb02 f303 	mul.w	r3, r2, r3
 800b04e:	ee07 3a90 	vmov	s15, r3
 800b052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b056:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 8111 	beq.w	800b284 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	2b02      	cmp	r3, #2
 800b066:	f000 8083 	beq.w	800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	f200 80a1 	bhi.w	800b1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d003      	beq.n	800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d056      	beq.n	800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b07e:	e099      	b.n	800b1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b080:	4b88      	ldr	r3, [pc, #544]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d02d      	beq.n	800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b08c:	4b85      	ldr	r3, [pc, #532]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	08db      	lsrs	r3, r3, #3
 800b092:	f003 0303 	and.w	r3, r3, #3
 800b096:	4a84      	ldr	r2, [pc, #528]	; (800b2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b098:	fa22 f303 	lsr.w	r3, r2, r3
 800b09c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	ee07 3a90 	vmov	s15, r3
 800b0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b6:	4b7b      	ldr	r3, [pc, #492]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0e6:	e087      	b.n	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	ee07 3a90 	vmov	s15, r3
 800b0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fa:	4b6a      	ldr	r3, [pc, #424]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b10e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b12a:	e065      	b.n	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	ee07 3a90 	vmov	s15, r3
 800b132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b136:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b13e:	4b59      	ldr	r3, [pc, #356]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b146:	ee07 3a90 	vmov	s15, r3
 800b14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b152:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b16e:	e043      	b.n	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b182:	4b48      	ldr	r3, [pc, #288]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b192:	ed97 6a03 	vldr	s12, [r7, #12]
 800b196:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1b2:	e021      	b.n	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1c6:	4b37      	ldr	r3, [pc, #220]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b1f8:	4b2a      	ldr	r3, [pc, #168]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	0a5b      	lsrs	r3, r3, #9
 800b1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b202:	ee07 3a90 	vmov	s15, r3
 800b206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b20e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b212:	edd7 6a07 	vldr	s13, [r7, #28]
 800b216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b21a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b21e:	ee17 2a90 	vmov	r2, s15
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b226:	4b1f      	ldr	r3, [pc, #124]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22a:	0c1b      	lsrs	r3, r3, #16
 800b22c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b230:	ee07 3a90 	vmov	s15, r3
 800b234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b23c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b240:	edd7 6a07 	vldr	s13, [r7, #28]
 800b244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b24c:	ee17 2a90 	vmov	r2, s15
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b254:	4b13      	ldr	r3, [pc, #76]	; (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b258:	0e1b      	lsrs	r3, r3, #24
 800b25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b25e:	ee07 3a90 	vmov	s15, r3
 800b262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b26a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b26e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b27a:	ee17 2a90 	vmov	r2, s15
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b282:	e008      	b.n	800b296 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	609a      	str	r2, [r3, #8]
}
 800b296:	bf00      	nop
 800b298:	3724      	adds	r7, #36	; 0x24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	58024400 	.word	0x58024400
 800b2a8:	03d09000 	.word	0x03d09000
 800b2ac:	46000000 	.word	0x46000000
 800b2b0:	4c742400 	.word	0x4c742400
 800b2b4:	4a742400 	.word	0x4a742400
 800b2b8:	4af42400 	.word	0x4af42400

0800b2bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b089      	sub	sp, #36	; 0x24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2c4:	4ba0      	ldr	r3, [pc, #640]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c8:	f003 0303 	and.w	r3, r3, #3
 800b2cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b2ce:	4b9e      	ldr	r3, [pc, #632]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d2:	091b      	lsrs	r3, r3, #4
 800b2d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b2da:	4b9b      	ldr	r3, [pc, #620]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b2e4:	4b98      	ldr	r3, [pc, #608]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e8:	08db      	lsrs	r3, r3, #3
 800b2ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2ee:	693a      	ldr	r2, [r7, #16]
 800b2f0:	fb02 f303 	mul.w	r3, r2, r3
 800b2f4:	ee07 3a90 	vmov	s15, r3
 800b2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	2b00      	cmp	r3, #0
 800b304:	f000 8111 	beq.w	800b52a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	f000 8083 	beq.w	800b416 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	2b02      	cmp	r3, #2
 800b314:	f200 80a1 	bhi.w	800b45a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d056      	beq.n	800b3d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b324:	e099      	b.n	800b45a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b326:	4b88      	ldr	r3, [pc, #544]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d02d      	beq.n	800b38e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b332:	4b85      	ldr	r3, [pc, #532]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	08db      	lsrs	r3, r3, #3
 800b338:	f003 0303 	and.w	r3, r3, #3
 800b33c:	4a83      	ldr	r2, [pc, #524]	; (800b54c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b33e:	fa22 f303 	lsr.w	r3, r2, r3
 800b342:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	ee07 3a90 	vmov	s15, r3
 800b354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35c:	4b7a      	ldr	r3, [pc, #488]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b364:	ee07 3a90 	vmov	s15, r3
 800b368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b370:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b384:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b388:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b38c:	e087      	b.n	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	ee07 3a90 	vmov	s15, r3
 800b394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b398:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b554 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b39c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a0:	4b69      	ldr	r3, [pc, #420]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a8:	ee07 3a90 	vmov	s15, r3
 800b3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d0:	e065      	b.n	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	ee07 3a90 	vmov	s15, r3
 800b3d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b558 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b3e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e4:	4b58      	ldr	r3, [pc, #352]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ec:	ee07 3a90 	vmov	s15, r3
 800b3f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b410:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b414:	e043      	b.n	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	ee07 3a90 	vmov	s15, r3
 800b41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b420:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b55c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b428:	4b47      	ldr	r3, [pc, #284]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b430:	ee07 3a90 	vmov	s15, r3
 800b434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b438:	ed97 6a03 	vldr	s12, [r7, #12]
 800b43c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b44c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b454:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b458:	e021      	b.n	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	ee07 3a90 	vmov	s15, r3
 800b460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b464:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b554 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46c:	4b36      	ldr	r3, [pc, #216]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b474:	ee07 3a90 	vmov	s15, r3
 800b478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b480:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b494:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b498:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b49c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b49e:	4b2a      	ldr	r3, [pc, #168]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a2:	0a5b      	lsrs	r3, r3, #9
 800b4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4a8:	ee07 3a90 	vmov	s15, r3
 800b4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c4:	ee17 2a90 	vmov	r2, s15
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b4cc:	4b1e      	ldr	r3, [pc, #120]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d0:	0c1b      	lsrs	r3, r3, #16
 800b4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4f2:	ee17 2a90 	vmov	r2, s15
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b4fa:	4b13      	ldr	r3, [pc, #76]	; (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fe:	0e1b      	lsrs	r3, r3, #24
 800b500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b504:	ee07 3a90 	vmov	s15, r3
 800b508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b50c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b510:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b514:	edd7 6a07 	vldr	s13, [r7, #28]
 800b518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b51c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b520:	ee17 2a90 	vmov	r2, s15
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b528:	e008      	b.n	800b53c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	609a      	str	r2, [r3, #8]
}
 800b53c:	bf00      	nop
 800b53e:	3724      	adds	r7, #36	; 0x24
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	58024400 	.word	0x58024400
 800b54c:	03d09000 	.word	0x03d09000
 800b550:	46000000 	.word	0x46000000
 800b554:	4c742400 	.word	0x4c742400
 800b558:	4a742400 	.word	0x4a742400
 800b55c:	4af42400 	.word	0x4af42400

0800b560 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b56e:	4b53      	ldr	r3, [pc, #332]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b572:	f003 0303 	and.w	r3, r3, #3
 800b576:	2b03      	cmp	r3, #3
 800b578:	d101      	bne.n	800b57e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e099      	b.n	800b6b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b57e:	4b4f      	ldr	r3, [pc, #316]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a4e      	ldr	r2, [pc, #312]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b584:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b58a:	f7f9 fd99 	bl	80050c0 <HAL_GetTick>
 800b58e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b590:	e008      	b.n	800b5a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b592:	f7f9 fd95 	bl	80050c0 <HAL_GetTick>
 800b596:	4602      	mov	r2, r0
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d901      	bls.n	800b5a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e086      	b.n	800b6b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5a4:	4b45      	ldr	r3, [pc, #276]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1f0      	bne.n	800b592 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b5b0:	4b42      	ldr	r3, [pc, #264]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	031b      	lsls	r3, r3, #12
 800b5be:	493f      	ldr	r1, [pc, #252]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	628b      	str	r3, [r1, #40]	; 0x28
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	025b      	lsls	r3, r3, #9
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	041b      	lsls	r3, r3, #16
 800b5e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b5e6:	431a      	orrs	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	061b      	lsls	r3, r3, #24
 800b5f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b5f4:	4931      	ldr	r1, [pc, #196]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b5fa:	4b30      	ldr	r3, [pc, #192]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	492d      	ldr	r1, [pc, #180]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b608:	4313      	orrs	r3, r2
 800b60a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b60c:	4b2b      	ldr	r3, [pc, #172]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	f023 0220 	bic.w	r2, r3, #32
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	4928      	ldr	r1, [pc, #160]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b61a:	4313      	orrs	r3, r2
 800b61c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b61e:	4b27      	ldr	r3, [pc, #156]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b622:	4a26      	ldr	r2, [pc, #152]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b624:	f023 0310 	bic.w	r3, r3, #16
 800b628:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b62a:	4b24      	ldr	r3, [pc, #144]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b62c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b62e:	4b24      	ldr	r3, [pc, #144]	; (800b6c0 <RCCEx_PLL2_Config+0x160>)
 800b630:	4013      	ands	r3, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	69d2      	ldr	r2, [r2, #28]
 800b636:	00d2      	lsls	r2, r2, #3
 800b638:	4920      	ldr	r1, [pc, #128]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b63a:	4313      	orrs	r3, r2
 800b63c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b63e:	4b1f      	ldr	r3, [pc, #124]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b642:	4a1e      	ldr	r2, [pc, #120]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b644:	f043 0310 	orr.w	r3, r3, #16
 800b648:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d106      	bne.n	800b65e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b650:	4b1a      	ldr	r3, [pc, #104]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	4a19      	ldr	r2, [pc, #100]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b656:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b65a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b65c:	e00f      	b.n	800b67e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d106      	bne.n	800b672 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b664:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	4a14      	ldr	r2, [pc, #80]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b66a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b66e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b670:	e005      	b.n	800b67e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b672:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b676:	4a11      	ldr	r2, [pc, #68]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b67c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b67e:	4b0f      	ldr	r3, [pc, #60]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a0e      	ldr	r2, [pc, #56]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b684:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b68a:	f7f9 fd19 	bl	80050c0 <HAL_GetTick>
 800b68e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b690:	e008      	b.n	800b6a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b692:	f7f9 fd15 	bl	80050c0 <HAL_GetTick>
 800b696:	4602      	mov	r2, r0
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d901      	bls.n	800b6a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e006      	b.n	800b6b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6a4:	4b05      	ldr	r3, [pc, #20]	; (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d0f0      	beq.n	800b692 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	58024400 	.word	0x58024400
 800b6c0:	ffff0007 	.word	0xffff0007

0800b6c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6d2:	4b53      	ldr	r3, [pc, #332]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d6:	f003 0303 	and.w	r3, r3, #3
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d101      	bne.n	800b6e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e099      	b.n	800b816 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b6e2:	4b4f      	ldr	r3, [pc, #316]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a4e      	ldr	r2, [pc, #312]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b6e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ee:	f7f9 fce7 	bl	80050c0 <HAL_GetTick>
 800b6f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6f4:	e008      	b.n	800b708 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b6f6:	f7f9 fce3 	bl	80050c0 <HAL_GetTick>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	2b02      	cmp	r3, #2
 800b702:	d901      	bls.n	800b708 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b704:	2303      	movs	r3, #3
 800b706:	e086      	b.n	800b816 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b708:	4b45      	ldr	r3, [pc, #276]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1f0      	bne.n	800b6f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b714:	4b42      	ldr	r3, [pc, #264]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b718:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	051b      	lsls	r3, r3, #20
 800b722:	493f      	ldr	r1, [pc, #252]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b724:	4313      	orrs	r3, r2
 800b726:	628b      	str	r3, [r1, #40]	; 0x28
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	3b01      	subs	r3, #1
 800b738:	025b      	lsls	r3, r3, #9
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	431a      	orrs	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	3b01      	subs	r3, #1
 800b744:	041b      	lsls	r3, r3, #16
 800b746:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b74a:	431a      	orrs	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	3b01      	subs	r3, #1
 800b752:	061b      	lsls	r3, r3, #24
 800b754:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b758:	4931      	ldr	r1, [pc, #196]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b75e:	4b30      	ldr	r3, [pc, #192]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b762:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	492d      	ldr	r1, [pc, #180]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b76c:	4313      	orrs	r3, r2
 800b76e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b770:	4b2b      	ldr	r3, [pc, #172]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	4928      	ldr	r1, [pc, #160]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b77e:	4313      	orrs	r3, r2
 800b780:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b782:	4b27      	ldr	r3, [pc, #156]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b786:	4a26      	ldr	r2, [pc, #152]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b78c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b78e:	4b24      	ldr	r3, [pc, #144]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b792:	4b24      	ldr	r3, [pc, #144]	; (800b824 <RCCEx_PLL3_Config+0x160>)
 800b794:	4013      	ands	r3, r2
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	69d2      	ldr	r2, [r2, #28]
 800b79a:	00d2      	lsls	r2, r2, #3
 800b79c:	4920      	ldr	r1, [pc, #128]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b7a2:	4b1f      	ldr	r3, [pc, #124]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	4a1e      	ldr	r2, [pc, #120]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d106      	bne.n	800b7c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b7b4:	4b1a      	ldr	r3, [pc, #104]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	4a19      	ldr	r2, [pc, #100]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b7be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7c0:	e00f      	b.n	800b7e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d106      	bne.n	800b7d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b7c8:	4b15      	ldr	r3, [pc, #84]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	4a14      	ldr	r2, [pc, #80]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7d4:	e005      	b.n	800b7e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7d6:	4b12      	ldr	r3, [pc, #72]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7da:	4a11      	ldr	r2, [pc, #68]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b7e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b7e2:	4b0f      	ldr	r3, [pc, #60]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a0e      	ldr	r2, [pc, #56]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7ee:	f7f9 fc67 	bl	80050c0 <HAL_GetTick>
 800b7f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7f4:	e008      	b.n	800b808 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7f6:	f7f9 fc63 	bl	80050c0 <HAL_GetTick>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	2b02      	cmp	r3, #2
 800b802:	d901      	bls.n	800b808 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b804:	2303      	movs	r3, #3
 800b806:	e006      	b.n	800b816 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b808:	4b05      	ldr	r3, [pc, #20]	; (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0f0      	beq.n	800b7f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b814:	7bfb      	ldrb	r3, [r7, #15]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	58024400 	.word	0x58024400
 800b824:	ffff0007 	.word	0xffff0007

0800b828 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e10f      	b.n	800ba5a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a87      	ldr	r2, [pc, #540]	; (800ba64 <HAL_SPI_Init+0x23c>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d00f      	beq.n	800b86a <HAL_SPI_Init+0x42>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a86      	ldr	r2, [pc, #536]	; (800ba68 <HAL_SPI_Init+0x240>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d00a      	beq.n	800b86a <HAL_SPI_Init+0x42>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a84      	ldr	r2, [pc, #528]	; (800ba6c <HAL_SPI_Init+0x244>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d005      	beq.n	800b86a <HAL_SPI_Init+0x42>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	2b0f      	cmp	r3, #15
 800b864:	d901      	bls.n	800b86a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e0f7      	b.n	800ba5a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f001 f800 	bl	800c870 <SPI_GetPacketSize>
 800b870:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a7b      	ldr	r2, [pc, #492]	; (800ba64 <HAL_SPI_Init+0x23c>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d00c      	beq.n	800b896 <HAL_SPI_Init+0x6e>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a79      	ldr	r2, [pc, #484]	; (800ba68 <HAL_SPI_Init+0x240>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d007      	beq.n	800b896 <HAL_SPI_Init+0x6e>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a78      	ldr	r2, [pc, #480]	; (800ba6c <HAL_SPI_Init+0x244>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d002      	beq.n	800b896 <HAL_SPI_Init+0x6e>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b08      	cmp	r3, #8
 800b894:	d811      	bhi.n	800b8ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b89a:	4a72      	ldr	r2, [pc, #456]	; (800ba64 <HAL_SPI_Init+0x23c>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d009      	beq.n	800b8b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a70      	ldr	r2, [pc, #448]	; (800ba68 <HAL_SPI_Init+0x240>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d004      	beq.n	800b8b4 <HAL_SPI_Init+0x8c>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a6f      	ldr	r2, [pc, #444]	; (800ba6c <HAL_SPI_Init+0x244>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d104      	bne.n	800b8be <HAL_SPI_Init+0x96>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b10      	cmp	r3, #16
 800b8b8:	d901      	bls.n	800b8be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e0cd      	b.n	800ba5a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d106      	bne.n	800b8d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7f8 ffb2 	bl	800483c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 0201 	bic.w	r2, r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b8fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b904:	d119      	bne.n	800b93a <HAL_SPI_Init+0x112>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b90e:	d103      	bne.n	800b918 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b914:	2b00      	cmp	r3, #0
 800b916:	d008      	beq.n	800b92a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10c      	bne.n	800b93a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b928:	d107      	bne.n	800b93a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b938:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00f      	beq.n	800b966 <HAL_SPI_Init+0x13e>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	2b06      	cmp	r3, #6
 800b94c:	d90b      	bls.n	800b966 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	430a      	orrs	r2, r1
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	e007      	b.n	800b976 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b974:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	69da      	ldr	r2, [r3, #28]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97e:	431a      	orrs	r2, r3
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	431a      	orrs	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b988:	ea42 0103 	orr.w	r1, r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68da      	ldr	r2, [r3, #12]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	430a      	orrs	r2, r1
 800b996:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	431a      	orrs	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	431a      	orrs	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	431a      	orrs	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	431a      	orrs	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	431a      	orrs	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	431a      	orrs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ca:	431a      	orrs	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d6:	ea42 0103 	orr.w	r1, r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d113      	bne.n	800ba16 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba00:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba14:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f022 0201 	bic.w	r2, r2, #1
 800ba24:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00a      	beq.n	800ba48 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	430a      	orrs	r2, r1
 800ba46:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	40013000 	.word	0x40013000
 800ba68:	40003800 	.word	0x40003800
 800ba6c:	40003c00 	.word	0x40003c00

0800ba70 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08a      	sub	sp, #40	; 0x28
 800ba74:	af02      	add	r7, sp, #8
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	603b      	str	r3, [r7, #0]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	3320      	adds	r3, #32
 800ba86:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <HAL_SPI_Transmit+0x2a>
 800ba96:	2302      	movs	r3, #2
 800ba98:	e1e1      	b.n	800be5e <HAL_SPI_Transmit+0x3ee>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800baa2:	f7f9 fb0d 	bl	80050c0 <HAL_GetTick>
 800baa6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d007      	beq.n	800bac4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bab4:	2302      	movs	r3, #2
 800bab6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bac0:	7efb      	ldrb	r3, [r7, #27]
 800bac2:	e1cc      	b.n	800be5e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <HAL_SPI_Transmit+0x60>
 800baca:	88fb      	ldrh	r3, [r7, #6]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d107      	bne.n	800bae0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800badc:	7efb      	ldrb	r3, [r7, #27]
 800bade:	e1be      	b.n	800be5e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2203      	movs	r2, #3
 800bae4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	88fa      	ldrh	r2, [r7, #6]
 800bafa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	88fa      	ldrh	r2, [r7, #6]
 800bb02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bb30:	d108      	bne.n	800bb44 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	e009      	b.n	800bb58 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bb56:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	685a      	ldr	r2, [r3, #4]
 800bb5e:	4b96      	ldr	r3, [pc, #600]	; (800bdb8 <HAL_SPI_Transmit+0x348>)
 800bb60:	4013      	ands	r3, r2
 800bb62:	88f9      	ldrh	r1, [r7, #6]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	6812      	ldr	r2, [r2, #0]
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f042 0201 	orr.w	r2, r2, #1
 800bb7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb84:	d107      	bne.n	800bb96 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	2b0f      	cmp	r3, #15
 800bb9c:	d947      	bls.n	800bc2e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bb9e:	e03f      	b.n	800bc20 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	695b      	ldr	r3, [r3, #20]
 800bba6:	f003 0302 	and.w	r3, r3, #2
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d114      	bne.n	800bbd8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6812      	ldr	r2, [r2, #0]
 800bbb8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbbe:	1d1a      	adds	r2, r3, #4
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bbd6:	e023      	b.n	800bc20 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbd8:	f7f9 fa72 	bl	80050c0 <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d803      	bhi.n	800bbf0 <HAL_SPI_Transmit+0x180>
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbee:	d102      	bne.n	800bbf6 <HAL_SPI_Transmit+0x186>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d114      	bne.n	800bc20 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f000 fd6c 	bl	800c6d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e11e      	b.n	800be5e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d1b9      	bne.n	800bba0 <HAL_SPI_Transmit+0x130>
 800bc2c:	e0f1      	b.n	800be12 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	2b07      	cmp	r3, #7
 800bc34:	f240 80e6 	bls.w	800be04 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bc38:	e05d      	b.n	800bcf6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	f003 0302 	and.w	r3, r3, #2
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d132      	bne.n	800bcae <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d918      	bls.n	800bc86 <HAL_SPI_Transmit+0x216>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d014      	beq.n	800bc86 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6812      	ldr	r2, [r2, #0]
 800bc66:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc6c:	1d1a      	adds	r2, r3, #4
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	3b02      	subs	r3, #2
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bc84:	e037      	b.n	800bcf6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc8a:	881a      	ldrh	r2, [r3, #0]
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc94:	1c9a      	adds	r2, r3, #2
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	3b01      	subs	r3, #1
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bcac:	e023      	b.n	800bcf6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcae:	f7f9 fa07 	bl	80050c0 <HAL_GetTick>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d803      	bhi.n	800bcc6 <HAL_SPI_Transmit+0x256>
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc4:	d102      	bne.n	800bccc <HAL_SPI_Transmit+0x25c>
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d114      	bne.n	800bcf6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 fd01 	bl	800c6d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bce0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e0b3      	b.n	800be5e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d19b      	bne.n	800bc3a <HAL_SPI_Transmit+0x1ca>
 800bd02:	e086      	b.n	800be12 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	f003 0302 	and.w	r3, r3, #2
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d154      	bne.n	800bdbc <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d918      	bls.n	800bd50 <HAL_SPI_Transmit+0x2e0>
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd22:	2b40      	cmp	r3, #64	; 0x40
 800bd24:	d914      	bls.n	800bd50 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	6812      	ldr	r2, [r2, #0]
 800bd30:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd36:	1d1a      	adds	r2, r3, #4
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	3b04      	subs	r3, #4
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bd4e:	e059      	b.n	800be04 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d917      	bls.n	800bd8c <HAL_SPI_Transmit+0x31c>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d013      	beq.n	800bd8c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd68:	881a      	ldrh	r2, [r3, #0]
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd72:	1c9a      	adds	r2, r3, #2
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	3b02      	subs	r3, #2
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bd8a:	e03b      	b.n	800be04 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3320      	adds	r3, #32
 800bd96:	7812      	ldrb	r2, [r2, #0]
 800bd98:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd9e:	1c5a      	adds	r2, r3, #1
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	3b01      	subs	r3, #1
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bdb6:	e025      	b.n	800be04 <HAL_SPI_Transmit+0x394>
 800bdb8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdbc:	f7f9 f980 	bl	80050c0 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d803      	bhi.n	800bdd4 <HAL_SPI_Transmit+0x364>
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd2:	d102      	bne.n	800bdda <HAL_SPI_Transmit+0x36a>
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d114      	bne.n	800be04 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 fc7a 	bl	800c6d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e02c      	b.n	800be5e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f47f af79 	bne.w	800bd04 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2200      	movs	r2, #0
 800be1a:	2108      	movs	r1, #8
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 fcf9 	bl	800c814 <SPI_WaitOnFlagUntilTimeout>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d007      	beq.n	800be38 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be2e:	f043 0220 	orr.w	r2, r3, #32
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 fc4b 	bl	800c6d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2201      	movs	r2, #1
 800be4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be54:	2b00      	cmp	r3, #0
 800be56:	d001      	beq.n	800be5c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	e000      	b.n	800be5e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800be5c:	7efb      	ldrb	r3, [r7, #27]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3720      	adds	r7, #32
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop

0800be68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08c      	sub	sp, #48	; 0x30
 800be6c:	af02      	add	r7, sp, #8
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3320      	adds	r3, #32
 800be82:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	3330      	adds	r3, #48	; 0x30
 800be8a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be92:	2b01      	cmp	r3, #1
 800be94:	d101      	bne.n	800be9a <HAL_SPI_TransmitReceive+0x32>
 800be96:	2302      	movs	r3, #2
 800be98:	e1fd      	b.n	800c296 <HAL_SPI_TransmitReceive+0x42e>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bea2:	f7f9 f90d 	bl	80050c0 <HAL_GetTick>
 800bea6:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800bea8:	887b      	ldrh	r3, [r7, #2]
 800beaa:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800beac:	887b      	ldrh	r3, [r7, #2]
 800beae:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d009      	beq.n	800bed0 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800bebc:	2302      	movs	r3, #2
 800bebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800beca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bece:	e1e2      	b.n	800c296 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d005      	beq.n	800bee2 <HAL_SPI_TransmitReceive+0x7a>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <HAL_SPI_TransmitReceive+0x7a>
 800bedc:	887b      	ldrh	r3, [r7, #2]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d109      	bne.n	800bef6 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bef4:	e1cf      	b.n	800c296 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2205      	movs	r2, #5
 800befa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	887a      	ldrh	r2, [r7, #2]
 800bf10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	887a      	ldrh	r2, [r7, #2]
 800bf18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	887a      	ldrh	r2, [r7, #2]
 800bf26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	887a      	ldrh	r2, [r7, #2]
 800bf2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68da      	ldr	r2, [r3, #12]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800bf4c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	4b82      	ldr	r3, [pc, #520]	; (800c160 <HAL_SPI_TransmitReceive+0x2f8>)
 800bf56:	4013      	ands	r3, r2
 800bf58:	8879      	ldrh	r1, [r7, #2]
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	6812      	ldr	r2, [r2, #0]
 800bf5e:	430b      	orrs	r3, r1
 800bf60:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f042 0201 	orr.w	r2, r2, #1
 800bf70:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf7a:	d107      	bne.n	800bf8c <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	2b0f      	cmp	r3, #15
 800bf92:	d970      	bls.n	800c076 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf94:	e068      	b.n	800c068 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d11a      	bne.n	800bfda <HAL_SPI_TransmitReceive+0x172>
 800bfa4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d017      	beq.n	800bfda <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	6812      	ldr	r2, [r2, #0]
 800bfb4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfba:	1d1a      	adds	r2, r3, #4
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfd8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	695a      	ldr	r2, [r3, #20]
 800bfe0:	f248 0308 	movw	r3, #32776	; 0x8008
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d01a      	beq.n	800c020 <HAL_SPI_TransmitReceive+0x1b8>
 800bfea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d017      	beq.n	800c020 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bff8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bffa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c000:	1d1a      	adds	r2, r3, #4
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	3b01      	subs	r3, #1
 800c010:	b29a      	uxth	r2, r3
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c01e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c020:	f7f9 f84e 	bl	80050c0 <HAL_GetTick>
 800c024:	4602      	mov	r2, r0
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	1ad3      	subs	r3, r2, r3
 800c02a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d803      	bhi.n	800c038 <HAL_SPI_TransmitReceive+0x1d0>
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c036:	d102      	bne.n	800c03e <HAL_SPI_TransmitReceive+0x1d6>
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d114      	bne.n	800c068 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f000 fb48 	bl	800c6d4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c052:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	e116      	b.n	800c296 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c068:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d193      	bne.n	800bf96 <HAL_SPI_TransmitReceive+0x12e>
 800c06e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c070:	2b00      	cmp	r3, #0
 800c072:	d190      	bne.n	800bf96 <HAL_SPI_TransmitReceive+0x12e>
 800c074:	e0e8      	b.n	800c248 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	2b07      	cmp	r3, #7
 800c07c:	f240 80de 	bls.w	800c23c <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c080:	e066      	b.n	800c150 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	695b      	ldr	r3, [r3, #20]
 800c088:	f003 0302 	and.w	r3, r3, #2
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d119      	bne.n	800c0c4 <HAL_SPI_TransmitReceive+0x25c>
 800c090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c092:	2b00      	cmp	r3, #0
 800c094:	d016      	beq.n	800c0c4 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c09a:	881a      	ldrh	r2, [r3, #0]
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0a4:	1c9a      	adds	r2, r3, #2
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d11a      	bne.n	800c108 <HAL_SPI_TransmitReceive+0x2a0>
 800c0d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d017      	beq.n	800c108 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0dc:	69ba      	ldr	r2, [r7, #24]
 800c0de:	8812      	ldrh	r2, [r2, #0]
 800c0e0:	b292      	uxth	r2, r2
 800c0e2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0e8:	1c9a      	adds	r2, r3, #2
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c106:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c108:	f7f8 ffda 	bl	80050c0 <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c114:	429a      	cmp	r2, r3
 800c116:	d803      	bhi.n	800c120 <HAL_SPI_TransmitReceive+0x2b8>
 800c118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11e:	d102      	bne.n	800c126 <HAL_SPI_TransmitReceive+0x2be>
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	2b00      	cmp	r3, #0
 800c124:	d114      	bne.n	800c150 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f000 fad4 	bl	800c6d4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c13a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e0a2      	b.n	800c296 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c152:	2b00      	cmp	r3, #0
 800c154:	d195      	bne.n	800c082 <HAL_SPI_TransmitReceive+0x21a>
 800c156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d192      	bne.n	800c082 <HAL_SPI_TransmitReceive+0x21a>
 800c15c:	e074      	b.n	800c248 <HAL_SPI_TransmitReceive+0x3e0>
 800c15e:	bf00      	nop
 800c160:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	f003 0302 	and.w	r3, r3, #2
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d11b      	bne.n	800c1aa <HAL_SPI_TransmitReceive+0x342>
 800c172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c174:	2b00      	cmp	r3, #0
 800c176:	d018      	beq.n	800c1aa <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3320      	adds	r3, #32
 800c182:	7812      	ldrb	r2, [r2, #0]
 800c184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c18a:	1c5a      	adds	r2, r3, #1
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c196:	b29b      	uxth	r3, r3
 800c198:	3b01      	subs	r3, #1
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1a8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d11d      	bne.n	800c1f4 <HAL_SPI_TransmitReceive+0x38c>
 800c1b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d01a      	beq.n	800c1f4 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1ca:	7812      	ldrb	r2, [r2, #0]
 800c1cc:	b2d2      	uxtb	r2, r2
 800c1ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1d4:	1c5a      	adds	r2, r3, #1
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1f2:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1f4:	f7f8 ff64 	bl	80050c0 <HAL_GetTick>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c200:	429a      	cmp	r2, r3
 800c202:	d803      	bhi.n	800c20c <HAL_SPI_TransmitReceive+0x3a4>
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20a:	d102      	bne.n	800c212 <HAL_SPI_TransmitReceive+0x3aa>
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d114      	bne.n	800c23c <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 fa5e 	bl	800c6d4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c226:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	e02c      	b.n	800c296 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c23c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d190      	bne.n	800c164 <HAL_SPI_TransmitReceive+0x2fc>
 800c242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c244:	2b00      	cmp	r3, #0
 800c246:	d18d      	bne.n	800c164 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	2200      	movs	r2, #0
 800c250:	2108      	movs	r1, #8
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f000 fade 	bl	800c814 <SPI_WaitOnFlagUntilTimeout>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d007      	beq.n	800c26e <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c264:	f043 0220 	orr.w	r2, r3, #32
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 fa30 	bl	800c6d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2201      	movs	r2, #1
 800c280:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e001      	b.n	800c296 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 800c292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c296:	4618      	mov	r0, r3
 800c298:	3728      	adds	r7, #40	; 0x28
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop

0800c2a0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b08a      	sub	sp, #40	; 0x28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c2b8:	6a3a      	ldr	r2, [r7, #32]
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	4013      	ands	r3, r2
 800c2be:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c2d2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3330      	adds	r3, #48	; 0x30
 800c2da:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d010      	beq.n	800c308 <HAL_SPI_IRQHandler+0x68>
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	f003 0308 	and.w	r3, r3, #8
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00b      	beq.n	800c308 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	699a      	ldr	r2, [r3, #24]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2fe:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f9c3 	bl	800c68c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c306:	e192      	b.n	800c62e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d113      	bne.n	800c33a <HAL_SPI_IRQHandler+0x9a>
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	f003 0320 	and.w	r3, r3, #32
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10e      	bne.n	800c33a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c322:	2b00      	cmp	r3, #0
 800c324:	d009      	beq.n	800c33a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	4798      	blx	r3
    handled = 1UL;
 800c336:	2301      	movs	r3, #1
 800c338:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10f      	bne.n	800c364 <HAL_SPI_IRQHandler+0xc4>
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	f003 0301 	and.w	r3, r3, #1
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00a      	beq.n	800c364 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c354:	2b00      	cmp	r3, #0
 800c356:	d105      	bne.n	800c364 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	4798      	blx	r3
    handled = 1UL;
 800c360:	2301      	movs	r3, #1
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	f003 0320 	and.w	r3, r3, #32
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10f      	bne.n	800c38e <HAL_SPI_IRQHandler+0xee>
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	f003 0302 	and.w	r3, r3, #2
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00a      	beq.n	800c38e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d105      	bne.n	800c38e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	4798      	blx	r3
    handled = 1UL;
 800c38a:	2301      	movs	r3, #1
 800c38c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c390:	2b00      	cmp	r3, #0
 800c392:	f040 8147 	bne.w	800c624 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	f003 0308 	and.w	r3, r3, #8
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f000 808b 	beq.w	800c4b8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	699a      	ldr	r2, [r3, #24]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f042 0208 	orr.w	r2, r2, #8
 800c3b0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	699a      	ldr	r2, [r3, #24]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f042 0210 	orr.w	r2, r2, #16
 800c3c0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	699a      	ldr	r2, [r3, #24]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3d0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	691a      	ldr	r2, [r3, #16]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f022 0208 	bic.w	r2, r2, #8
 800c3e0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d13d      	bne.n	800c46c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c3f0:	e036      	b.n	800c460 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	2b0f      	cmp	r3, #15
 800c3f8:	d90b      	bls.n	800c412 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c402:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c404:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c40a:	1d1a      	adds	r2, r3, #4
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	665a      	str	r2, [r3, #100]	; 0x64
 800c410:	e01d      	b.n	800c44e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	2b07      	cmp	r3, #7
 800c418:	d90b      	bls.n	800c432 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	8812      	ldrh	r2, [r2, #0]
 800c422:	b292      	uxth	r2, r2
 800c424:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c42a:	1c9a      	adds	r2, r3, #2
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	665a      	str	r2, [r3, #100]	; 0x64
 800c430:	e00d      	b.n	800c44e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c43e:	7812      	ldrb	r2, [r2, #0]
 800c440:	b2d2      	uxtb	r2, r2
 800c442:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c448:	1c5a      	adds	r2, r3, #1
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c454:	b29b      	uxth	r3, r3
 800c456:	3b01      	subs	r3, #1
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c466:	b29b      	uxth	r3, r3
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1c2      	bne.n	800c3f2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 f931 	bl	800c6d4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2201      	movs	r2, #1
 800c476:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c480:	2b00      	cmp	r3, #0
 800c482:	d003      	beq.n	800c48c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f8f7 	bl	800c678 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c48a:	e0d0      	b.n	800c62e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c48c:	7cfb      	ldrb	r3, [r7, #19]
 800c48e:	2b05      	cmp	r3, #5
 800c490:	d103      	bne.n	800c49a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f8e6 	bl	800c664 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c498:	e0c6      	b.n	800c628 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c49a:	7cfb      	ldrb	r3, [r7, #19]
 800c49c:	2b04      	cmp	r3, #4
 800c49e:	d103      	bne.n	800c4a8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 f8d5 	bl	800c650 <HAL_SPI_RxCpltCallback>
    return;
 800c4a6:	e0bf      	b.n	800c628 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c4a8:	7cfb      	ldrb	r3, [r7, #19]
 800c4aa:	2b03      	cmp	r3, #3
 800c4ac:	f040 80bc 	bne.w	800c628 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 f8c3 	bl	800c63c <HAL_SPI_TxCpltCallback>
    return;
 800c4b6:	e0b7      	b.n	800c628 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f000 80b5 	beq.w	800c62e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00f      	beq.n	800c4ee <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4d4:	f043 0204 	orr.w	r2, r3, #4
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	699a      	ldr	r2, [r3, #24]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00f      	beq.n	800c518 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4fe:	f043 0201 	orr.w	r2, r3, #1
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	699a      	ldr	r2, [r3, #24]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c516:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00f      	beq.n	800c542 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c528:	f043 0208 	orr.w	r2, r3, #8
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	699a      	ldr	r2, [r3, #24]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c540:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	f003 0320 	and.w	r3, r3, #32
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00f      	beq.n	800c56c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c552:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	699a      	ldr	r2, [r3, #24]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f042 0220 	orr.w	r2, r2, #32
 800c56a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c572:	2b00      	cmp	r3, #0
 800c574:	d05a      	beq.n	800c62c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f022 0201 	bic.w	r2, r2, #1
 800c584:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6919      	ldr	r1, [r3, #16]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	4b28      	ldr	r3, [pc, #160]	; (800c634 <HAL_SPI_IRQHandler+0x394>)
 800c592:	400b      	ands	r3, r1
 800c594:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c59c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c5a0:	d138      	bne.n	800c614 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	689a      	ldr	r2, [r3, #8]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c5b0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d013      	beq.n	800c5e2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5be:	4a1e      	ldr	r2, [pc, #120]	; (800c638 <HAL_SPI_IRQHandler+0x398>)
 800c5c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fa ffe8 	bl	800759c <HAL_DMA_Abort_IT>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d007      	beq.n	800c5e2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d020      	beq.n	800c62c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5ee:	4a12      	ldr	r2, [pc, #72]	; (800c638 <HAL_SPI_IRQHandler+0x398>)
 800c5f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fa ffd0 	bl	800759c <HAL_DMA_Abort_IT>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d014      	beq.n	800c62c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c608:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c612:	e00b      	b.n	800c62c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 f82b 	bl	800c678 <HAL_SPI_ErrorCallback>
    return;
 800c622:	e003      	b.n	800c62c <HAL_SPI_IRQHandler+0x38c>
    return;
 800c624:	bf00      	nop
 800c626:	e002      	b.n	800c62e <HAL_SPI_IRQHandler+0x38e>
    return;
 800c628:	bf00      	nop
 800c62a:	e000      	b.n	800c62e <HAL_SPI_IRQHandler+0x38e>
    return;
 800c62c:	bf00      	nop
  }
}
 800c62e:	3728      	adds	r7, #40	; 0x28
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	fffffc94 	.word	0xfffffc94
 800c638:	0800c6a1 	.word	0x0800c6a1

0800c63c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7ff ffd6 	bl	800c678 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c6cc:	bf00      	nop
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	695b      	ldr	r3, [r3, #20]
 800c6e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	699a      	ldr	r2, [r3, #24]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f042 0208 	orr.w	r2, r2, #8
 800c6f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	699a      	ldr	r2, [r3, #24]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f042 0210 	orr.w	r2, r2, #16
 800c702:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f022 0201 	bic.w	r2, r2, #1
 800c712:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	6919      	ldr	r1, [r3, #16]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	4b3c      	ldr	r3, [pc, #240]	; (800c810 <SPI_CloseTransfer+0x13c>)
 800c720:	400b      	ands	r3, r1
 800c722:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c732:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b04      	cmp	r3, #4
 800c73e:	d014      	beq.n	800c76a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f003 0320 	and.w	r3, r3, #32
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00f      	beq.n	800c76a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c750:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	699a      	ldr	r2, [r3, #24]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f042 0220 	orr.w	r2, r2, #32
 800c768:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b03      	cmp	r3, #3
 800c774:	d014      	beq.n	800c7a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00f      	beq.n	800c7a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c786:	f043 0204 	orr.w	r2, r3, #4
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	699a      	ldr	r2, [r3, #24]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c79e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00f      	beq.n	800c7ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7b0:	f043 0201 	orr.w	r2, r3, #1
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	699a      	ldr	r2, [r3, #24]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00f      	beq.n	800c7f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7da:	f043 0208 	orr.w	r2, r3, #8
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	699a      	ldr	r2, [r3, #24]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c804:	bf00      	nop
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr
 800c810:	fffffc90 	.word	0xfffffc90

0800c814 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	603b      	str	r3, [r7, #0]
 800c820:	4613      	mov	r3, r2
 800c822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c824:	e010      	b.n	800c848 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c826:	f7f8 fc4b 	bl	80050c0 <HAL_GetTick>
 800c82a:	4602      	mov	r2, r0
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	429a      	cmp	r2, r3
 800c834:	d803      	bhi.n	800c83e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83c:	d102      	bne.n	800c844 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d101      	bne.n	800c848 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c844:	2303      	movs	r3, #3
 800c846:	e00f      	b.n	800c868 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	695a      	ldr	r2, [r3, #20]
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	4013      	ands	r3, r2
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	429a      	cmp	r2, r3
 800c856:	bf0c      	ite	eq
 800c858:	2301      	moveq	r3, #1
 800c85a:	2300      	movne	r3, #0
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	461a      	mov	r2, r3
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	429a      	cmp	r2, r3
 800c864:	d0df      	beq.n	800c826 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c87c:	095b      	lsrs	r3, r3, #5
 800c87e:	3301      	adds	r3, #1
 800c880:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	3301      	adds	r3, #1
 800c888:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	3307      	adds	r3, #7
 800c88e:	08db      	lsrs	r3, r3, #3
 800c890:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	fb02 f303 	mul.w	r3, r2, r3
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b082      	sub	sp, #8
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e049      	b.n	800c94c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d106      	bne.n	800c8d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7f8 f879 	bl	80049c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	3304      	adds	r3, #4
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	f000 f9ff 	bl	800cce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2201      	movs	r2, #1
 800c906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2201      	movs	r2, #1
 800c90e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2201      	movs	r2, #1
 800c916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2201      	movs	r2, #1
 800c926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2201      	movs	r2, #1
 800c92e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2201      	movs	r2, #1
 800c936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2201      	movs	r2, #1
 800c946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b01      	cmp	r3, #1
 800c966:	d001      	beq.n	800c96c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	e054      	b.n	800ca16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2202      	movs	r2, #2
 800c970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f042 0201 	orr.w	r2, r2, #1
 800c982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a26      	ldr	r2, [pc, #152]	; (800ca24 <HAL_TIM_Base_Start_IT+0xd0>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d022      	beq.n	800c9d4 <HAL_TIM_Base_Start_IT+0x80>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c996:	d01d      	beq.n	800c9d4 <HAL_TIM_Base_Start_IT+0x80>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a22      	ldr	r2, [pc, #136]	; (800ca28 <HAL_TIM_Base_Start_IT+0xd4>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d018      	beq.n	800c9d4 <HAL_TIM_Base_Start_IT+0x80>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a21      	ldr	r2, [pc, #132]	; (800ca2c <HAL_TIM_Base_Start_IT+0xd8>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d013      	beq.n	800c9d4 <HAL_TIM_Base_Start_IT+0x80>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a1f      	ldr	r2, [pc, #124]	; (800ca30 <HAL_TIM_Base_Start_IT+0xdc>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d00e      	beq.n	800c9d4 <HAL_TIM_Base_Start_IT+0x80>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a1e      	ldr	r2, [pc, #120]	; (800ca34 <HAL_TIM_Base_Start_IT+0xe0>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d009      	beq.n	800c9d4 <HAL_TIM_Base_Start_IT+0x80>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a1c      	ldr	r2, [pc, #112]	; (800ca38 <HAL_TIM_Base_Start_IT+0xe4>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d004      	beq.n	800c9d4 <HAL_TIM_Base_Start_IT+0x80>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a1b      	ldr	r2, [pc, #108]	; (800ca3c <HAL_TIM_Base_Start_IT+0xe8>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d115      	bne.n	800ca00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	689a      	ldr	r2, [r3, #8]
 800c9da:	4b19      	ldr	r3, [pc, #100]	; (800ca40 <HAL_TIM_Base_Start_IT+0xec>)
 800c9dc:	4013      	ands	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2b06      	cmp	r3, #6
 800c9e4:	d015      	beq.n	800ca12 <HAL_TIM_Base_Start_IT+0xbe>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9ec:	d011      	beq.n	800ca12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f042 0201 	orr.w	r2, r2, #1
 800c9fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9fe:	e008      	b.n	800ca12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f042 0201 	orr.w	r2, r2, #1
 800ca0e:	601a      	str	r2, [r3, #0]
 800ca10:	e000      	b.n	800ca14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3714      	adds	r7, #20
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	40010000 	.word	0x40010000
 800ca28:	40000400 	.word	0x40000400
 800ca2c:	40000800 	.word	0x40000800
 800ca30:	40000c00 	.word	0x40000c00
 800ca34:	40010400 	.word	0x40010400
 800ca38:	40001800 	.word	0x40001800
 800ca3c:	40014000 	.word	0x40014000
 800ca40:	00010007 	.word	0x00010007

0800ca44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	f003 0302 	and.w	r3, r3, #2
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d122      	bne.n	800caa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	f003 0302 	and.w	r3, r3, #2
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d11b      	bne.n	800caa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f06f 0202 	mvn.w	r2, #2
 800ca70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2201      	movs	r2, #1
 800ca76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	f003 0303 	and.w	r3, r3, #3
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d003      	beq.n	800ca8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f90f 	bl	800ccaa <HAL_TIM_IC_CaptureCallback>
 800ca8c:	e005      	b.n	800ca9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f901 	bl	800cc96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f912 	bl	800ccbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	f003 0304 	and.w	r3, r3, #4
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d122      	bne.n	800caf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	f003 0304 	and.w	r3, r3, #4
 800cab8:	2b04      	cmp	r3, #4
 800caba:	d11b      	bne.n	800caf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f06f 0204 	mvn.w	r2, #4
 800cac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2202      	movs	r2, #2
 800caca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	699b      	ldr	r3, [r3, #24]
 800cad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f8e5 	bl	800ccaa <HAL_TIM_IC_CaptureCallback>
 800cae0:	e005      	b.n	800caee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 f8d7 	bl	800cc96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 f8e8 	bl	800ccbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	f003 0308 	and.w	r3, r3, #8
 800cafe:	2b08      	cmp	r3, #8
 800cb00:	d122      	bne.n	800cb48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	f003 0308 	and.w	r3, r3, #8
 800cb0c:	2b08      	cmp	r3, #8
 800cb0e:	d11b      	bne.n	800cb48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f06f 0208 	mvn.w	r2, #8
 800cb18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2204      	movs	r2, #4
 800cb1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	69db      	ldr	r3, [r3, #28]
 800cb26:	f003 0303 	and.w	r3, r3, #3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d003      	beq.n	800cb36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f8bb 	bl	800ccaa <HAL_TIM_IC_CaptureCallback>
 800cb34:	e005      	b.n	800cb42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f8ad 	bl	800cc96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f8be 	bl	800ccbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	f003 0310 	and.w	r3, r3, #16
 800cb52:	2b10      	cmp	r3, #16
 800cb54:	d122      	bne.n	800cb9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	f003 0310 	and.w	r3, r3, #16
 800cb60:	2b10      	cmp	r3, #16
 800cb62:	d11b      	bne.n	800cb9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f06f 0210 	mvn.w	r2, #16
 800cb6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2208      	movs	r2, #8
 800cb72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d003      	beq.n	800cb8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f891 	bl	800ccaa <HAL_TIM_IC_CaptureCallback>
 800cb88:	e005      	b.n	800cb96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f883 	bl	800cc96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f894 	bl	800ccbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	f003 0301 	and.w	r3, r3, #1
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d10e      	bne.n	800cbc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	f003 0301 	and.w	r3, r3, #1
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d107      	bne.n	800cbc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f06f 0201 	mvn.w	r2, #1
 800cbc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f85d 	bl	800cc82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbd2:	2b80      	cmp	r3, #128	; 0x80
 800cbd4:	d10e      	bne.n	800cbf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbe0:	2b80      	cmp	r3, #128	; 0x80
 800cbe2:	d107      	bne.n	800cbf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cbec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f9ac 	bl	800cf4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc02:	d10e      	bne.n	800cc22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc0e:	2b80      	cmp	r3, #128	; 0x80
 800cc10:	d107      	bne.n	800cc22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cc1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 f99f 	bl	800cf60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc2c:	2b40      	cmp	r3, #64	; 0x40
 800cc2e:	d10e      	bne.n	800cc4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3a:	2b40      	cmp	r3, #64	; 0x40
 800cc3c:	d107      	bne.n	800cc4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cc46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f842 	bl	800ccd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	f003 0320 	and.w	r3, r3, #32
 800cc58:	2b20      	cmp	r3, #32
 800cc5a:	d10e      	bne.n	800cc7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f003 0320 	and.w	r3, r3, #32
 800cc66:	2b20      	cmp	r3, #32
 800cc68:	d107      	bne.n	800cc7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f06f 0220 	mvn.w	r2, #32
 800cc72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f95f 	bl	800cf38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc7a:	bf00      	nop
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cc8a:	bf00      	nop
 800cc8c:	370c      	adds	r7, #12
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc9e:	bf00      	nop
 800cca0:	370c      	adds	r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b083      	sub	sp, #12
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ccb2:	bf00      	nop
 800ccb4:	370c      	adds	r7, #12
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ccc6:	bf00      	nop
 800ccc8:	370c      	adds	r7, #12
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b083      	sub	sp, #12
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ccda:	bf00      	nop
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
	...

0800cce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	4a40      	ldr	r2, [pc, #256]	; (800cdfc <TIM_Base_SetConfig+0x114>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d013      	beq.n	800cd28 <TIM_Base_SetConfig+0x40>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd06:	d00f      	beq.n	800cd28 <TIM_Base_SetConfig+0x40>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a3d      	ldr	r2, [pc, #244]	; (800ce00 <TIM_Base_SetConfig+0x118>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d00b      	beq.n	800cd28 <TIM_Base_SetConfig+0x40>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a3c      	ldr	r2, [pc, #240]	; (800ce04 <TIM_Base_SetConfig+0x11c>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d007      	beq.n	800cd28 <TIM_Base_SetConfig+0x40>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a3b      	ldr	r2, [pc, #236]	; (800ce08 <TIM_Base_SetConfig+0x120>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d003      	beq.n	800cd28 <TIM_Base_SetConfig+0x40>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a3a      	ldr	r2, [pc, #232]	; (800ce0c <TIM_Base_SetConfig+0x124>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d108      	bne.n	800cd3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	4313      	orrs	r3, r2
 800cd38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4a2f      	ldr	r2, [pc, #188]	; (800cdfc <TIM_Base_SetConfig+0x114>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d01f      	beq.n	800cd82 <TIM_Base_SetConfig+0x9a>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd48:	d01b      	beq.n	800cd82 <TIM_Base_SetConfig+0x9a>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a2c      	ldr	r2, [pc, #176]	; (800ce00 <TIM_Base_SetConfig+0x118>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d017      	beq.n	800cd82 <TIM_Base_SetConfig+0x9a>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4a2b      	ldr	r2, [pc, #172]	; (800ce04 <TIM_Base_SetConfig+0x11c>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d013      	beq.n	800cd82 <TIM_Base_SetConfig+0x9a>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4a2a      	ldr	r2, [pc, #168]	; (800ce08 <TIM_Base_SetConfig+0x120>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d00f      	beq.n	800cd82 <TIM_Base_SetConfig+0x9a>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4a29      	ldr	r2, [pc, #164]	; (800ce0c <TIM_Base_SetConfig+0x124>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d00b      	beq.n	800cd82 <TIM_Base_SetConfig+0x9a>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a28      	ldr	r2, [pc, #160]	; (800ce10 <TIM_Base_SetConfig+0x128>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d007      	beq.n	800cd82 <TIM_Base_SetConfig+0x9a>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a27      	ldr	r2, [pc, #156]	; (800ce14 <TIM_Base_SetConfig+0x12c>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d003      	beq.n	800cd82 <TIM_Base_SetConfig+0x9a>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4a26      	ldr	r2, [pc, #152]	; (800ce18 <TIM_Base_SetConfig+0x130>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d108      	bne.n	800cd94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	4313      	orrs	r3, r2
 800cd92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	689a      	ldr	r2, [r3, #8]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a10      	ldr	r2, [pc, #64]	; (800cdfc <TIM_Base_SetConfig+0x114>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d00f      	beq.n	800cde0 <TIM_Base_SetConfig+0xf8>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a12      	ldr	r2, [pc, #72]	; (800ce0c <TIM_Base_SetConfig+0x124>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d00b      	beq.n	800cde0 <TIM_Base_SetConfig+0xf8>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a11      	ldr	r2, [pc, #68]	; (800ce10 <TIM_Base_SetConfig+0x128>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d007      	beq.n	800cde0 <TIM_Base_SetConfig+0xf8>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4a10      	ldr	r2, [pc, #64]	; (800ce14 <TIM_Base_SetConfig+0x12c>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d003      	beq.n	800cde0 <TIM_Base_SetConfig+0xf8>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4a0f      	ldr	r2, [pc, #60]	; (800ce18 <TIM_Base_SetConfig+0x130>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d103      	bne.n	800cde8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	691a      	ldr	r2, [r3, #16]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	615a      	str	r2, [r3, #20]
}
 800cdee:	bf00      	nop
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	40010000 	.word	0x40010000
 800ce00:	40000400 	.word	0x40000400
 800ce04:	40000800 	.word	0x40000800
 800ce08:	40000c00 	.word	0x40000c00
 800ce0c:	40010400 	.word	0x40010400
 800ce10:	40014000 	.word	0x40014000
 800ce14:	40014400 	.word	0x40014400
 800ce18:	40014800 	.word	0x40014800

0800ce1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d101      	bne.n	800ce34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce30:	2302      	movs	r3, #2
 800ce32:	e06d      	b.n	800cf10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2202      	movs	r2, #2
 800ce40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a30      	ldr	r2, [pc, #192]	; (800cf1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d004      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a2f      	ldr	r2, [pc, #188]	; (800cf20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d108      	bne.n	800ce7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ce6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a20      	ldr	r2, [pc, #128]	; (800cf1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d022      	beq.n	800cee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cea6:	d01d      	beq.n	800cee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a1d      	ldr	r2, [pc, #116]	; (800cf24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d018      	beq.n	800cee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a1c      	ldr	r2, [pc, #112]	; (800cf28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d013      	beq.n	800cee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a1a      	ldr	r2, [pc, #104]	; (800cf2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d00e      	beq.n	800cee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a15      	ldr	r2, [pc, #84]	; (800cf20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d009      	beq.n	800cee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a16      	ldr	r2, [pc, #88]	; (800cf30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d004      	beq.n	800cee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a15      	ldr	r2, [pc, #84]	; (800cf34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d10c      	bne.n	800cefe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ceea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	40010000 	.word	0x40010000
 800cf20:	40010400 	.word	0x40010400
 800cf24:	40000400 	.word	0x40000400
 800cf28:	40000800 	.word	0x40000800
 800cf2c:	40000c00 	.word	0x40000c00
 800cf30:	40001800 	.word	0x40001800
 800cf34:	40014000 	.word	0x40014000

0800cf38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d101      	bne.n	800cf86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e042      	b.n	800d00c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d106      	bne.n	800cf9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7f7 fd5b 	bl	8004a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2224      	movs	r2, #36	; 0x24
 800cfa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f022 0201 	bic.w	r2, r2, #1
 800cfb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fcea 	bl	800d990 <UART_SetConfig>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d101      	bne.n	800cfc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e022      	b.n	800d00c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f001 fa46 	bl	800e460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	685a      	ldr	r2, [r3, #4]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cfe2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	689a      	ldr	r2, [r3, #8]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cff2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f042 0201 	orr.w	r2, r2, #1
 800d002:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f001 facd 	bl	800e5a4 <UART_CheckIdleState>
 800d00a:	4603      	mov	r3, r0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08a      	sub	sp, #40	; 0x28
 800d018:	af02      	add	r7, sp, #8
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	603b      	str	r3, [r7, #0]
 800d020:	4613      	mov	r3, r2
 800d022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d02a:	2b20      	cmp	r3, #32
 800d02c:	d17b      	bne.n	800d126 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <HAL_UART_Transmit+0x26>
 800d034:	88fb      	ldrh	r3, [r7, #6]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d101      	bne.n	800d03e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d03a:	2301      	movs	r3, #1
 800d03c:	e074      	b.n	800d128 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2221      	movs	r2, #33	; 0x21
 800d04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d04e:	f7f8 f837 	bl	80050c0 <HAL_GetTick>
 800d052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	88fa      	ldrh	r2, [r7, #6]
 800d058:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	88fa      	ldrh	r2, [r7, #6]
 800d060:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d06c:	d108      	bne.n	800d080 <HAL_UART_Transmit+0x6c>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d104      	bne.n	800d080 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d076:	2300      	movs	r3, #0
 800d078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	61bb      	str	r3, [r7, #24]
 800d07e:	e003      	b.n	800d088 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d084:	2300      	movs	r3, #0
 800d086:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d088:	e030      	b.n	800d0ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2200      	movs	r2, #0
 800d092:	2180      	movs	r1, #128	; 0x80
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f001 fb2f 	bl	800e6f8 <UART_WaitOnFlagUntilTimeout>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d005      	beq.n	800d0ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2220      	movs	r2, #32
 800d0a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e03d      	b.n	800d128 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10b      	bne.n	800d0ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	881b      	ldrh	r3, [r3, #0]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	3302      	adds	r3, #2
 800d0c6:	61bb      	str	r3, [r7, #24]
 800d0c8:	e007      	b.n	800d0da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	781a      	ldrb	r2, [r3, #0]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1c8      	bne.n	800d08a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2200      	movs	r2, #0
 800d100:	2140      	movs	r1, #64	; 0x40
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f001 faf8 	bl	800e6f8 <UART_WaitOnFlagUntilTimeout>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d005      	beq.n	800d11a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2220      	movs	r2, #32
 800d112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d116:	2303      	movs	r3, #3
 800d118:	e006      	b.n	800d128 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2220      	movs	r2, #32
 800d11e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	e000      	b.n	800d128 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d126:	2302      	movs	r3, #2
  }
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3720      	adds	r7, #32
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08a      	sub	sp, #40	; 0x28
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	4613      	mov	r3, r2
 800d13c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d144:	2b20      	cmp	r3, #32
 800d146:	d137      	bne.n	800d1b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d002      	beq.n	800d154 <HAL_UART_Receive_IT+0x24>
 800d14e:	88fb      	ldrh	r3, [r7, #6]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d101      	bne.n	800d158 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	e030      	b.n	800d1ba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2200      	movs	r2, #0
 800d15c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a18      	ldr	r2, [pc, #96]	; (800d1c4 <HAL_UART_Receive_IT+0x94>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d01f      	beq.n	800d1a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d172:	2b00      	cmp	r3, #0
 800d174:	d018      	beq.n	800d1a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	e853 3f00 	ldrex	r3, [r3]
 800d182:	613b      	str	r3, [r7, #16]
   return(result);
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d18a:	627b      	str	r3, [r7, #36]	; 0x24
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	461a      	mov	r2, r3
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	623b      	str	r3, [r7, #32]
 800d196:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d198:	69f9      	ldr	r1, [r7, #28]
 800d19a:	6a3a      	ldr	r2, [r7, #32]
 800d19c:	e841 2300 	strex	r3, r2, [r1]
 800d1a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1e6      	bne.n	800d176 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d1a8:	88fb      	ldrh	r3, [r7, #6]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	68b9      	ldr	r1, [r7, #8]
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f001 fb0a 	bl	800e7c8 <UART_Start_Receive_IT>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	e000      	b.n	800d1ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d1b8:	2302      	movs	r3, #2
  }
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3728      	adds	r7, #40	; 0x28
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	58000c00 	.word	0x58000c00

0800d1c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b0ba      	sub	sp, #232	; 0xe8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d1ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d1f2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d1fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d200:	2b00      	cmp	r3, #0
 800d202:	d11b      	bne.n	800d23c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d208:	f003 0320 	and.w	r3, r3, #32
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d015      	beq.n	800d23c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d214:	f003 0320 	and.w	r3, r3, #32
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d105      	bne.n	800d228 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d21c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d009      	beq.n	800d23c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f000 8377 	beq.w	800d920 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	4798      	blx	r3
      }
      return;
 800d23a:	e371      	b.n	800d920 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d23c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 8123 	beq.w	800d48c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d246:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d24a:	4b8d      	ldr	r3, [pc, #564]	; (800d480 <HAL_UART_IRQHandler+0x2b8>)
 800d24c:	4013      	ands	r3, r2
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d256:	4b8b      	ldr	r3, [pc, #556]	; (800d484 <HAL_UART_IRQHandler+0x2bc>)
 800d258:	4013      	ands	r3, r2
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f000 8116 	beq.w	800d48c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d264:	f003 0301 	and.w	r3, r3, #1
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d011      	beq.n	800d290 <HAL_UART_IRQHandler+0xc8>
 800d26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00b      	beq.n	800d290 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2201      	movs	r2, #1
 800d27e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d286:	f043 0201 	orr.w	r2, r3, #1
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d294:	f003 0302 	and.w	r3, r3, #2
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d011      	beq.n	800d2c0 <HAL_UART_IRQHandler+0xf8>
 800d29c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00b      	beq.n	800d2c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2b6:	f043 0204 	orr.w	r2, r3, #4
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2c4:	f003 0304 	and.w	r3, r3, #4
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d011      	beq.n	800d2f0 <HAL_UART_IRQHandler+0x128>
 800d2cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2d0:	f003 0301 	and.w	r3, r3, #1
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d00b      	beq.n	800d2f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2204      	movs	r2, #4
 800d2de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2e6:	f043 0202 	orr.w	r2, r3, #2
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2f4:	f003 0308 	and.w	r3, r3, #8
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d017      	beq.n	800d32c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d300:	f003 0320 	and.w	r3, r3, #32
 800d304:	2b00      	cmp	r3, #0
 800d306:	d105      	bne.n	800d314 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d308:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d30c:	4b5c      	ldr	r3, [pc, #368]	; (800d480 <HAL_UART_IRQHandler+0x2b8>)
 800d30e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00b      	beq.n	800d32c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2208      	movs	r2, #8
 800d31a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d322:	f043 0208 	orr.w	r2, r3, #8
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d334:	2b00      	cmp	r3, #0
 800d336:	d012      	beq.n	800d35e <HAL_UART_IRQHandler+0x196>
 800d338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d33c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00c      	beq.n	800d35e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d34c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d354:	f043 0220 	orr.w	r2, r3, #32
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 82dd 	beq.w	800d924 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d36e:	f003 0320 	and.w	r3, r3, #32
 800d372:	2b00      	cmp	r3, #0
 800d374:	d013      	beq.n	800d39e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d37a:	f003 0320 	and.w	r3, r3, #32
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d105      	bne.n	800d38e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d007      	beq.n	800d39e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d392:	2b00      	cmp	r3, #0
 800d394:	d003      	beq.n	800d39e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b2:	2b40      	cmp	r3, #64	; 0x40
 800d3b4:	d005      	beq.n	800d3c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d3b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d3ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d054      	beq.n	800d46c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f001 fb22 	bl	800ea0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3d2:	2b40      	cmp	r3, #64	; 0x40
 800d3d4:	d146      	bne.n	800d464 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3308      	adds	r3, #8
 800d3dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d3e4:	e853 3f00 	ldrex	r3, [r3]
 800d3e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d3ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d3f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d402:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d406:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d40e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d412:	e841 2300 	strex	r3, r2, [r1]
 800d416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d41a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1d9      	bne.n	800d3d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d017      	beq.n	800d45c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d432:	4a15      	ldr	r2, [pc, #84]	; (800d488 <HAL_UART_IRQHandler+0x2c0>)
 800d434:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fa f8ad 	bl	800759c <HAL_DMA_Abort_IT>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d019      	beq.n	800d47c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d456:	4610      	mov	r0, r2
 800d458:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d45a:	e00f      	b.n	800d47c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fa81 	bl	800d964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d462:	e00b      	b.n	800d47c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fa7d 	bl	800d964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d46a:	e007      	b.n	800d47c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 fa79 	bl	800d964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d47a:	e253      	b.n	800d924 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d47c:	bf00      	nop
    return;
 800d47e:	e251      	b.n	800d924 <HAL_UART_IRQHandler+0x75c>
 800d480:	10000001 	.word	0x10000001
 800d484:	04000120 	.word	0x04000120
 800d488:	0800ead9 	.word	0x0800ead9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d490:	2b01      	cmp	r3, #1
 800d492:	f040 81e7 	bne.w	800d864 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d49a:	f003 0310 	and.w	r3, r3, #16
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f000 81e0 	beq.w	800d864 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4a8:	f003 0310 	and.w	r3, r3, #16
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 81d9 	beq.w	800d864 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2210      	movs	r2, #16
 800d4b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	689b      	ldr	r3, [r3, #8]
 800d4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4c4:	2b40      	cmp	r3, #64	; 0x40
 800d4c6:	f040 8151 	bne.w	800d76c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	4a96      	ldr	r2, [pc, #600]	; (800d72c <HAL_UART_IRQHandler+0x564>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d068      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a93      	ldr	r2, [pc, #588]	; (800d730 <HAL_UART_IRQHandler+0x568>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d061      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a91      	ldr	r2, [pc, #580]	; (800d734 <HAL_UART_IRQHandler+0x56c>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d05a      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a8e      	ldr	r2, [pc, #568]	; (800d738 <HAL_UART_IRQHandler+0x570>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d053      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a8c      	ldr	r2, [pc, #560]	; (800d73c <HAL_UART_IRQHandler+0x574>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d04c      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a89      	ldr	r2, [pc, #548]	; (800d740 <HAL_UART_IRQHandler+0x578>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d045      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a87      	ldr	r2, [pc, #540]	; (800d744 <HAL_UART_IRQHandler+0x57c>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d03e      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a84      	ldr	r2, [pc, #528]	; (800d748 <HAL_UART_IRQHandler+0x580>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d037      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a82      	ldr	r2, [pc, #520]	; (800d74c <HAL_UART_IRQHandler+0x584>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d030      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a7f      	ldr	r2, [pc, #508]	; (800d750 <HAL_UART_IRQHandler+0x588>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d029      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a7d      	ldr	r2, [pc, #500]	; (800d754 <HAL_UART_IRQHandler+0x58c>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d022      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a7a      	ldr	r2, [pc, #488]	; (800d758 <HAL_UART_IRQHandler+0x590>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d01b      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a78      	ldr	r2, [pc, #480]	; (800d75c <HAL_UART_IRQHandler+0x594>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d014      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a75      	ldr	r2, [pc, #468]	; (800d760 <HAL_UART_IRQHandler+0x598>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d00d      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a73      	ldr	r2, [pc, #460]	; (800d764 <HAL_UART_IRQHandler+0x59c>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d006      	beq.n	800d5aa <HAL_UART_IRQHandler+0x3e2>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a70      	ldr	r2, [pc, #448]	; (800d768 <HAL_UART_IRQHandler+0x5a0>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d106      	bne.n	800d5b8 <HAL_UART_IRQHandler+0x3f0>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	e005      	b.n	800d5c4 <HAL_UART_IRQHandler+0x3fc>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d5c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f000 81ab 	beq.w	800d928 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	f080 81a3 	bcs.w	800d928 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5f2:	69db      	ldr	r3, [r3, #28]
 800d5f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5f8:	f000 8087 	beq.w	800d70a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d608:	e853 3f00 	ldrex	r3, [r3]
 800d60c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d610:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	461a      	mov	r2, r3
 800d622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d62a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d636:	e841 2300 	strex	r3, r2, [r1]
 800d63a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d63e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1da      	bne.n	800d5fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3308      	adds	r3, #8
 800d64c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d650:	e853 3f00 	ldrex	r3, [r3]
 800d654:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d658:	f023 0301 	bic.w	r3, r3, #1
 800d65c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3308      	adds	r3, #8
 800d666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d66a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d66e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d672:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d676:	e841 2300 	strex	r3, r2, [r1]
 800d67a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d67c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1e1      	bne.n	800d646 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3308      	adds	r3, #8
 800d688:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d68c:	e853 3f00 	ldrex	r3, [r3]
 800d690:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	3308      	adds	r3, #8
 800d6a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d6a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d6a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d6ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6ae:	e841 2300 	strex	r3, r2, [r1]
 800d6b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d6b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1e3      	bne.n	800d682 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d0:	e853 3f00 	ldrex	r3, [r3]
 800d6d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6d8:	f023 0310 	bic.w	r3, r3, #16
 800d6dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6f2:	e841 2300 	strex	r3, r2, [r1]
 800d6f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1e4      	bne.n	800d6c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d704:	4618      	mov	r0, r3
 800d706:	f7f9 fc2b 	bl	8006f60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2202      	movs	r2, #2
 800d70e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	b29b      	uxth	r3, r3
 800d722:	4619      	mov	r1, r3
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 f927 	bl	800d978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d72a:	e0fd      	b.n	800d928 <HAL_UART_IRQHandler+0x760>
 800d72c:	40020010 	.word	0x40020010
 800d730:	40020028 	.word	0x40020028
 800d734:	40020040 	.word	0x40020040
 800d738:	40020058 	.word	0x40020058
 800d73c:	40020070 	.word	0x40020070
 800d740:	40020088 	.word	0x40020088
 800d744:	400200a0 	.word	0x400200a0
 800d748:	400200b8 	.word	0x400200b8
 800d74c:	40020410 	.word	0x40020410
 800d750:	40020428 	.word	0x40020428
 800d754:	40020440 	.word	0x40020440
 800d758:	40020458 	.word	0x40020458
 800d75c:	40020470 	.word	0x40020470
 800d760:	40020488 	.word	0x40020488
 800d764:	400204a0 	.word	0x400204a0
 800d768:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d778:	b29b      	uxth	r3, r3
 800d77a:	1ad3      	subs	r3, r2, r3
 800d77c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d786:	b29b      	uxth	r3, r3
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 80cf 	beq.w	800d92c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d78e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d792:	2b00      	cmp	r3, #0
 800d794:	f000 80ca 	beq.w	800d92c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a0:	e853 3f00 	ldrex	r3, [r3]
 800d7a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d7ba:	647b      	str	r3, [r7, #68]	; 0x44
 800d7bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7c2:	e841 2300 	strex	r3, r2, [r1]
 800d7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1e4      	bne.n	800d798 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	3308      	adds	r3, #8
 800d7d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	e853 3f00 	ldrex	r3, [r3]
 800d7dc:	623b      	str	r3, [r7, #32]
   return(result);
 800d7de:	6a3a      	ldr	r2, [r7, #32]
 800d7e0:	4b55      	ldr	r3, [pc, #340]	; (800d938 <HAL_UART_IRQHandler+0x770>)
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3308      	adds	r3, #8
 800d7ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d7f2:	633a      	str	r2, [r7, #48]	; 0x30
 800d7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7fa:	e841 2300 	strex	r3, r2, [r1]
 800d7fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1e3      	bne.n	800d7ce <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2220      	movs	r2, #32
 800d80a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	e853 3f00 	ldrex	r3, [r3]
 800d826:	60fb      	str	r3, [r7, #12]
   return(result);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f023 0310 	bic.w	r3, r3, #16
 800d82e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	461a      	mov	r2, r3
 800d838:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d83c:	61fb      	str	r3, [r7, #28]
 800d83e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d840:	69b9      	ldr	r1, [r7, #24]
 800d842:	69fa      	ldr	r2, [r7, #28]
 800d844:	e841 2300 	strex	r3, r2, [r1]
 800d848:	617b      	str	r3, [r7, #20]
   return(result);
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1e4      	bne.n	800d81a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2202      	movs	r2, #2
 800d854:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d856:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f88b 	bl	800d978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d862:	e063      	b.n	800d92c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00e      	beq.n	800d88e <HAL_UART_IRQHandler+0x6c6>
 800d870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d008      	beq.n	800d88e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f001 fe84 	bl	800f594 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d88c:	e051      	b.n	800d932 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d88e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d896:	2b00      	cmp	r3, #0
 800d898:	d014      	beq.n	800d8c4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d89a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d105      	bne.n	800d8b2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d8a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d008      	beq.n	800d8c4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d03a      	beq.n	800d930 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	4798      	blx	r3
    }
    return;
 800d8c2:	e035      	b.n	800d930 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d8c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d009      	beq.n	800d8e4 <HAL_UART_IRQHandler+0x71c>
 800d8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d003      	beq.n	800d8e4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f001 f911 	bl	800eb04 <UART_EndTransmit_IT>
    return;
 800d8e2:	e026      	b.n	800d932 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d8e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d009      	beq.n	800d904 <HAL_UART_IRQHandler+0x73c>
 800d8f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d003      	beq.n	800d904 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f001 fe5d 	bl	800f5bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d902:	e016      	b.n	800d932 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d010      	beq.n	800d932 <HAL_UART_IRQHandler+0x76a>
 800d910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d914:	2b00      	cmp	r3, #0
 800d916:	da0c      	bge.n	800d932 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f001 fe45 	bl	800f5a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d91e:	e008      	b.n	800d932 <HAL_UART_IRQHandler+0x76a>
      return;
 800d920:	bf00      	nop
 800d922:	e006      	b.n	800d932 <HAL_UART_IRQHandler+0x76a>
    return;
 800d924:	bf00      	nop
 800d926:	e004      	b.n	800d932 <HAL_UART_IRQHandler+0x76a>
      return;
 800d928:	bf00      	nop
 800d92a:	e002      	b.n	800d932 <HAL_UART_IRQHandler+0x76a>
      return;
 800d92c:	bf00      	nop
 800d92e:	e000      	b.n	800d932 <HAL_UART_IRQHandler+0x76a>
    return;
 800d930:	bf00      	nop
  }
}
 800d932:	37e8      	adds	r7, #232	; 0xe8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	effffffe 	.word	0xeffffffe

0800d93c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d944:	bf00      	nop
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d958:	bf00      	nop
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d96c:	bf00      	nop
 800d96e:	370c      	adds	r7, #12
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	460b      	mov	r3, r1
 800d982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d984:	bf00      	nop
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d994:	b092      	sub	sp, #72	; 0x48
 800d996:	af00      	add	r7, sp, #0
 800d998:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d99a:	2300      	movs	r3, #0
 800d99c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	689a      	ldr	r2, [r3, #8]
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	431a      	orrs	r2, r3
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	695b      	ldr	r3, [r3, #20]
 800d9ae:	431a      	orrs	r2, r3
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	69db      	ldr	r3, [r3, #28]
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	4bbe      	ldr	r3, [pc, #760]	; (800dcb8 <UART_SetConfig+0x328>)
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	6812      	ldr	r2, [r2, #0]
 800d9c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9c8:	430b      	orrs	r3, r1
 800d9ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	68da      	ldr	r2, [r3, #12]
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	430a      	orrs	r2, r1
 800d9e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	699b      	ldr	r3, [r3, #24]
 800d9e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4ab3      	ldr	r2, [pc, #716]	; (800dcbc <UART_SetConfig+0x32c>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d004      	beq.n	800d9fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	6a1b      	ldr	r3, [r3, #32]
 800d9f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	689a      	ldr	r2, [r3, #8]
 800da02:	4baf      	ldr	r3, [pc, #700]	; (800dcc0 <UART_SetConfig+0x330>)
 800da04:	4013      	ands	r3, r2
 800da06:	697a      	ldr	r2, [r7, #20]
 800da08:	6812      	ldr	r2, [r2, #0]
 800da0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da0c:	430b      	orrs	r3, r1
 800da0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da16:	f023 010f 	bic.w	r1, r3, #15
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	430a      	orrs	r2, r1
 800da24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4aa6      	ldr	r2, [pc, #664]	; (800dcc4 <UART_SetConfig+0x334>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d177      	bne.n	800db20 <UART_SetConfig+0x190>
 800da30:	4ba5      	ldr	r3, [pc, #660]	; (800dcc8 <UART_SetConfig+0x338>)
 800da32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da38:	2b28      	cmp	r3, #40	; 0x28
 800da3a:	d86d      	bhi.n	800db18 <UART_SetConfig+0x188>
 800da3c:	a201      	add	r2, pc, #4	; (adr r2, 800da44 <UART_SetConfig+0xb4>)
 800da3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da42:	bf00      	nop
 800da44:	0800dae9 	.word	0x0800dae9
 800da48:	0800db19 	.word	0x0800db19
 800da4c:	0800db19 	.word	0x0800db19
 800da50:	0800db19 	.word	0x0800db19
 800da54:	0800db19 	.word	0x0800db19
 800da58:	0800db19 	.word	0x0800db19
 800da5c:	0800db19 	.word	0x0800db19
 800da60:	0800db19 	.word	0x0800db19
 800da64:	0800daf1 	.word	0x0800daf1
 800da68:	0800db19 	.word	0x0800db19
 800da6c:	0800db19 	.word	0x0800db19
 800da70:	0800db19 	.word	0x0800db19
 800da74:	0800db19 	.word	0x0800db19
 800da78:	0800db19 	.word	0x0800db19
 800da7c:	0800db19 	.word	0x0800db19
 800da80:	0800db19 	.word	0x0800db19
 800da84:	0800daf9 	.word	0x0800daf9
 800da88:	0800db19 	.word	0x0800db19
 800da8c:	0800db19 	.word	0x0800db19
 800da90:	0800db19 	.word	0x0800db19
 800da94:	0800db19 	.word	0x0800db19
 800da98:	0800db19 	.word	0x0800db19
 800da9c:	0800db19 	.word	0x0800db19
 800daa0:	0800db19 	.word	0x0800db19
 800daa4:	0800db01 	.word	0x0800db01
 800daa8:	0800db19 	.word	0x0800db19
 800daac:	0800db19 	.word	0x0800db19
 800dab0:	0800db19 	.word	0x0800db19
 800dab4:	0800db19 	.word	0x0800db19
 800dab8:	0800db19 	.word	0x0800db19
 800dabc:	0800db19 	.word	0x0800db19
 800dac0:	0800db19 	.word	0x0800db19
 800dac4:	0800db09 	.word	0x0800db09
 800dac8:	0800db19 	.word	0x0800db19
 800dacc:	0800db19 	.word	0x0800db19
 800dad0:	0800db19 	.word	0x0800db19
 800dad4:	0800db19 	.word	0x0800db19
 800dad8:	0800db19 	.word	0x0800db19
 800dadc:	0800db19 	.word	0x0800db19
 800dae0:	0800db19 	.word	0x0800db19
 800dae4:	0800db11 	.word	0x0800db11
 800dae8:	2301      	movs	r3, #1
 800daea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daee:	e222      	b.n	800df36 <UART_SetConfig+0x5a6>
 800daf0:	2304      	movs	r3, #4
 800daf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf6:	e21e      	b.n	800df36 <UART_SetConfig+0x5a6>
 800daf8:	2308      	movs	r3, #8
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafe:	e21a      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db00:	2310      	movs	r3, #16
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db06:	e216      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db08:	2320      	movs	r3, #32
 800db0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0e:	e212      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db10:	2340      	movs	r3, #64	; 0x40
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db16:	e20e      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db18:	2380      	movs	r3, #128	; 0x80
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1e:	e20a      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a69      	ldr	r2, [pc, #420]	; (800dccc <UART_SetConfig+0x33c>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d130      	bne.n	800db8c <UART_SetConfig+0x1fc>
 800db2a:	4b67      	ldr	r3, [pc, #412]	; (800dcc8 <UART_SetConfig+0x338>)
 800db2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db2e:	f003 0307 	and.w	r3, r3, #7
 800db32:	2b05      	cmp	r3, #5
 800db34:	d826      	bhi.n	800db84 <UART_SetConfig+0x1f4>
 800db36:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <UART_SetConfig+0x1ac>)
 800db38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3c:	0800db55 	.word	0x0800db55
 800db40:	0800db5d 	.word	0x0800db5d
 800db44:	0800db65 	.word	0x0800db65
 800db48:	0800db6d 	.word	0x0800db6d
 800db4c:	0800db75 	.word	0x0800db75
 800db50:	0800db7d 	.word	0x0800db7d
 800db54:	2300      	movs	r3, #0
 800db56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5a:	e1ec      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db5c:	2304      	movs	r3, #4
 800db5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db62:	e1e8      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db64:	2308      	movs	r3, #8
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6a:	e1e4      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db6c:	2310      	movs	r3, #16
 800db6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db72:	e1e0      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db74:	2320      	movs	r3, #32
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7a:	e1dc      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db7c:	2340      	movs	r3, #64	; 0x40
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db82:	e1d8      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db84:	2380      	movs	r3, #128	; 0x80
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e1d4      	b.n	800df36 <UART_SetConfig+0x5a6>
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a4f      	ldr	r2, [pc, #316]	; (800dcd0 <UART_SetConfig+0x340>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d130      	bne.n	800dbf8 <UART_SetConfig+0x268>
 800db96:	4b4c      	ldr	r3, [pc, #304]	; (800dcc8 <UART_SetConfig+0x338>)
 800db98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db9a:	f003 0307 	and.w	r3, r3, #7
 800db9e:	2b05      	cmp	r3, #5
 800dba0:	d826      	bhi.n	800dbf0 <UART_SetConfig+0x260>
 800dba2:	a201      	add	r2, pc, #4	; (adr r2, 800dba8 <UART_SetConfig+0x218>)
 800dba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba8:	0800dbc1 	.word	0x0800dbc1
 800dbac:	0800dbc9 	.word	0x0800dbc9
 800dbb0:	0800dbd1 	.word	0x0800dbd1
 800dbb4:	0800dbd9 	.word	0x0800dbd9
 800dbb8:	0800dbe1 	.word	0x0800dbe1
 800dbbc:	0800dbe9 	.word	0x0800dbe9
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc6:	e1b6      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dbc8:	2304      	movs	r3, #4
 800dbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbce:	e1b2      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dbd0:	2308      	movs	r3, #8
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd6:	e1ae      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dbd8:	2310      	movs	r3, #16
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbde:	e1aa      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dbe0:	2320      	movs	r3, #32
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e1a6      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dbe8:	2340      	movs	r3, #64	; 0x40
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e1a2      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dbf0:	2380      	movs	r3, #128	; 0x80
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e19e      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a35      	ldr	r2, [pc, #212]	; (800dcd4 <UART_SetConfig+0x344>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d130      	bne.n	800dc64 <UART_SetConfig+0x2d4>
 800dc02:	4b31      	ldr	r3, [pc, #196]	; (800dcc8 <UART_SetConfig+0x338>)
 800dc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc06:	f003 0307 	and.w	r3, r3, #7
 800dc0a:	2b05      	cmp	r3, #5
 800dc0c:	d826      	bhi.n	800dc5c <UART_SetConfig+0x2cc>
 800dc0e:	a201      	add	r2, pc, #4	; (adr r2, 800dc14 <UART_SetConfig+0x284>)
 800dc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc14:	0800dc2d 	.word	0x0800dc2d
 800dc18:	0800dc35 	.word	0x0800dc35
 800dc1c:	0800dc3d 	.word	0x0800dc3d
 800dc20:	0800dc45 	.word	0x0800dc45
 800dc24:	0800dc4d 	.word	0x0800dc4d
 800dc28:	0800dc55 	.word	0x0800dc55
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc32:	e180      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dc34:	2304      	movs	r3, #4
 800dc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3a:	e17c      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dc3c:	2308      	movs	r3, #8
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc42:	e178      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dc44:	2310      	movs	r3, #16
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4a:	e174      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dc4c:	2320      	movs	r3, #32
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc52:	e170      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dc54:	2340      	movs	r3, #64	; 0x40
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5a:	e16c      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dc5c:	2380      	movs	r3, #128	; 0x80
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e168      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a1b      	ldr	r2, [pc, #108]	; (800dcd8 <UART_SetConfig+0x348>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d142      	bne.n	800dcf4 <UART_SetConfig+0x364>
 800dc6e:	4b16      	ldr	r3, [pc, #88]	; (800dcc8 <UART_SetConfig+0x338>)
 800dc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc72:	f003 0307 	and.w	r3, r3, #7
 800dc76:	2b05      	cmp	r3, #5
 800dc78:	d838      	bhi.n	800dcec <UART_SetConfig+0x35c>
 800dc7a:	a201      	add	r2, pc, #4	; (adr r2, 800dc80 <UART_SetConfig+0x2f0>)
 800dc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc80:	0800dc99 	.word	0x0800dc99
 800dc84:	0800dca1 	.word	0x0800dca1
 800dc88:	0800dca9 	.word	0x0800dca9
 800dc8c:	0800dcb1 	.word	0x0800dcb1
 800dc90:	0800dcdd 	.word	0x0800dcdd
 800dc94:	0800dce5 	.word	0x0800dce5
 800dc98:	2300      	movs	r3, #0
 800dc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9e:	e14a      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dca0:	2304      	movs	r3, #4
 800dca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca6:	e146      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dca8:	2308      	movs	r3, #8
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcae:	e142      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dcb0:	2310      	movs	r3, #16
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e13e      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dcb8:	cfff69f3 	.word	0xcfff69f3
 800dcbc:	58000c00 	.word	0x58000c00
 800dcc0:	11fff4ff 	.word	0x11fff4ff
 800dcc4:	40011000 	.word	0x40011000
 800dcc8:	58024400 	.word	0x58024400
 800dccc:	40004400 	.word	0x40004400
 800dcd0:	40004800 	.word	0x40004800
 800dcd4:	40004c00 	.word	0x40004c00
 800dcd8:	40005000 	.word	0x40005000
 800dcdc:	2320      	movs	r3, #32
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce2:	e128      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dce4:	2340      	movs	r3, #64	; 0x40
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcea:	e124      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dcec:	2380      	movs	r3, #128	; 0x80
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e120      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4acb      	ldr	r2, [pc, #812]	; (800e028 <UART_SetConfig+0x698>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d176      	bne.n	800ddec <UART_SetConfig+0x45c>
 800dcfe:	4bcb      	ldr	r3, [pc, #812]	; (800e02c <UART_SetConfig+0x69c>)
 800dd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd06:	2b28      	cmp	r3, #40	; 0x28
 800dd08:	d86c      	bhi.n	800dde4 <UART_SetConfig+0x454>
 800dd0a:	a201      	add	r2, pc, #4	; (adr r2, 800dd10 <UART_SetConfig+0x380>)
 800dd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd10:	0800ddb5 	.word	0x0800ddb5
 800dd14:	0800dde5 	.word	0x0800dde5
 800dd18:	0800dde5 	.word	0x0800dde5
 800dd1c:	0800dde5 	.word	0x0800dde5
 800dd20:	0800dde5 	.word	0x0800dde5
 800dd24:	0800dde5 	.word	0x0800dde5
 800dd28:	0800dde5 	.word	0x0800dde5
 800dd2c:	0800dde5 	.word	0x0800dde5
 800dd30:	0800ddbd 	.word	0x0800ddbd
 800dd34:	0800dde5 	.word	0x0800dde5
 800dd38:	0800dde5 	.word	0x0800dde5
 800dd3c:	0800dde5 	.word	0x0800dde5
 800dd40:	0800dde5 	.word	0x0800dde5
 800dd44:	0800dde5 	.word	0x0800dde5
 800dd48:	0800dde5 	.word	0x0800dde5
 800dd4c:	0800dde5 	.word	0x0800dde5
 800dd50:	0800ddc5 	.word	0x0800ddc5
 800dd54:	0800dde5 	.word	0x0800dde5
 800dd58:	0800dde5 	.word	0x0800dde5
 800dd5c:	0800dde5 	.word	0x0800dde5
 800dd60:	0800dde5 	.word	0x0800dde5
 800dd64:	0800dde5 	.word	0x0800dde5
 800dd68:	0800dde5 	.word	0x0800dde5
 800dd6c:	0800dde5 	.word	0x0800dde5
 800dd70:	0800ddcd 	.word	0x0800ddcd
 800dd74:	0800dde5 	.word	0x0800dde5
 800dd78:	0800dde5 	.word	0x0800dde5
 800dd7c:	0800dde5 	.word	0x0800dde5
 800dd80:	0800dde5 	.word	0x0800dde5
 800dd84:	0800dde5 	.word	0x0800dde5
 800dd88:	0800dde5 	.word	0x0800dde5
 800dd8c:	0800dde5 	.word	0x0800dde5
 800dd90:	0800ddd5 	.word	0x0800ddd5
 800dd94:	0800dde5 	.word	0x0800dde5
 800dd98:	0800dde5 	.word	0x0800dde5
 800dd9c:	0800dde5 	.word	0x0800dde5
 800dda0:	0800dde5 	.word	0x0800dde5
 800dda4:	0800dde5 	.word	0x0800dde5
 800dda8:	0800dde5 	.word	0x0800dde5
 800ddac:	0800dde5 	.word	0x0800dde5
 800ddb0:	0800dddd 	.word	0x0800dddd
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddba:	e0bc      	b.n	800df36 <UART_SetConfig+0x5a6>
 800ddbc:	2304      	movs	r3, #4
 800ddbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc2:	e0b8      	b.n	800df36 <UART_SetConfig+0x5a6>
 800ddc4:	2308      	movs	r3, #8
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddca:	e0b4      	b.n	800df36 <UART_SetConfig+0x5a6>
 800ddcc:	2310      	movs	r3, #16
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd2:	e0b0      	b.n	800df36 <UART_SetConfig+0x5a6>
 800ddd4:	2320      	movs	r3, #32
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddda:	e0ac      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dddc:	2340      	movs	r3, #64	; 0x40
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e0a8      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dde4:	2380      	movs	r3, #128	; 0x80
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e0a4      	b.n	800df36 <UART_SetConfig+0x5a6>
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a8f      	ldr	r2, [pc, #572]	; (800e030 <UART_SetConfig+0x6a0>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d130      	bne.n	800de58 <UART_SetConfig+0x4c8>
 800ddf6:	4b8d      	ldr	r3, [pc, #564]	; (800e02c <UART_SetConfig+0x69c>)
 800ddf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddfa:	f003 0307 	and.w	r3, r3, #7
 800ddfe:	2b05      	cmp	r3, #5
 800de00:	d826      	bhi.n	800de50 <UART_SetConfig+0x4c0>
 800de02:	a201      	add	r2, pc, #4	; (adr r2, 800de08 <UART_SetConfig+0x478>)
 800de04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de08:	0800de21 	.word	0x0800de21
 800de0c:	0800de29 	.word	0x0800de29
 800de10:	0800de31 	.word	0x0800de31
 800de14:	0800de39 	.word	0x0800de39
 800de18:	0800de41 	.word	0x0800de41
 800de1c:	0800de49 	.word	0x0800de49
 800de20:	2300      	movs	r3, #0
 800de22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de26:	e086      	b.n	800df36 <UART_SetConfig+0x5a6>
 800de28:	2304      	movs	r3, #4
 800de2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2e:	e082      	b.n	800df36 <UART_SetConfig+0x5a6>
 800de30:	2308      	movs	r3, #8
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de36:	e07e      	b.n	800df36 <UART_SetConfig+0x5a6>
 800de38:	2310      	movs	r3, #16
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3e:	e07a      	b.n	800df36 <UART_SetConfig+0x5a6>
 800de40:	2320      	movs	r3, #32
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de46:	e076      	b.n	800df36 <UART_SetConfig+0x5a6>
 800de48:	2340      	movs	r3, #64	; 0x40
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e072      	b.n	800df36 <UART_SetConfig+0x5a6>
 800de50:	2380      	movs	r3, #128	; 0x80
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e06e      	b.n	800df36 <UART_SetConfig+0x5a6>
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a75      	ldr	r2, [pc, #468]	; (800e034 <UART_SetConfig+0x6a4>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d130      	bne.n	800dec4 <UART_SetConfig+0x534>
 800de62:	4b72      	ldr	r3, [pc, #456]	; (800e02c <UART_SetConfig+0x69c>)
 800de64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de66:	f003 0307 	and.w	r3, r3, #7
 800de6a:	2b05      	cmp	r3, #5
 800de6c:	d826      	bhi.n	800debc <UART_SetConfig+0x52c>
 800de6e:	a201      	add	r2, pc, #4	; (adr r2, 800de74 <UART_SetConfig+0x4e4>)
 800de70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de74:	0800de8d 	.word	0x0800de8d
 800de78:	0800de95 	.word	0x0800de95
 800de7c:	0800de9d 	.word	0x0800de9d
 800de80:	0800dea5 	.word	0x0800dea5
 800de84:	0800dead 	.word	0x0800dead
 800de88:	0800deb5 	.word	0x0800deb5
 800de8c:	2300      	movs	r3, #0
 800de8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de92:	e050      	b.n	800df36 <UART_SetConfig+0x5a6>
 800de94:	2304      	movs	r3, #4
 800de96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9a:	e04c      	b.n	800df36 <UART_SetConfig+0x5a6>
 800de9c:	2308      	movs	r3, #8
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea2:	e048      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dea4:	2310      	movs	r3, #16
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e044      	b.n	800df36 <UART_SetConfig+0x5a6>
 800deac:	2320      	movs	r3, #32
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e040      	b.n	800df36 <UART_SetConfig+0x5a6>
 800deb4:	2340      	movs	r3, #64	; 0x40
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e03c      	b.n	800df36 <UART_SetConfig+0x5a6>
 800debc:	2380      	movs	r3, #128	; 0x80
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e038      	b.n	800df36 <UART_SetConfig+0x5a6>
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4a5b      	ldr	r2, [pc, #364]	; (800e038 <UART_SetConfig+0x6a8>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d130      	bne.n	800df30 <UART_SetConfig+0x5a0>
 800dece:	4b57      	ldr	r3, [pc, #348]	; (800e02c <UART_SetConfig+0x69c>)
 800ded0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ded2:	f003 0307 	and.w	r3, r3, #7
 800ded6:	2b05      	cmp	r3, #5
 800ded8:	d826      	bhi.n	800df28 <UART_SetConfig+0x598>
 800deda:	a201      	add	r2, pc, #4	; (adr r2, 800dee0 <UART_SetConfig+0x550>)
 800dedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee0:	0800def9 	.word	0x0800def9
 800dee4:	0800df01 	.word	0x0800df01
 800dee8:	0800df09 	.word	0x0800df09
 800deec:	0800df11 	.word	0x0800df11
 800def0:	0800df19 	.word	0x0800df19
 800def4:	0800df21 	.word	0x0800df21
 800def8:	2302      	movs	r3, #2
 800defa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800defe:	e01a      	b.n	800df36 <UART_SetConfig+0x5a6>
 800df00:	2304      	movs	r3, #4
 800df02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df06:	e016      	b.n	800df36 <UART_SetConfig+0x5a6>
 800df08:	2308      	movs	r3, #8
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0e:	e012      	b.n	800df36 <UART_SetConfig+0x5a6>
 800df10:	2310      	movs	r3, #16
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df16:	e00e      	b.n	800df36 <UART_SetConfig+0x5a6>
 800df18:	2320      	movs	r3, #32
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1e:	e00a      	b.n	800df36 <UART_SetConfig+0x5a6>
 800df20:	2340      	movs	r3, #64	; 0x40
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e006      	b.n	800df36 <UART_SetConfig+0x5a6>
 800df28:	2380      	movs	r3, #128	; 0x80
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e002      	b.n	800df36 <UART_SetConfig+0x5a6>
 800df30:	2380      	movs	r3, #128	; 0x80
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4a3f      	ldr	r2, [pc, #252]	; (800e038 <UART_SetConfig+0x6a8>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	f040 80f8 	bne.w	800e132 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df46:	2b20      	cmp	r3, #32
 800df48:	dc46      	bgt.n	800dfd8 <UART_SetConfig+0x648>
 800df4a:	2b02      	cmp	r3, #2
 800df4c:	f2c0 8082 	blt.w	800e054 <UART_SetConfig+0x6c4>
 800df50:	3b02      	subs	r3, #2
 800df52:	2b1e      	cmp	r3, #30
 800df54:	d87e      	bhi.n	800e054 <UART_SetConfig+0x6c4>
 800df56:	a201      	add	r2, pc, #4	; (adr r2, 800df5c <UART_SetConfig+0x5cc>)
 800df58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5c:	0800dfdf 	.word	0x0800dfdf
 800df60:	0800e055 	.word	0x0800e055
 800df64:	0800dfe7 	.word	0x0800dfe7
 800df68:	0800e055 	.word	0x0800e055
 800df6c:	0800e055 	.word	0x0800e055
 800df70:	0800e055 	.word	0x0800e055
 800df74:	0800dff7 	.word	0x0800dff7
 800df78:	0800e055 	.word	0x0800e055
 800df7c:	0800e055 	.word	0x0800e055
 800df80:	0800e055 	.word	0x0800e055
 800df84:	0800e055 	.word	0x0800e055
 800df88:	0800e055 	.word	0x0800e055
 800df8c:	0800e055 	.word	0x0800e055
 800df90:	0800e055 	.word	0x0800e055
 800df94:	0800e007 	.word	0x0800e007
 800df98:	0800e055 	.word	0x0800e055
 800df9c:	0800e055 	.word	0x0800e055
 800dfa0:	0800e055 	.word	0x0800e055
 800dfa4:	0800e055 	.word	0x0800e055
 800dfa8:	0800e055 	.word	0x0800e055
 800dfac:	0800e055 	.word	0x0800e055
 800dfb0:	0800e055 	.word	0x0800e055
 800dfb4:	0800e055 	.word	0x0800e055
 800dfb8:	0800e055 	.word	0x0800e055
 800dfbc:	0800e055 	.word	0x0800e055
 800dfc0:	0800e055 	.word	0x0800e055
 800dfc4:	0800e055 	.word	0x0800e055
 800dfc8:	0800e055 	.word	0x0800e055
 800dfcc:	0800e055 	.word	0x0800e055
 800dfd0:	0800e055 	.word	0x0800e055
 800dfd4:	0800e047 	.word	0x0800e047
 800dfd8:	2b40      	cmp	r3, #64	; 0x40
 800dfda:	d037      	beq.n	800e04c <UART_SetConfig+0x6bc>
 800dfdc:	e03a      	b.n	800e054 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dfde:	f7fc feaf 	bl	800ad40 <HAL_RCCEx_GetD3PCLK1Freq>
 800dfe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dfe4:	e03c      	b.n	800e060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fc febe 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dff4:	e034      	b.n	800e060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dff6:	f107 0318 	add.w	r3, r7, #24
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fd f80a 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e004:	e02c      	b.n	800e060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e006:	4b09      	ldr	r3, [pc, #36]	; (800e02c <UART_SetConfig+0x69c>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f003 0320 	and.w	r3, r3, #32
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d016      	beq.n	800e040 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e012:	4b06      	ldr	r3, [pc, #24]	; (800e02c <UART_SetConfig+0x69c>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	08db      	lsrs	r3, r3, #3
 800e018:	f003 0303 	and.w	r3, r3, #3
 800e01c:	4a07      	ldr	r2, [pc, #28]	; (800e03c <UART_SetConfig+0x6ac>)
 800e01e:	fa22 f303 	lsr.w	r3, r2, r3
 800e022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e024:	e01c      	b.n	800e060 <UART_SetConfig+0x6d0>
 800e026:	bf00      	nop
 800e028:	40011400 	.word	0x40011400
 800e02c:	58024400 	.word	0x58024400
 800e030:	40007800 	.word	0x40007800
 800e034:	40007c00 	.word	0x40007c00
 800e038:	58000c00 	.word	0x58000c00
 800e03c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e040:	4b9d      	ldr	r3, [pc, #628]	; (800e2b8 <UART_SetConfig+0x928>)
 800e042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e044:	e00c      	b.n	800e060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e046:	4b9d      	ldr	r3, [pc, #628]	; (800e2bc <UART_SetConfig+0x92c>)
 800e048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e04a:	e009      	b.n	800e060 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e04c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e052:	e005      	b.n	800e060 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e054:	2300      	movs	r3, #0
 800e056:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e058:	2301      	movs	r3, #1
 800e05a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e05e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 81de 	beq.w	800e424 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06c:	4a94      	ldr	r2, [pc, #592]	; (800e2c0 <UART_SetConfig+0x930>)
 800e06e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e072:	461a      	mov	r2, r3
 800e074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e076:	fbb3 f3f2 	udiv	r3, r3, r2
 800e07a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	685a      	ldr	r2, [r3, #4]
 800e080:	4613      	mov	r3, r2
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	4413      	add	r3, r2
 800e086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e088:	429a      	cmp	r2, r3
 800e08a:	d305      	bcc.n	800e098 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e094:	429a      	cmp	r2, r3
 800e096:	d903      	bls.n	800e0a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e098:	2301      	movs	r3, #1
 800e09a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e09e:	e1c1      	b.n	800e424 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	60bb      	str	r3, [r7, #8]
 800e0a6:	60fa      	str	r2, [r7, #12]
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ac:	4a84      	ldr	r2, [pc, #528]	; (800e2c0 <UART_SetConfig+0x930>)
 800e0ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	603b      	str	r3, [r7, #0]
 800e0b8:	607a      	str	r2, [r7, #4]
 800e0ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0c2:	f7f2 f909 	bl	80002d8 <__aeabi_uldivmod>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	4610      	mov	r0, r2
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	f04f 0200 	mov.w	r2, #0
 800e0d2:	f04f 0300 	mov.w	r3, #0
 800e0d6:	020b      	lsls	r3, r1, #8
 800e0d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e0dc:	0202      	lsls	r2, r0, #8
 800e0de:	6979      	ldr	r1, [r7, #20]
 800e0e0:	6849      	ldr	r1, [r1, #4]
 800e0e2:	0849      	lsrs	r1, r1, #1
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	4605      	mov	r5, r0
 800e0ea:	eb12 0804 	adds.w	r8, r2, r4
 800e0ee:	eb43 0905 	adc.w	r9, r3, r5
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	469a      	mov	sl, r3
 800e0fa:	4693      	mov	fp, r2
 800e0fc:	4652      	mov	r2, sl
 800e0fe:	465b      	mov	r3, fp
 800e100:	4640      	mov	r0, r8
 800e102:	4649      	mov	r1, r9
 800e104:	f7f2 f8e8 	bl	80002d8 <__aeabi_uldivmod>
 800e108:	4602      	mov	r2, r0
 800e10a:	460b      	mov	r3, r1
 800e10c:	4613      	mov	r3, r2
 800e10e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e116:	d308      	bcc.n	800e12a <UART_SetConfig+0x79a>
 800e118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e11e:	d204      	bcs.n	800e12a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e126:	60da      	str	r2, [r3, #12]
 800e128:	e17c      	b.n	800e424 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e12a:	2301      	movs	r3, #1
 800e12c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e130:	e178      	b.n	800e424 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	69db      	ldr	r3, [r3, #28]
 800e136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e13a:	f040 80c5 	bne.w	800e2c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e13e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e142:	2b20      	cmp	r3, #32
 800e144:	dc48      	bgt.n	800e1d8 <UART_SetConfig+0x848>
 800e146:	2b00      	cmp	r3, #0
 800e148:	db7b      	blt.n	800e242 <UART_SetConfig+0x8b2>
 800e14a:	2b20      	cmp	r3, #32
 800e14c:	d879      	bhi.n	800e242 <UART_SetConfig+0x8b2>
 800e14e:	a201      	add	r2, pc, #4	; (adr r2, 800e154 <UART_SetConfig+0x7c4>)
 800e150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e154:	0800e1df 	.word	0x0800e1df
 800e158:	0800e1e7 	.word	0x0800e1e7
 800e15c:	0800e243 	.word	0x0800e243
 800e160:	0800e243 	.word	0x0800e243
 800e164:	0800e1ef 	.word	0x0800e1ef
 800e168:	0800e243 	.word	0x0800e243
 800e16c:	0800e243 	.word	0x0800e243
 800e170:	0800e243 	.word	0x0800e243
 800e174:	0800e1ff 	.word	0x0800e1ff
 800e178:	0800e243 	.word	0x0800e243
 800e17c:	0800e243 	.word	0x0800e243
 800e180:	0800e243 	.word	0x0800e243
 800e184:	0800e243 	.word	0x0800e243
 800e188:	0800e243 	.word	0x0800e243
 800e18c:	0800e243 	.word	0x0800e243
 800e190:	0800e243 	.word	0x0800e243
 800e194:	0800e20f 	.word	0x0800e20f
 800e198:	0800e243 	.word	0x0800e243
 800e19c:	0800e243 	.word	0x0800e243
 800e1a0:	0800e243 	.word	0x0800e243
 800e1a4:	0800e243 	.word	0x0800e243
 800e1a8:	0800e243 	.word	0x0800e243
 800e1ac:	0800e243 	.word	0x0800e243
 800e1b0:	0800e243 	.word	0x0800e243
 800e1b4:	0800e243 	.word	0x0800e243
 800e1b8:	0800e243 	.word	0x0800e243
 800e1bc:	0800e243 	.word	0x0800e243
 800e1c0:	0800e243 	.word	0x0800e243
 800e1c4:	0800e243 	.word	0x0800e243
 800e1c8:	0800e243 	.word	0x0800e243
 800e1cc:	0800e243 	.word	0x0800e243
 800e1d0:	0800e243 	.word	0x0800e243
 800e1d4:	0800e235 	.word	0x0800e235
 800e1d8:	2b40      	cmp	r3, #64	; 0x40
 800e1da:	d02e      	beq.n	800e23a <UART_SetConfig+0x8aa>
 800e1dc:	e031      	b.n	800e242 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1de:	f7fa fdf9 	bl	8008dd4 <HAL_RCC_GetPCLK1Freq>
 800e1e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1e4:	e033      	b.n	800e24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1e6:	f7fa fe0b 	bl	8008e00 <HAL_RCC_GetPCLK2Freq>
 800e1ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1ec:	e02f      	b.n	800e24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fc fdba 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1fc:	e027      	b.n	800e24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1fe:	f107 0318 	add.w	r3, r7, #24
 800e202:	4618      	mov	r0, r3
 800e204:	f7fc ff06 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e20c:	e01f      	b.n	800e24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e20e:	4b2d      	ldr	r3, [pc, #180]	; (800e2c4 <UART_SetConfig+0x934>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f003 0320 	and.w	r3, r3, #32
 800e216:	2b00      	cmp	r3, #0
 800e218:	d009      	beq.n	800e22e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e21a:	4b2a      	ldr	r3, [pc, #168]	; (800e2c4 <UART_SetConfig+0x934>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	08db      	lsrs	r3, r3, #3
 800e220:	f003 0303 	and.w	r3, r3, #3
 800e224:	4a24      	ldr	r2, [pc, #144]	; (800e2b8 <UART_SetConfig+0x928>)
 800e226:	fa22 f303 	lsr.w	r3, r2, r3
 800e22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e22c:	e00f      	b.n	800e24e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e22e:	4b22      	ldr	r3, [pc, #136]	; (800e2b8 <UART_SetConfig+0x928>)
 800e230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e232:	e00c      	b.n	800e24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e234:	4b21      	ldr	r3, [pc, #132]	; (800e2bc <UART_SetConfig+0x92c>)
 800e236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e238:	e009      	b.n	800e24e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e23a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e240:	e005      	b.n	800e24e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e242:	2300      	movs	r3, #0
 800e244:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e246:	2301      	movs	r3, #1
 800e248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e24c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e250:	2b00      	cmp	r3, #0
 800e252:	f000 80e7 	beq.w	800e424 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25a:	4a19      	ldr	r2, [pc, #100]	; (800e2c0 <UART_SetConfig+0x930>)
 800e25c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e260:	461a      	mov	r2, r3
 800e262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e264:	fbb3 f3f2 	udiv	r3, r3, r2
 800e268:	005a      	lsls	r2, r3, #1
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	085b      	lsrs	r3, r3, #1
 800e270:	441a      	add	r2, r3
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	fbb2 f3f3 	udiv	r3, r2, r3
 800e27a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27e:	2b0f      	cmp	r3, #15
 800e280:	d916      	bls.n	800e2b0 <UART_SetConfig+0x920>
 800e282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e288:	d212      	bcs.n	800e2b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	f023 030f 	bic.w	r3, r3, #15
 800e292:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e296:	085b      	lsrs	r3, r3, #1
 800e298:	b29b      	uxth	r3, r3
 800e29a:	f003 0307 	and.w	r3, r3, #7
 800e29e:	b29a      	uxth	r2, r3
 800e2a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e2ac:	60da      	str	r2, [r3, #12]
 800e2ae:	e0b9      	b.n	800e424 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e2b6:	e0b5      	b.n	800e424 <UART_SetConfig+0xa94>
 800e2b8:	03d09000 	.word	0x03d09000
 800e2bc:	003d0900 	.word	0x003d0900
 800e2c0:	0800fbd4 	.word	0x0800fbd4
 800e2c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2cc:	2b20      	cmp	r3, #32
 800e2ce:	dc49      	bgt.n	800e364 <UART_SetConfig+0x9d4>
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	db7c      	blt.n	800e3ce <UART_SetConfig+0xa3e>
 800e2d4:	2b20      	cmp	r3, #32
 800e2d6:	d87a      	bhi.n	800e3ce <UART_SetConfig+0xa3e>
 800e2d8:	a201      	add	r2, pc, #4	; (adr r2, 800e2e0 <UART_SetConfig+0x950>)
 800e2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2de:	bf00      	nop
 800e2e0:	0800e36b 	.word	0x0800e36b
 800e2e4:	0800e373 	.word	0x0800e373
 800e2e8:	0800e3cf 	.word	0x0800e3cf
 800e2ec:	0800e3cf 	.word	0x0800e3cf
 800e2f0:	0800e37b 	.word	0x0800e37b
 800e2f4:	0800e3cf 	.word	0x0800e3cf
 800e2f8:	0800e3cf 	.word	0x0800e3cf
 800e2fc:	0800e3cf 	.word	0x0800e3cf
 800e300:	0800e38b 	.word	0x0800e38b
 800e304:	0800e3cf 	.word	0x0800e3cf
 800e308:	0800e3cf 	.word	0x0800e3cf
 800e30c:	0800e3cf 	.word	0x0800e3cf
 800e310:	0800e3cf 	.word	0x0800e3cf
 800e314:	0800e3cf 	.word	0x0800e3cf
 800e318:	0800e3cf 	.word	0x0800e3cf
 800e31c:	0800e3cf 	.word	0x0800e3cf
 800e320:	0800e39b 	.word	0x0800e39b
 800e324:	0800e3cf 	.word	0x0800e3cf
 800e328:	0800e3cf 	.word	0x0800e3cf
 800e32c:	0800e3cf 	.word	0x0800e3cf
 800e330:	0800e3cf 	.word	0x0800e3cf
 800e334:	0800e3cf 	.word	0x0800e3cf
 800e338:	0800e3cf 	.word	0x0800e3cf
 800e33c:	0800e3cf 	.word	0x0800e3cf
 800e340:	0800e3cf 	.word	0x0800e3cf
 800e344:	0800e3cf 	.word	0x0800e3cf
 800e348:	0800e3cf 	.word	0x0800e3cf
 800e34c:	0800e3cf 	.word	0x0800e3cf
 800e350:	0800e3cf 	.word	0x0800e3cf
 800e354:	0800e3cf 	.word	0x0800e3cf
 800e358:	0800e3cf 	.word	0x0800e3cf
 800e35c:	0800e3cf 	.word	0x0800e3cf
 800e360:	0800e3c1 	.word	0x0800e3c1
 800e364:	2b40      	cmp	r3, #64	; 0x40
 800e366:	d02e      	beq.n	800e3c6 <UART_SetConfig+0xa36>
 800e368:	e031      	b.n	800e3ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e36a:	f7fa fd33 	bl	8008dd4 <HAL_RCC_GetPCLK1Freq>
 800e36e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e370:	e033      	b.n	800e3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e372:	f7fa fd45 	bl	8008e00 <HAL_RCC_GetPCLK2Freq>
 800e376:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e378:	e02f      	b.n	800e3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e37a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e37e:	4618      	mov	r0, r3
 800e380:	f7fc fcf4 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e388:	e027      	b.n	800e3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e38a:	f107 0318 	add.w	r3, r7, #24
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fc fe40 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e398:	e01f      	b.n	800e3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e39a:	4b2d      	ldr	r3, [pc, #180]	; (800e450 <UART_SetConfig+0xac0>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f003 0320 	and.w	r3, r3, #32
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d009      	beq.n	800e3ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3a6:	4b2a      	ldr	r3, [pc, #168]	; (800e450 <UART_SetConfig+0xac0>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	08db      	lsrs	r3, r3, #3
 800e3ac:	f003 0303 	and.w	r3, r3, #3
 800e3b0:	4a28      	ldr	r2, [pc, #160]	; (800e454 <UART_SetConfig+0xac4>)
 800e3b2:	fa22 f303 	lsr.w	r3, r2, r3
 800e3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3b8:	e00f      	b.n	800e3da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e3ba:	4b26      	ldr	r3, [pc, #152]	; (800e454 <UART_SetConfig+0xac4>)
 800e3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3be:	e00c      	b.n	800e3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3c0:	4b25      	ldr	r3, [pc, #148]	; (800e458 <UART_SetConfig+0xac8>)
 800e3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3c4:	e009      	b.n	800e3da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3cc:	e005      	b.n	800e3da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e3d8:	bf00      	nop
    }

    if (pclk != 0U)
 800e3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d021      	beq.n	800e424 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e4:	4a1d      	ldr	r2, [pc, #116]	; (800e45c <UART_SetConfig+0xacc>)
 800e3e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	085b      	lsrs	r3, r3, #1
 800e3f8:	441a      	add	r2, r3
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800e402:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e406:	2b0f      	cmp	r3, #15
 800e408:	d909      	bls.n	800e41e <UART_SetConfig+0xa8e>
 800e40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e410:	d205      	bcs.n	800e41e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e414:	b29a      	uxth	r2, r3
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	60da      	str	r2, [r3, #12]
 800e41c:	e002      	b.n	800e424 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e41e:	2301      	movs	r3, #1
 800e420:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	2201      	movs	r2, #1
 800e428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	2201      	movs	r2, #1
 800e430:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	2200      	movs	r2, #0
 800e438:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	2200      	movs	r2, #0
 800e43e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e440:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e444:	4618      	mov	r0, r3
 800e446:	3748      	adds	r7, #72	; 0x48
 800e448:	46bd      	mov	sp, r7
 800e44a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e44e:	bf00      	nop
 800e450:	58024400 	.word	0x58024400
 800e454:	03d09000 	.word	0x03d09000
 800e458:	003d0900 	.word	0x003d0900
 800e45c:	0800fbd4 	.word	0x0800fbd4

0800e460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e46c:	f003 0301 	and.w	r3, r3, #1
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00a      	beq.n	800e48a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	430a      	orrs	r2, r1
 800e488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48e:	f003 0302 	and.w	r3, r3, #2
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00a      	beq.n	800e4ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	430a      	orrs	r2, r1
 800e4aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b0:	f003 0304 	and.w	r3, r3, #4
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d00a      	beq.n	800e4ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	430a      	orrs	r2, r1
 800e4cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d2:	f003 0308 	and.w	r3, r3, #8
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00a      	beq.n	800e4f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f4:	f003 0310 	and.w	r3, r3, #16
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00a      	beq.n	800e512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	430a      	orrs	r2, r1
 800e510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e516:	f003 0320 	and.w	r3, r3, #32
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00a      	beq.n	800e534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	689b      	ldr	r3, [r3, #8]
 800e524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	430a      	orrs	r2, r1
 800e532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d01a      	beq.n	800e576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	430a      	orrs	r2, r1
 800e554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e55a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e55e:	d10a      	bne.n	800e576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	430a      	orrs	r2, r1
 800e574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	430a      	orrs	r2, r1
 800e596:	605a      	str	r2, [r3, #4]
  }
}
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b098      	sub	sp, #96	; 0x60
 800e5a8:	af02      	add	r7, sp, #8
 800e5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e5b4:	f7f6 fd84 	bl	80050c0 <HAL_GetTick>
 800e5b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 0308 	and.w	r3, r3, #8
 800e5c4:	2b08      	cmp	r3, #8
 800e5c6:	d12f      	bne.n	800e628 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 f88e 	bl	800e6f8 <UART_WaitOnFlagUntilTimeout>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d022      	beq.n	800e628 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ea:	e853 3f00 	ldrex	r3, [r3]
 800e5ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5f6:	653b      	str	r3, [r7, #80]	; 0x50
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e600:	647b      	str	r3, [r7, #68]	; 0x44
 800e602:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e604:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e608:	e841 2300 	strex	r3, r2, [r1]
 800e60c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e610:	2b00      	cmp	r3, #0
 800e612:	d1e6      	bne.n	800e5e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2220      	movs	r2, #32
 800e618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e624:	2303      	movs	r3, #3
 800e626:	e063      	b.n	800e6f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f003 0304 	and.w	r3, r3, #4
 800e632:	2b04      	cmp	r3, #4
 800e634:	d149      	bne.n	800e6ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e636:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e63e:	2200      	movs	r2, #0
 800e640:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 f857 	bl	800e6f8 <UART_WaitOnFlagUntilTimeout>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d03c      	beq.n	800e6ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e658:	e853 3f00 	ldrex	r3, [r3]
 800e65c:	623b      	str	r3, [r7, #32]
   return(result);
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e664:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	461a      	mov	r2, r3
 800e66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e66e:	633b      	str	r3, [r7, #48]	; 0x30
 800e670:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e676:	e841 2300 	strex	r3, r2, [r1]
 800e67a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1e6      	bne.n	800e650 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3308      	adds	r3, #8
 800e688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	e853 3f00 	ldrex	r3, [r3]
 800e690:	60fb      	str	r3, [r7, #12]
   return(result);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f023 0301 	bic.w	r3, r3, #1
 800e698:	64bb      	str	r3, [r7, #72]	; 0x48
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3308      	adds	r3, #8
 800e6a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6a2:	61fa      	str	r2, [r7, #28]
 800e6a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a6:	69b9      	ldr	r1, [r7, #24]
 800e6a8:	69fa      	ldr	r2, [r7, #28]
 800e6aa:	e841 2300 	strex	r3, r2, [r1]
 800e6ae:	617b      	str	r3, [r7, #20]
   return(result);
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d1e5      	bne.n	800e682 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2220      	movs	r2, #32
 800e6ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6c6:	2303      	movs	r3, #3
 800e6c8:	e012      	b.n	800e6f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2220      	movs	r2, #32
 800e6ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2220      	movs	r2, #32
 800e6d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3758      	adds	r7, #88	; 0x58
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	603b      	str	r3, [r7, #0]
 800e704:	4613      	mov	r3, r2
 800e706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e708:	e049      	b.n	800e79e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e710:	d045      	beq.n	800e79e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e712:	f7f6 fcd5 	bl	80050c0 <HAL_GetTick>
 800e716:	4602      	mov	r2, r0
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	69ba      	ldr	r2, [r7, #24]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d302      	bcc.n	800e728 <UART_WaitOnFlagUntilTimeout+0x30>
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d101      	bne.n	800e72c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e728:	2303      	movs	r3, #3
 800e72a:	e048      	b.n	800e7be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f003 0304 	and.w	r3, r3, #4
 800e736:	2b00      	cmp	r3, #0
 800e738:	d031      	beq.n	800e79e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	69db      	ldr	r3, [r3, #28]
 800e740:	f003 0308 	and.w	r3, r3, #8
 800e744:	2b08      	cmp	r3, #8
 800e746:	d110      	bne.n	800e76a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2208      	movs	r2, #8
 800e74e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e750:	68f8      	ldr	r0, [r7, #12]
 800e752:	f000 f95b 	bl	800ea0c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2208      	movs	r2, #8
 800e75a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e766:	2301      	movs	r3, #1
 800e768:	e029      	b.n	800e7be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	69db      	ldr	r3, [r3, #28]
 800e770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e778:	d111      	bne.n	800e79e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e784:	68f8      	ldr	r0, [r7, #12]
 800e786:	f000 f941 	bl	800ea0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2220      	movs	r2, #32
 800e78e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2200      	movs	r2, #0
 800e796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e79a:	2303      	movs	r3, #3
 800e79c:	e00f      	b.n	800e7be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	69da      	ldr	r2, [r3, #28]
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	68ba      	ldr	r2, [r7, #8]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	bf0c      	ite	eq
 800e7ae:	2301      	moveq	r3, #1
 800e7b0:	2300      	movne	r3, #0
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	79fb      	ldrb	r3, [r7, #7]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d0a6      	beq.n	800e70a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7bc:	2300      	movs	r3, #0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
	...

0800e7c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b0a3      	sub	sp, #140	; 0x8c
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	68ba      	ldr	r2, [r7, #8]
 800e7da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	88fa      	ldrh	r2, [r7, #6]
 800e7e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	88fa      	ldrh	r2, [r7, #6]
 800e7e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7fa:	d10e      	bne.n	800e81a <UART_Start_Receive_IT+0x52>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	691b      	ldr	r3, [r3, #16]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d105      	bne.n	800e810 <UART_Start_Receive_IT+0x48>
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e80a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e80e:	e02d      	b.n	800e86c <UART_Start_Receive_IT+0xa4>
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	22ff      	movs	r2, #255	; 0xff
 800e814:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e818:	e028      	b.n	800e86c <UART_Start_Receive_IT+0xa4>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d10d      	bne.n	800e83e <UART_Start_Receive_IT+0x76>
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d104      	bne.n	800e834 <UART_Start_Receive_IT+0x6c>
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	22ff      	movs	r2, #255	; 0xff
 800e82e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e832:	e01b      	b.n	800e86c <UART_Start_Receive_IT+0xa4>
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	227f      	movs	r2, #127	; 0x7f
 800e838:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e83c:	e016      	b.n	800e86c <UART_Start_Receive_IT+0xa4>
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e846:	d10d      	bne.n	800e864 <UART_Start_Receive_IT+0x9c>
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d104      	bne.n	800e85a <UART_Start_Receive_IT+0x92>
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	227f      	movs	r2, #127	; 0x7f
 800e854:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e858:	e008      	b.n	800e86c <UART_Start_Receive_IT+0xa4>
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	223f      	movs	r2, #63	; 0x3f
 800e85e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e862:	e003      	b.n	800e86c <UART_Start_Receive_IT+0xa4>
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2200      	movs	r2, #0
 800e870:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2222      	movs	r2, #34	; 0x22
 800e878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	3308      	adds	r3, #8
 800e882:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e886:	e853 3f00 	ldrex	r3, [r3]
 800e88a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e88c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e88e:	f043 0301 	orr.w	r3, r3, #1
 800e892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	3308      	adds	r3, #8
 800e89c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e8a0:	673a      	str	r2, [r7, #112]	; 0x70
 800e8a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e8a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e8a8:	e841 2300 	strex	r3, r2, [r1]
 800e8ac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e8ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1e3      	bne.n	800e87c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8bc:	d14f      	bne.n	800e95e <UART_Start_Receive_IT+0x196>
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e8c4:	88fa      	ldrh	r2, [r7, #6]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d349      	bcc.n	800e95e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8d2:	d107      	bne.n	800e8e4 <UART_Start_Receive_IT+0x11c>
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d103      	bne.n	800e8e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	4a47      	ldr	r2, [pc, #284]	; (800e9fc <UART_Start_Receive_IT+0x234>)
 800e8e0:	675a      	str	r2, [r3, #116]	; 0x74
 800e8e2:	e002      	b.n	800e8ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	4a46      	ldr	r2, [pc, #280]	; (800ea00 <UART_Start_Receive_IT+0x238>)
 800e8e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d01a      	beq.n	800e928 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8fa:	e853 3f00 	ldrex	r3, [r3]
 800e8fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	461a      	mov	r2, r3
 800e910:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e914:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e916:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e918:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e91a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e91c:	e841 2300 	strex	r3, r2, [r1]
 800e920:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1e4      	bne.n	800e8f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	3308      	adds	r3, #8
 800e92e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e932:	e853 3f00 	ldrex	r3, [r3]
 800e936:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e93e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	3308      	adds	r3, #8
 800e946:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e948:	64ba      	str	r2, [r7, #72]	; 0x48
 800e94a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e94c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e94e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e950:	e841 2300 	strex	r3, r2, [r1]
 800e954:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d1e5      	bne.n	800e928 <UART_Start_Receive_IT+0x160>
 800e95c:	e046      	b.n	800e9ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	689b      	ldr	r3, [r3, #8]
 800e962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e966:	d107      	bne.n	800e978 <UART_Start_Receive_IT+0x1b0>
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	691b      	ldr	r3, [r3, #16]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d103      	bne.n	800e978 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	4a24      	ldr	r2, [pc, #144]	; (800ea04 <UART_Start_Receive_IT+0x23c>)
 800e974:	675a      	str	r2, [r3, #116]	; 0x74
 800e976:	e002      	b.n	800e97e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	4a23      	ldr	r2, [pc, #140]	; (800ea08 <UART_Start_Receive_IT+0x240>)
 800e97c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d019      	beq.n	800e9ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	e853 3f00 	ldrex	r3, [r3]
 800e992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e99a:	677b      	str	r3, [r7, #116]	; 0x74
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e9a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9ac:	e841 2300 	strex	r3, r2, [r1]
 800e9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1e6      	bne.n	800e986 <UART_Start_Receive_IT+0x1be>
 800e9b8:	e018      	b.n	800e9ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	e853 3f00 	ldrex	r3, [r3]
 800e9c6:	613b      	str	r3, [r7, #16]
   return(result);
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	f043 0320 	orr.w	r3, r3, #32
 800e9ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e9d8:	623b      	str	r3, [r7, #32]
 800e9da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9dc:	69f9      	ldr	r1, [r7, #28]
 800e9de:	6a3a      	ldr	r2, [r7, #32]
 800e9e0:	e841 2300 	strex	r3, r2, [r1]
 800e9e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1e6      	bne.n	800e9ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	378c      	adds	r7, #140	; 0x8c
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	0800f22d 	.word	0x0800f22d
 800ea00:	0800eecd 	.word	0x0800eecd
 800ea04:	0800ed15 	.word	0x0800ed15
 800ea08:	0800eb5d 	.word	0x0800eb5d

0800ea0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b095      	sub	sp, #84	; 0x54
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1c:	e853 3f00 	ldrex	r3, [r3]
 800ea20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea32:	643b      	str	r3, [r7, #64]	; 0x40
 800ea34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea3a:	e841 2300 	strex	r3, r2, [r1]
 800ea3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1e6      	bne.n	800ea14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3308      	adds	r3, #8
 800ea4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4e:	6a3b      	ldr	r3, [r7, #32]
 800ea50:	e853 3f00 	ldrex	r3, [r3]
 800ea54:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea56:	69fa      	ldr	r2, [r7, #28]
 800ea58:	4b1e      	ldr	r3, [pc, #120]	; (800ead4 <UART_EndRxTransfer+0xc8>)
 800ea5a:	4013      	ands	r3, r2
 800ea5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3308      	adds	r3, #8
 800ea64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea66:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea6e:	e841 2300 	strex	r3, r2, [r1]
 800ea72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1e5      	bne.n	800ea46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d118      	bne.n	800eab4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	e853 3f00 	ldrex	r3, [r3]
 800ea8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	f023 0310 	bic.w	r3, r3, #16
 800ea96:	647b      	str	r3, [r7, #68]	; 0x44
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaa0:	61bb      	str	r3, [r7, #24]
 800eaa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa4:	6979      	ldr	r1, [r7, #20]
 800eaa6:	69ba      	ldr	r2, [r7, #24]
 800eaa8:	e841 2300 	strex	r3, r2, [r1]
 800eaac:	613b      	str	r3, [r7, #16]
   return(result);
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1e6      	bne.n	800ea82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2220      	movs	r2, #32
 800eab8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2200      	movs	r2, #0
 800eac0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eac8:	bf00      	nop
 800eaca:	3754      	adds	r7, #84	; 0x54
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	effffffe 	.word	0xeffffffe

0800ead8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f7fe ff34 	bl	800d964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eafc:	bf00      	nop
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b088      	sub	sp, #32
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	e853 3f00 	ldrex	r3, [r3]
 800eb18:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb20:	61fb      	str	r3, [r7, #28]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	461a      	mov	r2, r3
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	61bb      	str	r3, [r7, #24]
 800eb2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2e:	6979      	ldr	r1, [r7, #20]
 800eb30:	69ba      	ldr	r2, [r7, #24]
 800eb32:	e841 2300 	strex	r3, r2, [r1]
 800eb36:	613b      	str	r3, [r7, #16]
   return(result);
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1e6      	bne.n	800eb0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2220      	movs	r2, #32
 800eb42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f7fe fef5 	bl	800d93c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb52:	bf00      	nop
 800eb54:	3720      	adds	r7, #32
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
	...

0800eb5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b09c      	sub	sp, #112	; 0x70
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb6a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb74:	2b22      	cmp	r3, #34	; 0x22
 800eb76:	f040 80be 	bne.w	800ecf6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eb84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eb88:	b2d9      	uxtb	r1, r3
 800eb8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb94:	400a      	ands	r2, r1
 800eb96:	b2d2      	uxtb	r2, r2
 800eb98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb9e:	1c5a      	adds	r2, r3, #1
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	3b01      	subs	r3, #1
 800ebae:	b29a      	uxth	r2, r3
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f040 80a1 	bne.w	800ed06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebcc:	e853 3f00 	ldrex	r3, [r3]
 800ebd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ebd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebd8:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebe2:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebe4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebea:	e841 2300 	strex	r3, r2, [r1]
 800ebee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ebf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d1e6      	bne.n	800ebc4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	3308      	adds	r3, #8
 800ebfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec00:	e853 3f00 	ldrex	r3, [r3]
 800ec04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec08:	f023 0301 	bic.w	r3, r3, #1
 800ec0c:	667b      	str	r3, [r7, #100]	; 0x64
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3308      	adds	r3, #8
 800ec14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec16:	647a      	str	r2, [r7, #68]	; 0x44
 800ec18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec1e:	e841 2300 	strex	r3, r2, [r1]
 800ec22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1e5      	bne.n	800ebf6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2220      	movs	r2, #32
 800ec2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4a33      	ldr	r2, [pc, #204]	; (800ed10 <UART_RxISR_8BIT+0x1b4>)
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d01f      	beq.n	800ec88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d018      	beq.n	800ec88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	e853 3f00 	ldrex	r3, [r3]
 800ec62:	623b      	str	r3, [r7, #32]
   return(result);
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ec6a:	663b      	str	r3, [r7, #96]	; 0x60
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	461a      	mov	r2, r3
 800ec72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec74:	633b      	str	r3, [r7, #48]	; 0x30
 800ec76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec7c:	e841 2300 	strex	r3, r2, [r1]
 800ec80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d1e6      	bne.n	800ec56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d12e      	bne.n	800ecee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2200      	movs	r2, #0
 800ec94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	e853 3f00 	ldrex	r3, [r3]
 800eca2:	60fb      	str	r3, [r7, #12]
   return(result);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f023 0310 	bic.w	r3, r3, #16
 800ecaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecb4:	61fb      	str	r3, [r7, #28]
 800ecb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb8:	69b9      	ldr	r1, [r7, #24]
 800ecba:	69fa      	ldr	r2, [r7, #28]
 800ecbc:	e841 2300 	strex	r3, r2, [r1]
 800ecc0:	617b      	str	r3, [r7, #20]
   return(result);
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1e6      	bne.n	800ec96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	69db      	ldr	r3, [r3, #28]
 800ecce:	f003 0310 	and.w	r3, r3, #16
 800ecd2:	2b10      	cmp	r3, #16
 800ecd4:	d103      	bne.n	800ecde <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2210      	movs	r2, #16
 800ecdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ece4:	4619      	mov	r1, r3
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7fe fe46 	bl	800d978 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ecec:	e00b      	b.n	800ed06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7fe fe2e 	bl	800d950 <HAL_UART_RxCpltCallback>
}
 800ecf4:	e007      	b.n	800ed06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	699a      	ldr	r2, [r3, #24]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f042 0208 	orr.w	r2, r2, #8
 800ed04:	619a      	str	r2, [r3, #24]
}
 800ed06:	bf00      	nop
 800ed08:	3770      	adds	r7, #112	; 0x70
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	58000c00 	.word	0x58000c00

0800ed14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b09c      	sub	sp, #112	; 0x70
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed2c:	2b22      	cmp	r3, #34	; 0x22
 800ed2e:	f040 80be 	bne.w	800eeae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed40:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ed42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ed46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed56:	1c9a      	adds	r2, r3, #2
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	3b01      	subs	r3, #1
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f040 80a1 	bne.w	800eebe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed84:	e853 3f00 	ldrex	r3, [r3]
 800ed88:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ed8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed90:	667b      	str	r3, [r7, #100]	; 0x64
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	461a      	mov	r2, r3
 800ed98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed9a:	657b      	str	r3, [r7, #84]	; 0x54
 800ed9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eda0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eda2:	e841 2300 	strex	r3, r2, [r1]
 800eda6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d1e6      	bne.n	800ed7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	3308      	adds	r3, #8
 800edb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb8:	e853 3f00 	ldrex	r3, [r3]
 800edbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800edbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc0:	f023 0301 	bic.w	r3, r3, #1
 800edc4:	663b      	str	r3, [r7, #96]	; 0x60
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	3308      	adds	r3, #8
 800edcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800edce:	643a      	str	r2, [r7, #64]	; 0x40
 800edd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800edd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edd6:	e841 2300 	strex	r3, r2, [r1]
 800edda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1e5      	bne.n	800edae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2220      	movs	r2, #32
 800ede6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a33      	ldr	r2, [pc, #204]	; (800eec8 <UART_RxISR_16BIT+0x1b4>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d01f      	beq.n	800ee40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d018      	beq.n	800ee40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee14:	6a3b      	ldr	r3, [r7, #32]
 800ee16:	e853 3f00 	ldrex	r3, [r3]
 800ee1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ee22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	461a      	mov	r2, r3
 800ee2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee2e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee34:	e841 2300 	strex	r3, r2, [r1]
 800ee38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1e6      	bne.n	800ee0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d12e      	bne.n	800eea6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	e853 3f00 	ldrex	r3, [r3]
 800ee5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	f023 0310 	bic.w	r3, r3, #16
 800ee62:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	461a      	mov	r2, r3
 800ee6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee6c:	61bb      	str	r3, [r7, #24]
 800ee6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee70:	6979      	ldr	r1, [r7, #20]
 800ee72:	69ba      	ldr	r2, [r7, #24]
 800ee74:	e841 2300 	strex	r3, r2, [r1]
 800ee78:	613b      	str	r3, [r7, #16]
   return(result);
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d1e6      	bne.n	800ee4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	69db      	ldr	r3, [r3, #28]
 800ee86:	f003 0310 	and.w	r3, r3, #16
 800ee8a:	2b10      	cmp	r3, #16
 800ee8c:	d103      	bne.n	800ee96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2210      	movs	r2, #16
 800ee94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f7fe fd6a 	bl	800d978 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eea4:	e00b      	b.n	800eebe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f7fe fd52 	bl	800d950 <HAL_UART_RxCpltCallback>
}
 800eeac:	e007      	b.n	800eebe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	699a      	ldr	r2, [r3, #24]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f042 0208 	orr.w	r2, r2, #8
 800eebc:	619a      	str	r2, [r3, #24]
}
 800eebe:	bf00      	nop
 800eec0:	3770      	adds	r7, #112	; 0x70
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	58000c00 	.word	0x58000c00

0800eecc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b0ac      	sub	sp, #176	; 0xb0
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	69db      	ldr	r3, [r3, #28]
 800eee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef02:	2b22      	cmp	r3, #34	; 0x22
 800ef04:	f040 8180 	bne.w	800f208 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ef0e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef12:	e123      	b.n	800f15c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef1a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ef22:	b2d9      	uxtb	r1, r3
 800ef24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ef28:	b2da      	uxtb	r2, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef2e:	400a      	ands	r2, r1
 800ef30:	b2d2      	uxtb	r2, r2
 800ef32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	3b01      	subs	r3, #1
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	69db      	ldr	r3, [r3, #28]
 800ef56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ef5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef5e:	f003 0307 	and.w	r3, r3, #7
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d053      	beq.n	800f00e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef6a:	f003 0301 	and.w	r3, r3, #1
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d011      	beq.n	800ef96 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ef72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ef76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d00b      	beq.n	800ef96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2201      	movs	r2, #1
 800ef84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef8c:	f043 0201 	orr.w	r2, r3, #1
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef9a:	f003 0302 	and.w	r3, r3, #2
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d011      	beq.n	800efc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800efa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800efa6:	f003 0301 	and.w	r3, r3, #1
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00b      	beq.n	800efc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2202      	movs	r2, #2
 800efb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efbc:	f043 0204 	orr.w	r2, r3, #4
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800efca:	f003 0304 	and.w	r3, r3, #4
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d011      	beq.n	800eff6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800efd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800efd6:	f003 0301 	and.w	r3, r3, #1
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00b      	beq.n	800eff6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2204      	movs	r2, #4
 800efe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efec:	f043 0202 	orr.w	r2, r3, #2
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800effc:	2b00      	cmp	r3, #0
 800effe:	d006      	beq.n	800f00e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7fe fcaf 	bl	800d964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2200      	movs	r2, #0
 800f00a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f014:	b29b      	uxth	r3, r3
 800f016:	2b00      	cmp	r3, #0
 800f018:	f040 80a0 	bne.w	800f15c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f024:	e853 3f00 	ldrex	r3, [r3]
 800f028:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f02a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f02c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	461a      	mov	r2, r3
 800f03a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f03e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f040:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f042:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f044:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f046:	e841 2300 	strex	r3, r2, [r1]
 800f04a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f04c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1e4      	bne.n	800f01c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	3308      	adds	r3, #8
 800f058:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f05c:	e853 3f00 	ldrex	r3, [r3]
 800f060:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f064:	4b6e      	ldr	r3, [pc, #440]	; (800f220 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f066:	4013      	ands	r3, r2
 800f068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3308      	adds	r3, #8
 800f072:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f076:	66ba      	str	r2, [r7, #104]	; 0x68
 800f078:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f07c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f07e:	e841 2300 	strex	r3, r2, [r1]
 800f082:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1e3      	bne.n	800f052 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2220      	movs	r2, #32
 800f08e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2200      	movs	r2, #0
 800f096:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4a60      	ldr	r2, [pc, #384]	; (800f224 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d021      	beq.n	800f0ec <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d01a      	beq.n	800f0ec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0be:	e853 3f00 	ldrex	r3, [r3]
 800f0c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f0ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0d8:	657b      	str	r3, [r7, #84]	; 0x54
 800f0da:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f0de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f0e0:	e841 2300 	strex	r3, r2, [r1]
 800f0e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d1e4      	bne.n	800f0b6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d130      	bne.n	800f156 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f102:	e853 3f00 	ldrex	r3, [r3]
 800f106:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10a:	f023 0310 	bic.w	r3, r3, #16
 800f10e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f11c:	643b      	str	r3, [r7, #64]	; 0x40
 800f11e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f124:	e841 2300 	strex	r3, r2, [r1]
 800f128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1e4      	bne.n	800f0fa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	69db      	ldr	r3, [r3, #28]
 800f136:	f003 0310 	and.w	r3, r3, #16
 800f13a:	2b10      	cmp	r3, #16
 800f13c:	d103      	bne.n	800f146 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2210      	movs	r2, #16
 800f144:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f14c:	4619      	mov	r1, r3
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f7fe fc12 	bl	800d978 <HAL_UARTEx_RxEventCallback>
 800f154:	e002      	b.n	800f15c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f7fe fbfa 	bl	800d950 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f15c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f160:	2b00      	cmp	r3, #0
 800f162:	d006      	beq.n	800f172 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f168:	f003 0320 	and.w	r3, r3, #32
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f47f aed1 	bne.w	800ef14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f178:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f17c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f180:	2b00      	cmp	r3, #0
 800f182:	d049      	beq.n	800f218 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f18a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f18e:	429a      	cmp	r2, r3
 800f190:	d242      	bcs.n	800f218 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	3308      	adds	r3, #8
 800f198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	e853 3f00 	ldrex	r3, [r3]
 800f1a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f1a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	3308      	adds	r3, #8
 800f1b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f1b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1be:	e841 2300 	strex	r3, r2, [r1]
 800f1c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1e3      	bne.n	800f192 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	4a16      	ldr	r2, [pc, #88]	; (800f228 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f1ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	e853 3f00 	ldrex	r3, [r3]
 800f1dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f043 0320 	orr.w	r3, r3, #32
 800f1e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1f2:	61bb      	str	r3, [r7, #24]
 800f1f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f6:	6979      	ldr	r1, [r7, #20]
 800f1f8:	69ba      	ldr	r2, [r7, #24]
 800f1fa:	e841 2300 	strex	r3, r2, [r1]
 800f1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d1e4      	bne.n	800f1d0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f206:	e007      	b.n	800f218 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	699a      	ldr	r2, [r3, #24]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f042 0208 	orr.w	r2, r2, #8
 800f216:	619a      	str	r2, [r3, #24]
}
 800f218:	bf00      	nop
 800f21a:	37b0      	adds	r7, #176	; 0xb0
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	effffffe 	.word	0xeffffffe
 800f224:	58000c00 	.word	0x58000c00
 800f228:	0800eb5d 	.word	0x0800eb5d

0800f22c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b0ae      	sub	sp, #184	; 0xb8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f23a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	69db      	ldr	r3, [r3, #28]
 800f244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f262:	2b22      	cmp	r3, #34	; 0x22
 800f264:	f040 8184 	bne.w	800f570 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f26e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f272:	e127      	b.n	800f4c4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f286:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f28a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f28e:	4013      	ands	r3, r2
 800f290:	b29a      	uxth	r2, r3
 800f292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f296:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f29c:	1c9a      	adds	r2, r3, #2
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	69db      	ldr	r3, [r3, #28]
 800f2ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f2be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2c2:	f003 0307 	and.w	r3, r3, #7
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d053      	beq.n	800f372 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2ce:	f003 0301 	and.w	r3, r3, #1
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d011      	beq.n	800f2fa <UART_RxISR_16BIT_FIFOEN+0xce>
 800f2d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d00b      	beq.n	800f2fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2f0:	f043 0201 	orr.w	r2, r3, #1
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2fe:	f003 0302 	and.w	r3, r3, #2
 800f302:	2b00      	cmp	r3, #0
 800f304:	d011      	beq.n	800f32a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f30a:	f003 0301 	and.w	r3, r3, #1
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00b      	beq.n	800f32a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2202      	movs	r2, #2
 800f318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f320:	f043 0204 	orr.w	r2, r3, #4
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f32a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f32e:	f003 0304 	and.w	r3, r3, #4
 800f332:	2b00      	cmp	r3, #0
 800f334:	d011      	beq.n	800f35a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f33a:	f003 0301 	and.w	r3, r3, #1
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00b      	beq.n	800f35a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2204      	movs	r2, #4
 800f348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f350:	f043 0202 	orr.w	r2, r3, #2
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f360:	2b00      	cmp	r3, #0
 800f362:	d006      	beq.n	800f372 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f7fe fafd 	bl	800d964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f378:	b29b      	uxth	r3, r3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	f040 80a2 	bne.w	800f4c4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f388:	e853 3f00 	ldrex	r3, [r3]
 800f38c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f38e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	461a      	mov	r2, r3
 800f39e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f3a6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f3aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f3ae:	e841 2300 	strex	r3, r2, [r1]
 800f3b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f3b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d1e2      	bne.n	800f380 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	3308      	adds	r3, #8
 800f3c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3c4:	e853 3f00 	ldrex	r3, [r3]
 800f3c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f3ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3cc:	4b6e      	ldr	r3, [pc, #440]	; (800f588 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	3308      	adds	r3, #8
 800f3da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f3de:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f3e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f3e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f3e6:	e841 2300 	strex	r3, r2, [r1]
 800f3ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f3ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d1e3      	bne.n	800f3ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2220      	movs	r2, #32
 800f3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2200      	movs	r2, #0
 800f404:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4a60      	ldr	r2, [pc, #384]	; (800f58c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d021      	beq.n	800f454 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d01a      	beq.n	800f454 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f426:	e853 3f00 	ldrex	r3, [r3]
 800f42a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f42c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f42e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	461a      	mov	r2, r3
 800f43c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f440:	65bb      	str	r3, [r7, #88]	; 0x58
 800f442:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f444:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f446:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f448:	e841 2300 	strex	r3, r2, [r1]
 800f44c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1e4      	bne.n	800f41e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d130      	bne.n	800f4be <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46a:	e853 3f00 	ldrex	r3, [r3]
 800f46e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f472:	f023 0310 	bic.w	r3, r3, #16
 800f476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	461a      	mov	r2, r3
 800f480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f484:	647b      	str	r3, [r7, #68]	; 0x44
 800f486:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f488:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f48a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f48c:	e841 2300 	strex	r3, r2, [r1]
 800f490:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1e4      	bne.n	800f462 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	69db      	ldr	r3, [r3, #28]
 800f49e:	f003 0310 	and.w	r3, r3, #16
 800f4a2:	2b10      	cmp	r3, #16
 800f4a4:	d103      	bne.n	800f4ae <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2210      	movs	r2, #16
 800f4ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7fe fa5e 	bl	800d978 <HAL_UARTEx_RxEventCallback>
 800f4bc:	e002      	b.n	800f4c4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f7fe fa46 	bl	800d950 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d006      	beq.n	800f4da <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f4cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f4d0:	f003 0320 	and.w	r3, r3, #32
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f47f aecd 	bne.w	800f274 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4e0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f4e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d049      	beq.n	800f580 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f4f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d242      	bcs.n	800f580 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	3308      	adds	r3, #8
 800f500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f504:	e853 3f00 	ldrex	r3, [r3]
 800f508:	623b      	str	r3, [r7, #32]
   return(result);
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	3308      	adds	r3, #8
 800f51a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f51e:	633a      	str	r2, [r7, #48]	; 0x30
 800f520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f526:	e841 2300 	strex	r3, r2, [r1]
 800f52a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1e3      	bne.n	800f4fa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4a16      	ldr	r2, [pc, #88]	; (800f590 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f536:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	e853 3f00 	ldrex	r3, [r3]
 800f544:	60fb      	str	r3, [r7, #12]
   return(result);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f043 0320 	orr.w	r3, r3, #32
 800f54c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	461a      	mov	r2, r3
 800f556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f55a:	61fb      	str	r3, [r7, #28]
 800f55c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f55e:	69b9      	ldr	r1, [r7, #24]
 800f560:	69fa      	ldr	r2, [r7, #28]
 800f562:	e841 2300 	strex	r3, r2, [r1]
 800f566:	617b      	str	r3, [r7, #20]
   return(result);
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1e4      	bne.n	800f538 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f56e:	e007      	b.n	800f580 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	699a      	ldr	r2, [r3, #24]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f042 0208 	orr.w	r2, r2, #8
 800f57e:	619a      	str	r2, [r3, #24]
}
 800f580:	bf00      	nop
 800f582:	37b8      	adds	r7, #184	; 0xb8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	effffffe 	.word	0xeffffffe
 800f58c:	58000c00 	.word	0x58000c00
 800f590:	0800ed15 	.word	0x0800ed15

0800f594 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f59c:	bf00      	nop
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f5b0:	bf00      	nop
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f5c4:	bf00      	nop
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d101      	bne.n	800f5e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800f5e2:	2302      	movs	r3, #2
 800f5e4:	e027      	b.n	800f636 <HAL_UARTEx_DisableFifoMode+0x66>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2224      	movs	r2, #36	; 0x24
 800f5f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f022 0201 	bic.w	r2, r2, #1
 800f60c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f614:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2200      	movs	r2, #0
 800f61a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2220      	movs	r2, #32
 800f628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr

0800f642 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b084      	sub	sp, #16
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
 800f64a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f652:	2b01      	cmp	r3, #1
 800f654:	d101      	bne.n	800f65a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f656:	2302      	movs	r3, #2
 800f658:	e02d      	b.n	800f6b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2201      	movs	r2, #1
 800f65e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2224      	movs	r2, #36	; 0x24
 800f666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f022 0201 	bic.w	r2, r2, #1
 800f680:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	683a      	ldr	r2, [r7, #0]
 800f692:	430a      	orrs	r2, r1
 800f694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 f850 	bl	800f73c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2220      	movs	r2, #32
 800f6a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b084      	sub	sp, #16
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
 800f6c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d101      	bne.n	800f6d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6d2:	2302      	movs	r3, #2
 800f6d4:	e02d      	b.n	800f732 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2201      	movs	r2, #1
 800f6da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2224      	movs	r2, #36	; 0x24
 800f6e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f022 0201 	bic.w	r2, r2, #1
 800f6fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	683a      	ldr	r2, [r7, #0]
 800f70e:	430a      	orrs	r2, r1
 800f710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 f812 	bl	800f73c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2220      	movs	r2, #32
 800f724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3710      	adds	r7, #16
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
	...

0800f73c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d108      	bne.n	800f75e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2201      	movs	r2, #1
 800f758:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f75c:	e031      	b.n	800f7c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f75e:	2310      	movs	r3, #16
 800f760:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f762:	2310      	movs	r3, #16
 800f764:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	0e5b      	lsrs	r3, r3, #25
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	f003 0307 	and.w	r3, r3, #7
 800f774:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	0f5b      	lsrs	r3, r3, #29
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	f003 0307 	and.w	r3, r3, #7
 800f784:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f786:	7bbb      	ldrb	r3, [r7, #14]
 800f788:	7b3a      	ldrb	r2, [r7, #12]
 800f78a:	4911      	ldr	r1, [pc, #68]	; (800f7d0 <UARTEx_SetNbDataToProcess+0x94>)
 800f78c:	5c8a      	ldrb	r2, [r1, r2]
 800f78e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f792:	7b3a      	ldrb	r2, [r7, #12]
 800f794:	490f      	ldr	r1, [pc, #60]	; (800f7d4 <UARTEx_SetNbDataToProcess+0x98>)
 800f796:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f798:	fb93 f3f2 	sdiv	r3, r3, r2
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
 800f7a6:	7b7a      	ldrb	r2, [r7, #13]
 800f7a8:	4909      	ldr	r1, [pc, #36]	; (800f7d0 <UARTEx_SetNbDataToProcess+0x94>)
 800f7aa:	5c8a      	ldrb	r2, [r1, r2]
 800f7ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f7b0:	7b7a      	ldrb	r2, [r7, #13]
 800f7b2:	4908      	ldr	r1, [pc, #32]	; (800f7d4 <UARTEx_SetNbDataToProcess+0x98>)
 800f7b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f7c2:	bf00      	nop
 800f7c4:	3714      	adds	r7, #20
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	0800fbec 	.word	0x0800fbec
 800f7d4:	0800fbf4 	.word	0x0800fbf4

0800f7d8 <memset>:
 800f7d8:	4402      	add	r2, r0
 800f7da:	4603      	mov	r3, r0
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d100      	bne.n	800f7e2 <memset+0xa>
 800f7e0:	4770      	bx	lr
 800f7e2:	f803 1b01 	strb.w	r1, [r3], #1
 800f7e6:	e7f9      	b.n	800f7dc <memset+0x4>

0800f7e8 <__libc_init_array>:
 800f7e8:	b570      	push	{r4, r5, r6, lr}
 800f7ea:	4d0d      	ldr	r5, [pc, #52]	; (800f820 <__libc_init_array+0x38>)
 800f7ec:	4c0d      	ldr	r4, [pc, #52]	; (800f824 <__libc_init_array+0x3c>)
 800f7ee:	1b64      	subs	r4, r4, r5
 800f7f0:	10a4      	asrs	r4, r4, #2
 800f7f2:	2600      	movs	r6, #0
 800f7f4:	42a6      	cmp	r6, r4
 800f7f6:	d109      	bne.n	800f80c <__libc_init_array+0x24>
 800f7f8:	4d0b      	ldr	r5, [pc, #44]	; (800f828 <__libc_init_array+0x40>)
 800f7fa:	4c0c      	ldr	r4, [pc, #48]	; (800f82c <__libc_init_array+0x44>)
 800f7fc:	f000 f818 	bl	800f830 <_init>
 800f800:	1b64      	subs	r4, r4, r5
 800f802:	10a4      	asrs	r4, r4, #2
 800f804:	2600      	movs	r6, #0
 800f806:	42a6      	cmp	r6, r4
 800f808:	d105      	bne.n	800f816 <__libc_init_array+0x2e>
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f810:	4798      	blx	r3
 800f812:	3601      	adds	r6, #1
 800f814:	e7ee      	b.n	800f7f4 <__libc_init_array+0xc>
 800f816:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81a:	4798      	blx	r3
 800f81c:	3601      	adds	r6, #1
 800f81e:	e7f2      	b.n	800f806 <__libc_init_array+0x1e>
 800f820:	0800fc04 	.word	0x0800fc04
 800f824:	0800fc04 	.word	0x0800fc04
 800f828:	0800fc04 	.word	0x0800fc04
 800f82c:	0800fc08 	.word	0x0800fc08

0800f830 <_init>:
 800f830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f832:	bf00      	nop
 800f834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f836:	bc08      	pop	{r3}
 800f838:	469e      	mov	lr, r3
 800f83a:	4770      	bx	lr

0800f83c <_fini>:
 800f83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83e:	bf00      	nop
 800f840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f842:	bc08      	pop	{r3}
 800f844:	469e      	mov	lr, r3
 800f846:	4770      	bx	lr
